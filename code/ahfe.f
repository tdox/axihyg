      program AXI

c     version 1.0 1 January 1988
c     version 1.1 revised 15 Sept. 1990
      
      
      integer   INFIL,OUTFIL,ERRRFL,UFIL,WFIL,BFIL,SHPFIL,POSFIL,
     *          NRFIL,M1RFIL,M2RFIL,M3RFIL,QRFIL,TRFIL,DOCFIL
      parameter(INFIL=10,OUTFIL=11,ERRRFL=12,UFIL=20, WFIL=21, BFIL=22,
     *          SHPFIL=23, POSFIL=24,NRFIL=25,M1RFIL=26,M2RFIL=27,
     *          M3RFIL=28,QRFIL=29,TRFIL=30,DOCFIL=4)
    
    
      integer      TERM,ERRFIL
      common /IO/  TERM,ERRFIL
      save   /IO/
      
      character*10    OTFILE
      logical         BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI
      integer         THEORY,TORORD,OSHPU,OSHPW,OSHPD, NINT,NINTW,NINTD
      common /CONTRL/ BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI,
     *                THEORY,TORORD,OSHPU,OSHPW,OSHPD,NINT,NINTW,NINTD,
     *                OTFILE
      save   /CONTRL/
      
      
      
      ERRFIL = ERRRFL
      
      open (unit=ERRFIL, file= 'ERROR.DAT', status= 'new')
      open (unit=DOCFIL, file= 'DOCOUT.DAT', status= 'new')
      
      write(*,100)
100   format(' in AXI, calling INPUT')
      call INPUT
      
      write(*,110)
110   format(' calling INTDAT')
      call INTDAT
      
      write(*,120)
120   format(' calling IDIEN')      
      call IDIEN
      
      write(*,130)
130   format(' calling FORMKF')
      call FORMKF      
      
      write(*,140)
140   format(' calling SOLVE')
      call SOLVE
      
      
      if (BACK .and. RSLT) then
         write(*,150)
150      format(' calling RESULT')
         call RESULT
      end if
      
      write(*,160)
160   format(' calling OUTPUT')
      call OUTPUT
      
      close(ERRFIL)

      stop
      end
      
      



      


      subroutine B1EB1(B1,E,KE11)
c     Name:      B1EB1
c     Purpose:   To perform the multiplication KE11=Bt*EMAT*B
c     Common:
c     Input:     B1 and EMAT

c     Output:    KES
c     Called by: KESHRT
c     Calls    :
c                                                                      |
c*******************************************************************************


      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     

      integer  I,J
      real*8   B1(MXNEPS,MXNVAR),KE11(MXNVAR,MXNVAR),E(MXNEPS,MXNEPS)

      KE11(1,1) = B1(9,1)**2*E(9,9)+B1(2,1)*(B1(2,1)*E(2,2)+B1(1,1)*E(1,
     1   2))+B1(1,1)*(E(1,2)*B1(2,1)+B1(1,1)*E(1,1))
      KE11(1,2) = B1(9,1)*E(9,10)*B1(10,2)+B1(2,1)*(E(2,4)*B1(4,2)+E(2,3
     1   )*B1(3,2)+B1(2,2)*E(2,2))+B1(1,1)*(E(1,4)*B1(4,2)+E(1,3)*B1(3,2
     2   )+E(1,2)*B1(2,2))
      KE11(1,3) = B1(9,1)*B1(9,3)*E(9,9)+B1(2,1)*(E(2,2)*B1(2,3)+E(1,2)*
     1   B1(1,3))+B1(1,1)*(E(1,2)*B1(2,3)+E(1,1)*B1(1,3))
      KE11(1,4) = B1(9,1)*B1(9,4)*E(9,9)+B1(2,1)*(E(2,6)*B1(6,4)+E(2,5)*
     1   B1(5,4))+B1(1,1)*(E(1,6)*B1(6,4)+E(1,5)*B1(5,4))
      KE11(1,5) = B1(9,1)*E(9,10)*B1(10,5)+B1(2,1)*(E(2,8)*B1(8,5)+E(2,7
     1   )*B1(7,5))+B1(1,1)*(E(1,8)*B1(8,5)+E(1,7)*B1(7,5))
      KE11(1,6) = B1(9,1)*E(9,12)*B1(12,6)+B1(2,1)*(E(2,11)*B1(11,6)+E(2
     1   ,6)*B1(6,6)+E(2,5)*B1(5,6))+B1(1,1)*(E(1,11)*B1(11,6)+E(1,6)*B1
     2   (6,6)+E(1,5)*B1(5,6))
      KE11(1,7) = B1(9,1)*E(9,23)*B1(23,7)+B1(2,1)*(E(2,16)*B1(16,7)+E(2
     1   ,15)*B1(15,7)+E(2,14)*B1(14,7))+B1(1,1)*(E(1,16)*B1(16,7)+E(1,1
     2   5)*B1(15,7)+E(1,14)*B1(14,7))
      KE11(1,8) = B1(9,1)*(E(9,25)*B1(25,8)+E(9,23)*B1(23,8))+B1(2,1)*(E
     1   (2,20)*B1(20,8)+E(2,19)*B1(19,8))+B1(1,1)*(E(1,20)*B1(20,8)+E(1
     2   ,19)*B1(19,8))
      KE11(1,9) = B1(9,1)*(E(9,26)*B1(26,9)+E(9,24)*B1(24,9))+B1(2,1)*(E
     1   (2,22)*B1(22,9)+E(2,21)*B1(21,9))+B1(1,1)*(E(1,22)*B1(22,9)+E(1
     2   ,21)*B1(21,9))
      KE11(1,10) = B1(9,1)*(E(9,23)*B1(23,10)+E(9,12)*B1(12,10))+B1(2,1)
     1   *(E(2,16)*B1(16,10)+E(2,15)*B1(15,10))+B1(1,1)*(E(1,16)*B1(16,1
     2   0)+E(1,15)*B1(15,10))
      KE11(1,11) = B1(9,1)*(E(9,24)*B1(24,11)+E(9,13)*B1(13,11))+B1(2,1)
     1   *(E(2,18)*B1(18,11)+E(2,17)*B1(17,11))+B1(1,1)*(E(1,18)*B1(18,1
     2   1)+E(1,17)*B1(17,11))
      KE11(1,12) = B1(2,1)*(E(2,27)*B1(27,12)+E(2,20)*B1(20,12)+E(2,19)*
     1   B1(19,12))+B1(1,1)*(E(1,27)*B1(27,12)+E(1,20)*B1(20,12)+E(1,19)
     2   *B1(19,12))
      KE11(2,2) = B1(10,2)**2*E(10,10)+B1(4,2)*(B1(4,2)*E(4,4)+B1(3,2)*E
     1   (3,4)+B1(2,2)*E(2,4))+B1(3,2)*(E(3,4)*B1(4,2)+B1(3,2)*E(3,3)+B1
     2   (2,2)*E(2,3))+B1(2,2)*(E(2,4)*B1(4,2)+E(2,3)*B1(3,2)+B1(2,2)*E(
     3   2,2))
      KE11(2,3) = B1(9,3)*E(9,10)*B1(10,2)+(B1(2,3)*E(2,4)+B1(1,3)*E(1,4
     1   ))*B1(4,2)+(B1(2,3)*E(2,3)+B1(1,3)*E(1,3))*B1(3,2)+B1(2,2)*(E(2
     2   ,2)*B1(2,3)+E(1,2)*B1(1,3))
      KE11(2,4) = B1(9,4)*E(9,10)*B1(10,2)+B1(4,2)*(E(4,6)*B1(6,4)+E(4,5
     1   )*B1(5,4))+B1(3,2)*(E(3,6)*B1(6,4)+E(3,5)*B1(5,4))+B1(2,2)*(E(2
     2   ,6)*B1(6,4)+E(2,5)*B1(5,4))
      KE11(2,5) = B1(10,2)*B1(10,5)*E(10,10)+B1(4,2)*(E(4,8)*B1(8,5)+E(4
     1   ,7)*B1(7,5))+B1(3,2)*(E(3,8)*B1(8,5)+E(3,7)*B1(7,5))+B1(2,2)*(E
     2   (2,8)*B1(8,5)+E(2,7)*B1(7,5))
      KE11(2,6) = B1(10,2)*E(10,12)*B1(12,6)+B1(4,2)*(E(4,11)*B1(11,6)+E
     1   (4,6)*B1(6,6)+E(4,5)*B1(5,6))+B1(3,2)*(E(3,11)*B1(11,6)+E(3,6)*
     2   B1(6,6)+E(3,5)*B1(5,6))+B1(2,2)*(E(2,11)*B1(11,6)+E(2,6)*B1(6,6
     3   )+E(2,5)*B1(5,6))
      KE11(2,7) = B1(10,2)*E(10,23)*B1(23,7)+B1(4,2)*(E(4,16)*B1(16,7)+E
     1   (4,15)*B1(15,7)+E(4,14)*B1(14,7))+B1(3,2)*(E(3,16)*B1(16,7)+E(3
     2   ,15)*B1(15,7)+E(3,14)*B1(14,7))+B1(2,2)*(E(2,16)*B1(16,7)+E(2,1
     3   5)*B1(15,7)+E(2,14)*B1(14,7))
      KE11(2,8) = B1(10,2)*(E(10,25)*B1(25,8)+E(10,23)*B1(23,8))+B1(4,2)
     1   *(E(4,20)*B1(20,8)+E(4,19)*B1(19,8))+B1(3,2)*(E(3,20)*B1(20,8)+
     2   E(3,19)*B1(19,8))+B1(2,2)*(E(2,20)*B1(20,8)+E(2,19)*B1(19,8))
      KE11(2,9) = B1(10,2)*(E(10,26)*B1(26,9)+E(10,24)*B1(24,9))+B1(4,2)
     1   *(E(4,22)*B1(22,9)+E(4,21)*B1(21,9))+B1(3,2)*(E(3,22)*B1(22,9)+
     2   E(3,21)*B1(21,9))+B1(2,2)*(E(2,22)*B1(22,9)+E(2,21)*B1(21,9))
      KE11(2,10) = B1(10,2)*(E(10,23)*B1(23,10)+E(10,12)*B1(12,10))+B1(4
     1   ,2)*(E(4,16)*B1(16,10)+E(4,15)*B1(15,10))+B1(3,2)*(E(3,16)*B1(1
     2   6,10)+E(3,15)*B1(15,10))+B1(2,2)*(E(2,16)*B1(16,10)+E(2,15)*B1(
     3   15,10))
      KE11(2,11) = B1(10,2)*(E(10,24)*B1(24,11)+E(10,13)*B1(13,11))+B1(4
     1   ,2)*(E(4,18)*B1(18,11)+E(4,17)*B1(17,11))+B1(3,2)*(E(3,18)*B1(1
     2   8,11)+E(3,17)*B1(17,11))+B1(2,2)*(E(2,18)*B1(18,11)+E(2,17)*B1(
     3   17,11))
      KE11(2,12) = B1(4,2)*(E(4,27)*B1(27,12)+E(4,20)*B1(20,12)+E(4,19)*
     1   B1(19,12))+B1(3,2)*(E(3,27)*B1(27,12)+E(3,20)*B1(20,12)+E(3,19)
     2   *B1(19,12))+B1(2,2)*(E(2,27)*B1(27,12)+E(2,20)*B1(20,12)+E(2,19
     3   )*B1(19,12))
      KE11(3,3) = B1(9,3)**2*E(9,9)+B1(2,3)*(E(2,2)*B1(2,3)+E(1,2)*B1(1,
     1   3))+B1(1,3)*(E(1,2)*B1(2,3)+E(1,1)*B1(1,3))
      KE11(3,4) = B1(9,3)*B1(9,4)*E(9,9)+B1(2,3)*(E(2,6)*B1(6,4)+E(2,5)*
     1   B1(5,4))+B1(1,3)*(E(1,6)*B1(6,4)+E(1,5)*B1(5,4))
      KE11(3,5) = B1(9,3)*E(9,10)*B1(10,5)+B1(2,3)*(E(2,8)*B1(8,5)+E(2,7
     1   )*B1(7,5))+B1(1,3)*(E(1,8)*B1(8,5)+E(1,7)*B1(7,5))
      KE11(3,6) = B1(9,3)*E(9,12)*B1(12,6)+B1(2,3)*(E(2,11)*B1(11,6)+E(2
     1   ,6)*B1(6,6)+E(2,5)*B1(5,6))+B1(1,3)*(E(1,11)*B1(11,6)+E(1,6)*B1
     2   (6,6)+E(1,5)*B1(5,6))
      KE11(3,7) = B1(9,3)*E(9,23)*B1(23,7)+B1(2,3)*(E(2,16)*B1(16,7)+E(2
     1   ,15)*B1(15,7)+E(2,14)*B1(14,7))+B1(1,3)*(E(1,16)*B1(16,7)+E(1,1
     2   5)*B1(15,7)+E(1,14)*B1(14,7))
      KE11(3,8) = B1(9,3)*(E(9,25)*B1(25,8)+E(9,23)*B1(23,8))+B1(2,3)*(E
     1   (2,20)*B1(20,8)+E(2,19)*B1(19,8))+B1(1,3)*(E(1,20)*B1(20,8)+E(1
     2   ,19)*B1(19,8))
      KE11(3,9) = B1(9,3)*(E(9,26)*B1(26,9)+E(9,24)*B1(24,9))+B1(2,3)*(E
     1   (2,22)*B1(22,9)+E(2,21)*B1(21,9))+B1(1,3)*(E(1,22)*B1(22,9)+E(1
     2   ,21)*B1(21,9))
      KE11(3,10) = B1(9,3)*(E(9,23)*B1(23,10)+E(9,12)*B1(12,10))+B1(2,3)
     1   *(E(2,16)*B1(16,10)+E(2,15)*B1(15,10))+B1(1,3)*(E(1,16)*B1(16,1
     2   0)+E(1,15)*B1(15,10))
      KE11(3,11) = B1(9,3)*(E(9,24)*B1(24,11)+E(9,13)*B1(13,11))+B1(2,3)
     1   *(E(2,18)*B1(18,11)+E(2,17)*B1(17,11))+B1(1,3)*(E(1,18)*B1(18,1
     2   1)+E(1,17)*B1(17,11))
      KE11(3,12) = B1(2,3)*(E(2,27)*B1(27,12)+E(2,20)*B1(20,12)+E(2,19)*
     1   B1(19,12))+B1(1,3)*(E(1,27)*B1(27,12)+E(1,20)*B1(20,12)+E(1,19)
     2   *B1(19,12))
      KE11(4,4) = B1(9,4)**2*E(9,9)+B1(6,4)*(B1(6,4)*E(6,6)+B1(5,4)*E(5,
     1   6))+B1(5,4)*(E(5,6)*B1(6,4)+B1(5,4)*E(5,5))
      KE11(4,5) = B1(9,4)*E(9,10)*B1(10,5)+B1(6,4)*(E(6,8)*B1(8,5)+E(6,7
     1   )*B1(7,5))+B1(5,4)*(E(5,8)*B1(8,5)+E(5,7)*B1(7,5))
      KE11(4,6) = B1(9,4)*E(9,12)*B1(12,6)+B1(6,4)*(E(6,11)*B1(11,6)+B1(
     1   6,6)*E(6,6)+B1(5,6)*E(5,6))+B1(5,4)*(E(5,11)*B1(11,6)+E(5,6)*B1
     2   (6,6)+E(5,5)*B1(5,6))
      KE11(4,7) = B1(9,4)*E(9,23)*B1(23,7)+B1(6,4)*(E(6,16)*B1(16,7)+E(6
     1   ,15)*B1(15,7)+E(6,14)*B1(14,7))+B1(5,4)*(E(5,16)*B1(16,7)+E(5,1
     2   5)*B1(15,7)+E(5,14)*B1(14,7))
      KE11(4,8) = B1(9,4)*(E(9,25)*B1(25,8)+E(9,23)*B1(23,8))+B1(6,4)*(E
     1   (6,20)*B1(20,8)+E(6,19)*B1(19,8))+B1(5,4)*(E(5,20)*B1(20,8)+E(5
     2   ,19)*B1(19,8))
      KE11(4,9) = B1(9,4)*(E(9,26)*B1(26,9)+E(9,24)*B1(24,9))+B1(6,4)*(E
     1   (6,22)*B1(22,9)+E(6,21)*B1(21,9))+B1(5,4)*(E(5,22)*B1(22,9)+E(5
     2   ,21)*B1(21,9))
      KE11(4,10) = B1(9,4)*(E(9,23)*B1(23,10)+E(9,12)*B1(12,10))+B1(6,4)
     1   *(E(6,16)*B1(16,10)+E(6,15)*B1(15,10))+B1(5,4)*(E(5,16)*B1(16,1
     2   0)+E(5,15)*B1(15,10))
      KE11(4,11) = B1(9,4)*(E(9,24)*B1(24,11)+E(9,13)*B1(13,11))+B1(6,4)
     1   *(E(6,18)*B1(18,11)+E(6,17)*B1(17,11))+B1(5,4)*(E(5,18)*B1(18,1
     2   1)+E(5,17)*B1(17,11))
      KE11(4,12) = B1(6,4)*(E(6,27)*B1(27,12)+E(6,20)*B1(20,12)+E(6,19)*
     1   B1(19,12))+B1(5,4)*(E(5,27)*B1(27,12)+E(5,20)*B1(20,12)+E(5,19)
     2   *B1(19,12))
      KE11(5,5) = B1(10,5)**2*E(10,10)+B1(8,5)*(B1(8,5)*E(8,8)+B1(7,5)*E
     1   (7,8))+B1(7,5)*(E(7,8)*B1(8,5)+B1(7,5)*E(7,7))
      KE11(5,6) = B1(10,5)*E(10,12)*B1(12,6)+B1(8,5)*(E(8,11)*B1(11,6)+B
     1   1(6,6)*E(6,8)+B1(5,6)*E(5,8))+B1(7,5)*(E(7,11)*B1(11,6)+B1(6,6)
     2   *E(6,7)+B1(5,6)*E(5,7))
      KE11(5,7) = B1(10,5)*E(10,23)*B1(23,7)+B1(8,5)*(E(8,16)*B1(16,7)+E
     1   (8,15)*B1(15,7)+E(8,14)*B1(14,7))+B1(7,5)*(E(7,16)*B1(16,7)+E(7
     2   ,15)*B1(15,7)+E(7,14)*B1(14,7))
      KE11(5,8) = B1(10,5)*(E(10,25)*B1(25,8)+E(10,23)*B1(23,8))+B1(8,5)
     1   *(E(8,20)*B1(20,8)+E(8,19)*B1(19,8))+B1(7,5)*(E(7,20)*B1(20,8)+
     2   E(7,19)*B1(19,8))
      KE11(5,9) = B1(10,5)*(E(10,26)*B1(26,9)+E(10,24)*B1(24,9))+B1(8,5)
     1   *(E(8,22)*B1(22,9)+E(8,21)*B1(21,9))+B1(7,5)*(E(7,22)*B1(22,9)+
     2   E(7,21)*B1(21,9))
      KE11(5,10) = B1(10,5)*(E(10,23)*B1(23,10)+E(10,12)*B1(12,10))+B1(8
     1   ,5)*(E(8,16)*B1(16,10)+E(8,15)*B1(15,10))+B1(7,5)*(E(7,16)*B1(1
     2   6,10)+E(7,15)*B1(15,10))
      KE11(5,11) = B1(10,5)*(E(10,24)*B1(24,11)+E(10,13)*B1(13,11))+B1(8
     1   ,5)*(E(8,18)*B1(18,11)+E(8,17)*B1(17,11))+B1(7,5)*(E(7,18)*B1(1
     2   8,11)+E(7,17)*B1(17,11))
      KE11(5,12) = B1(8,5)*(E(8,27)*B1(27,12)+E(8,20)*B1(20,12)+E(8,19)*
     1   B1(19,12))+B1(7,5)*(E(7,27)*B1(27,12)+E(7,20)*B1(20,12)+E(7,19)
     2   *B1(19,12))
      KE11(6,6) = B1(12,6)**2*E(12,12)+B1(11,6)*(B1(11,6)*E(11,11)+B1(6,
     1   6)*E(6,11)+B1(5,6)*E(5,11))+B1(6,6)*(E(6,11)*B1(11,6)+B1(6,6)*E
     2   (6,6)+B1(5,6)*E(5,6))+B1(5,6)*(E(5,11)*B1(11,6)+E(5,6)*B1(6,6)+
     3   E(5,5)*B1(5,6))
      KE11(6,7) = B1(12,6)*E(12,23)*B1(23,7)+B1(11,6)*(E(11,16)*B1(16,7)
     1   +E(11,15)*B1(15,7)+E(11,14)*B1(14,7))+B1(6,6)*(E(6,16)*B1(16,7)
     2   +E(6,15)*B1(15,7)+E(6,14)*B1(14,7))+B1(5,6)*(E(5,16)*B1(16,7)+E
     3   (5,15)*B1(15,7)+E(5,14)*B1(14,7))
      KE11(6,8) = B1(12,6)*(E(12,25)*B1(25,8)+E(12,23)*B1(23,8))+B1(11,6
     1   )*(E(11,20)*B1(20,8)+E(11,19)*B1(19,8))+B1(6,6)*(E(6,20)*B1(20,
     2   8)+E(6,19)*B1(19,8))+B1(5,6)*(E(5,20)*B1(20,8)+E(5,19)*B1(19,8)
     3   )
      KE11(6,9) = B1(12,6)*(E(12,26)*B1(26,9)+E(12,24)*B1(24,9))+B1(11,6
     1   )*(E(11,22)*B1(22,9)+E(11,21)*B1(21,9))+B1(6,6)*(E(6,22)*B1(22,
     2   9)+E(6,21)*B1(21,9))+B1(5,6)*(E(5,22)*B1(22,9)+E(5,21)*B1(21,9)
     3   )
      KE11(6,10) = B1(12,6)*(E(12,23)*B1(23,10)+B1(12,10)*E(12,12))+B1(1
     1   1,6)*(E(11,16)*B1(16,10)+E(11,15)*B1(15,10))+B1(6,6)*(E(6,16)*B
     2   1(16,10)+E(6,15)*B1(15,10))+B1(5,6)*(E(5,16)*B1(16,10)+E(5,15)*
     3   B1(15,10))
      KE11(6,11) = B1(12,6)*(E(12,24)*B1(24,11)+E(12,13)*B1(13,11))+B1(1
     1   1,6)*(E(11,18)*B1(18,11)+E(11,17)*B1(17,11))+B1(6,6)*(E(6,18)*B
     2   1(18,11)+E(6,17)*B1(17,11))+B1(5,6)*(E(5,18)*B1(18,11)+E(5,17)*
     3   B1(17,11))
      KE11(6,12) = B1(11,6)*(E(11,27)*B1(27,12)+E(11,20)*B1(20,12)+E(11,
     1   19)*B1(19,12))+B1(6,6)*(E(6,27)*B1(27,12)+E(6,20)*B1(20,12)+E(6
     2   ,19)*B1(19,12))+B1(5,6)*(E(5,27)*B1(27,12)+E(5,20)*B1(20,12)+E(
     3   5,19)*B1(19,12))
      KE11(7,7) = B1(23,7)**2*E(23,23)+B1(16,7)*(B1(16,7)*E(16,16)+B1(15
     1   ,7)*E(15,16)+B1(14,7)*E(14,16))+B1(15,7)*(E(15,16)*B1(16,7)+B1(
     2   15,7)*E(15,15)+B1(14,7)*E(14,15))+B1(14,7)*(E(14,16)*B1(16,7)+E
     3   (14,15)*B1(15,7)+B1(14,7)*E(14,14))
      KE11(7,8) = B1(23,7)*(E(23,25)*B1(25,8)+B1(23,8)*E(23,23))+B1(16,7
     1   )*(E(16,20)*B1(20,8)+E(16,19)*B1(19,8))+B1(15,7)*(E(15,20)*B1(2
     2   0,8)+E(15,19)*B1(19,8))+B1(14,7)*(E(14,20)*B1(20,8)+E(14,19)*B1
     3   (19,8))
      KE11(7,9) = B1(23,7)*(E(23,26)*B1(26,9)+E(23,24)*B1(24,9))+B1(16,7
     1   )*(E(16,22)*B1(22,9)+E(16,21)*B1(21,9))+B1(15,7)*(E(15,22)*B1(2
     2   2,9)+E(15,21)*B1(21,9))+B1(14,7)*(E(14,22)*B1(22,9)+E(14,21)*B1
     3   (21,9))
      KE11(7,10) = B1(23,7)*(B1(23,10)*E(23,23)+B1(12,10)*E(12,23))+B1(1
     1   6,7)*(B1(16,10)*E(16,16)+B1(15,10)*E(15,16))+B1(15,7)*(E(15,16)
     2   *B1(16,10)+B1(15,10)*E(15,15))+B1(14,7)*(E(14,16)*B1(16,10)+E(1
     3   4,15)*B1(15,10))
      KE11(7,11) = B1(23,7)*(E(23,24)*B1(24,11)+B1(13,11)*E(13,23))+B1(1
     1   6,7)*(E(16,18)*B1(18,11)+E(16,17)*B1(17,11))+B1(15,7)*(E(15,18)
     2   *B1(18,11)+E(15,17)*B1(17,11))+B1(14,7)*(E(14,18)*B1(18,11)+E(1
     3   4,17)*B1(17,11))
      KE11(7,12) = B1(16,7)*(E(16,27)*B1(27,12)+E(16,20)*B1(20,12)+E(16,
     1   19)*B1(19,12))+B1(15,7)*(E(15,27)*B1(27,12)+E(15,20)*B1(20,12)+
     2   E(15,19)*B1(19,12))+B1(14,7)*(E(14,27)*B1(27,12)+E(14,20)*B1(20
     3   ,12)+E(14,19)*B1(19,12))
      KE11(8,8) = B1(25,8)*(B1(25,8)*E(25,25)+B1(23,8)*E(23,25))+B1(23,8
     1   )*(E(23,25)*B1(25,8)+B1(23,8)*E(23,23))+B1(20,8)*(B1(20,8)*E(20
     2   ,20)+B1(19,8)*E(19,20))+B1(19,8)*(E(19,20)*B1(20,8)+B1(19,8)*E(
     3   19,19))
      KE11(8,9) = B1(25,8)*(E(25,26)*B1(26,9)+B1(24,9)*E(24,25))+B1(23,8
     1   )*(E(23,26)*B1(26,9)+E(23,24)*B1(24,9))+B1(20,8)*(E(20,22)*B1(2
     2   2,9)+E(20,21)*B1(21,9))+B1(19,8)*(E(19,22)*B1(22,9)+E(19,21)*B1
     3   (21,9))
      KE11(8,10) = (B1(23,10)*E(23,25)+B1(12,10)*E(12,25))*B1(25,8)+B1(2
     1   3,8)*(B1(23,10)*E(23,23)+B1(12,10)*E(12,23))+(B1(16,10)*E(16,20
     2   )+B1(15,10)*E(15,20))*B1(20,8)+(B1(16,10)*E(16,19)+B1(15,10)*E(
     3   15,19))*B1(19,8)
      KE11(8,11) = (B1(24,11)*E(24,25)+B1(13,11)*E(13,25))*B1(25,8)+B1(2
     1   3,8)*(E(23,24)*B1(24,11)+B1(13,11)*E(13,23))+(B1(18,11)*E(18,20
     2   )+B1(17,11)*E(17,20))*B1(20,8)+(B1(18,11)*E(18,19)+B1(17,11)*E(
     3   17,19))*B1(19,8)
      KE11(8,12) = B1(20,8)*(E(20,27)*B1(27,12)+B1(20,12)*E(20,20)+B1(19
     1   ,12)*E(19,20))+B1(19,8)*(E(19,27)*B1(27,12)+E(19,20)*B1(20,12)+
     2   B1(19,12)*E(19,19))
      KE11(9,9) = B1(26,9)*(B1(26,9)*E(26,26)+B1(24,9)*E(24,26))+B1(24,9
     1   )*(E(24,26)*B1(26,9)+B1(24,9)*E(24,24))+B1(22,9)*(B1(22,9)*E(22
     2   ,22)+B1(21,9)*E(21,22))+B1(21,9)*(E(21,22)*B1(22,9)+B1(21,9)*E(
     3   21,21))
      KE11(9,10) = (B1(23,10)*E(23,26)+B1(12,10)*E(12,26))*B1(26,9)+(B1(
     1   23,10)*E(23,24)+B1(12,10)*E(12,24))*B1(24,9)+(B1(16,10)*E(16,22
     2   )+B1(15,10)*E(15,22))*B1(22,9)+(B1(16,10)*E(16,21)+B1(15,10)*E(
     3   15,21))*B1(21,9)
      KE11(9,11) = (B1(24,11)*E(24,26)+B1(13,11)*E(13,26))*B1(26,9)+B1(2
     1   4,9)*(B1(24,11)*E(24,24)+B1(13,11)*E(13,24))+(B1(18,11)*E(18,22
     2   )+B1(17,11)*E(17,22))*B1(22,9)+(B1(18,11)*E(18,21)+B1(17,11)*E(
     3   17,21))*B1(21,9)
      KE11(9,12) = B1(22,9)*(E(22,27)*B1(27,12)+B1(20,12)*E(20,22)+B1(19
     1   ,12)*E(19,22))+B1(21,9)*(E(21,27)*B1(27,12)+B1(20,12)*E(20,21)+
     2   B1(19,12)*E(19,21))
      KE11(10,10) = B1(23,10)*(B1(23,10)*E(23,23)+B1(12,10)*E(12,23))+B1
     1   (12,10)*(E(12,23)*B1(23,10)+B1(12,10)*E(12,12))+B1(16,10)*(B1(1
     2   6,10)*E(16,16)+B1(15,10)*E(15,16))+B1(15,10)*(E(15,16)*B1(16,10
     3   )+B1(15,10)*E(15,15))
      KE11(10,11) = B1(23,10)*(E(23,24)*B1(24,11)+B1(13,11)*E(13,23))+B1
     1   (12,10)*(E(12,24)*B1(24,11)+E(12,13)*B1(13,11))+B1(16,10)*(E(16
     2   ,18)*B1(18,11)+E(16,17)*B1(17,11))+B1(15,10)*(E(15,18)*B1(18,11
     3   )+E(15,17)*B1(17,11))
      KE11(10,12) = B1(16,10)*(E(16,27)*B1(27,12)+E(16,20)*B1(20,12)+E(1
     1   6,19)*B1(19,12))+B1(15,10)*(E(15,27)*B1(27,12)+E(15,20)*B1(20,1
     2   2)+E(15,19)*B1(19,12))
      KE11(11,11) = B1(24,11)*(B1(24,11)*E(24,24)+B1(13,11)*E(13,24))+B1
     1   (13,11)*(E(13,24)*B1(24,11)+B1(13,11)*E(13,13))+B1(18,11)*(B1(1
     2   8,11)*E(18,18)+B1(17,11)*E(17,18))+B1(17,11)*(E(17,18)*B1(18,11
     3   )+B1(17,11)*E(17,17))
      KE11(11,12) = B1(18,11)*(E(18,27)*B1(27,12)+E(18,20)*B1(20,12)+E(1
     1   8,19)*B1(19,12))+B1(17,11)*(E(17,27)*B1(27,12)+E(17,20)*B1(20,1
     2   2)+E(17,19)*B1(19,12))
      KE11(12,12) = B1(27,12)*(B1(27,12)*E(27,27)+B1(20,12)*E(20,27)+B1(
     1   19,12)*E(19,27))+B1(20,12)*(E(20,27)*B1(27,12)+B1(20,12)*E(20,2
     2   0)+B1(19,12)*E(19,20))+B1(19,12)*(E(19,27)*B1(27,12)+E(19,20)*B
     3   1(20,12)+B1(19,12)*E(19,19))

      do 1 I=1,12
         do 2 J=I+1,12
            KE11(J,I) = KE11(I,J)
2        continue
1     continue


      return
      end








      subroutine B1EB2(B1,B2,E,KE12)
c     Name:      B1EB1
c     Purpose:   To perform the multiplication KE12=B1t*EMAT*B2
c     Common:
c     Input:     B1,B2 and EMAT

c     Output:    KES
c     Called by: KESHRT
c     Calls    :
c                                                                      |
c*******************************************************************************


      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     

      real*8   B1(MXNEPS,MXNVAR), B2(MXNEPS,MXNVAR),
     &         KE12(MXNVAR,MXNVAR),E(MXNEPS,MXNEPS)
     
     
     
      KE12(1,1) = B1(9,1)*B2(9,1)*E(9,9)+B1(2,1)*(B2(2,1)*E(2,2)+B2(1,1)
     1   *E(1,2))+B1(1,1)*(E(1,2)*B2(2,1)+B2(1,1)*E(1,1))
      KE12(1,2) = B1(9,1)*B2(9,2)*E(9,9)+B1(2,1)*(B2(2,2)*E(2,2)+B2(1,2)
     1   *E(1,2))+B1(1,1)*(E(1,2)*B2(2,2)+E(1,1)*B2(1,2))
      KE12(2,1) = B2(9,1)*E(9,10)*B1(10,2)+(B2(2,1)*E(2,4)+B2(1,1)*E(1,4
     1   ))*B1(4,2)+(B2(2,1)*E(2,3)+B2(1,1)*E(1,3))*B1(3,2)+B1(2,2)*(B2(
     2   2,1)*E(2,2)+B2(1,1)*E(1,2))
      KE12(2,2) = B2(9,2)*E(9,10)*B1(10,2)+(B2(2,2)*E(2,4)+B2(1,2)*E(1,4
     1   ))*B1(4,2)+(B2(2,2)*E(2,3)+B2(1,2)*E(1,3))*B1(3,2)+B1(2,2)*(B2(
     2   2,2)*E(2,2)+B2(1,2)*E(1,2))
      KE12(3,1) = B2(9,1)*B1(9,3)*E(9,9)+(B2(2,1)*E(2,2)+B2(1,1)*E(1,2))
     1   *B1(2,3)+B1(1,3)*(E(1,2)*B2(2,1)+B2(1,1)*E(1,1))
      KE12(3,2) = B2(9,2)*B1(9,3)*E(9,9)+(B2(2,2)*E(2,2)+B2(1,2)*E(1,2))
     1   *B1(2,3)+B1(1,3)*(E(1,2)*B2(2,2)+E(1,1)*B2(1,2))
      KE12(4,1) = B2(9,1)*B1(9,4)*E(9,9)+(B2(2,1)*E(2,6)+B2(1,1)*E(1,6))
     1   *B1(6,4)+(B2(2,1)*E(2,5)+B2(1,1)*E(1,5))*B1(5,4)
      KE12(4,2) = B2(9,2)*B1(9,4)*E(9,9)+(B2(2,2)*E(2,6)+B2(1,2)*E(1,6))
     1   *B1(6,4)+(B2(2,2)*E(2,5)+B2(1,2)*E(1,5))*B1(5,4)
      KE12(5,1) = B2(9,1)*E(9,10)*B1(10,5)+(B2(2,1)*E(2,8)+B2(1,1)*E(1,8
     1   ))*B1(8,5)+(B2(2,1)*E(2,7)+B2(1,1)*E(1,7))*B1(7,5)
      KE12(5,2) = B2(9,2)*E(9,10)*B1(10,5)+(B2(2,2)*E(2,8)+B2(1,2)*E(1,8
     1   ))*B1(8,5)+(B2(2,2)*E(2,7)+B2(1,2)*E(1,7))*B1(7,5)
      KE12(6,1) = B2(9,1)*E(9,12)*B1(12,6)+(B2(2,1)*E(2,11)+B2(1,1)*E(1,
     1   11))*B1(11,6)+(B2(2,1)*E(2,6)+B2(1,1)*E(1,6))*B1(6,6)+(B2(2,1)*
     2   E(2,5)+B2(1,1)*E(1,5))*B1(5,6)
      KE12(6,2) = B2(9,2)*E(9,12)*B1(12,6)+(B2(2,2)*E(2,11)+B2(1,2)*E(1,
     1   11))*B1(11,6)+(B2(2,2)*E(2,6)+B2(1,2)*E(1,6))*B1(6,6)+(B2(2,2)*
     2   E(2,5)+B2(1,2)*E(1,5))*B1(5,6)
      KE12(7,1) = B2(9,1)*E(9,23)*B1(23,7)+(B2(2,1)*E(2,16)+B2(1,1)*E(1,
     1   16))*B1(16,7)+(B2(2,1)*E(2,15)+B2(1,1)*E(1,15))*B1(15,7)+(B2(2,
     2   1)*E(2,14)+B2(1,1)*E(1,14))*B1(14,7)
      KE12(7,2) = B2(9,2)*E(9,23)*B1(23,7)+(B2(2,2)*E(2,16)+B2(1,2)*E(1,
     1   16))*B1(16,7)+(B2(2,2)*E(2,15)+B2(1,2)*E(1,15))*B1(15,7)+(B2(2,
     2   2)*E(2,14)+B2(1,2)*E(1,14))*B1(14,7)
      KE12(8,1) = B2(9,1)*E(9,25)*B1(25,8)+B2(9,1)*E(9,23)*B1(23,8)+(B2(
     1   2,1)*E(2,20)+B2(1,1)*E(1,20))*B1(20,8)+(B2(2,1)*E(2,19)+B2(1,1)
     2   *E(1,19))*B1(19,8)
      KE12(8,2) = B2(9,2)*E(9,25)*B1(25,8)+B2(9,2)*E(9,23)*B1(23,8)+(B2(
     1   2,2)*E(2,20)+B2(1,2)*E(1,20))*B1(20,8)+(B2(2,2)*E(2,19)+B2(1,2)
     2   *E(1,19))*B1(19,8)
      KE12(9,1) = B2(9,1)*E(9,26)*B1(26,9)+B2(9,1)*E(9,24)*B1(24,9)+(B2(
     1   2,1)*E(2,22)+B2(1,1)*E(1,22))*B1(22,9)+(B2(2,1)*E(2,21)+B2(1,1)
     2   *E(1,21))*B1(21,9)
      KE12(9,2) = B2(9,2)*E(9,26)*B1(26,9)+B2(9,2)*E(9,24)*B1(24,9)+(B2(
     1   2,2)*E(2,22)+B2(1,2)*E(1,22))*B1(22,9)+(B2(2,2)*E(2,21)+B2(1,2)
     2   *E(1,21))*B1(21,9)
      KE12(10,1) = B2(9,1)*E(9,23)*B1(23,10)+(B2(2,1)*E(2,16)+B2(1,1)*E(
     1   1,16))*B1(16,10)+(B2(2,1)*E(2,15)+B2(1,1)*E(1,15))*B1(15,10)+B2
     2   (9,1)*E(9,12)*B1(12,10)
      KE12(10,2) = B2(9,2)*E(9,23)*B1(23,10)+(B2(2,2)*E(2,16)+B2(1,2)*E(
     1   1,16))*B1(16,10)+(B2(2,2)*E(2,15)+B2(1,2)*E(1,15))*B1(15,10)+B2
     2   (9,2)*E(9,12)*B1(12,10)
      KE12(11,1) = B2(9,1)*E(9,24)*B1(24,11)+(B2(2,1)*E(2,18)+B2(1,1)*E(
     1   1,18))*B1(18,11)+(B2(2,1)*E(2,17)+B2(1,1)*E(1,17))*B1(17,11)+B2
     2   (9,1)*E(9,13)*B1(13,11)
      KE12(11,2) = B2(9,2)*E(9,24)*B1(24,11)+(B2(2,2)*E(2,18)+B2(1,2)*E(
     1   1,18))*B1(18,11)+(B2(2,2)*E(2,17)+B2(1,2)*E(1,17))*B1(17,11)+B2
     2   (9,2)*E(9,13)*B1(13,11)
      KE12(12,1) = (B2(2,1)*E(2,27)+B2(1,1)*E(1,27))*B1(27,12)+(B2(2,1)*
     1   E(2,20)+B2(1,1)*E(1,20))*B1(20,12)+(B2(2,1)*E(2,19)+B2(1,1)*E(1
     2   ,19))*B1(19,12)
      KE12(12,2) = (B2(2,2)*E(2,27)+B2(1,2)*E(1,27))*B1(27,12)+(B2(2,2)*
     1   E(2,20)+B2(1,2)*E(1,20))*B1(20,12)+(B2(2,2)*E(2,19)+B2(1,2)*E(1
     2   ,19))*B1(19,12)

  
      return
      end







       subroutine B1EB3(B1,B3,E,KE13)
c     Name:      B1EB1
c     Purpose:   To perform the multiplication KE12=B1t*EMAT*B3
c     Common:
c     Input:     B1,B3 and EMAT

c     Output:    KES
c     Called by: KESHRT
c     Calls    :
c                                                                      |
c*******************************************************************************


      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     

      real*8   B1(MXNEPS,MXNVAR), B3(MXNEPS,MXNVAR),
     &         KE13(MXNVAR,MXNVAR),E(MXNEPS,MXNEPS)

      KE13(1,1) = B1(9,1)*B3(9,1)*E(9,9)+B1(2,1)*(B3(2,1)*E(2,2)+B3(1,1)
     1   *E(1,2))+B1(1,1)*(E(1,2)*B3(2,1)+B3(1,1)*E(1,1))
      KE13(1,2) = B1(9,1)*E(9,10)*B3(10,2)+B1(2,1)*(E(2,4)*B3(4,2)+E(2,3
     1   )*B3(3,2)+B3(2,2)*E(2,2))+B1(1,1)*(E(1,4)*B3(4,2)+E(1,3)*B3(3,2
     2   )+E(1,2)*B3(2,2))
      KE13(1,3) = B1(9,1)*B3(9,3)*E(9,9)+B1(2,1)*(E(2,2)*B3(2,3)+E(1,2)*
     1   B3(1,3))+B1(1,1)*(E(1,2)*B3(2,3)+E(1,1)*B3(1,3))
      KE13(1,4) = B1(9,1)*B3(9,4)*E(9,9)+B1(2,1)*(E(2,6)*B3(6,4)+E(2,5)*
     1   B3(5,4))+B1(1,1)*(E(1,6)*B3(6,4)+E(1,5)*B3(5,4))
      KE13(1,5) = B1(9,1)*E(9,10)*B3(10,5)+B1(2,1)*(E(2,8)*B3(8,5)+E(2,7
     1   )*B3(7,5))+B1(1,1)*(E(1,8)*B3(8,5)+E(1,7)*B3(7,5))
      KE13(1,6) = B1(9,1)*E(9,12)*B3(12,6)+B1(2,1)*(E(2,11)*B3(11,6)+E(2
     1   ,6)*B3(6,6)+E(2,5)*B3(5,6))+B1(1,1)*(E(1,11)*B3(11,6)+E(1,6)*B3
     2   (6,6)+E(1,5)*B3(5,6))
      KE13(1,7) = B1(9,1)*E(9,23)*B3(23,7)+B1(2,1)*(E(2,16)*B3(16,7)+E(2
     1   ,15)*B3(15,7)+E(2,14)*B3(14,7))+B1(1,1)*(E(1,16)*B3(16,7)+E(1,1
     2   5)*B3(15,7)+E(1,14)*B3(14,7))
      KE13(1,8) = B1(9,1)*(E(9,25)*B3(25,8)+E(9,23)*B3(23,8))+B1(2,1)*(E
     1   (2,20)*B3(20,8)+E(2,19)*B3(19,8))+B1(1,1)*(E(1,20)*B3(20,8)+E(1
     2   ,19)*B3(19,8))
      KE13(1,9) = B1(9,1)*(E(9,26)*B3(26,9)+E(9,24)*B3(24,9))+B1(2,1)*(E
     1   (2,22)*B3(22,9)+E(2,21)*B3(21,9))+B1(1,1)*(E(1,22)*B3(22,9)+E(1
     2   ,21)*B3(21,9))
      KE13(1,10) = B1(9,1)*(E(9,23)*B3(23,10)+E(9,12)*B3(12,10))+B1(2,1)
     1   *(E(2,16)*B3(16,10)+E(2,15)*B3(15,10))+B1(1,1)*(E(1,16)*B3(16,1
     2   0)+E(1,15)*B3(15,10))
      KE13(1,11) = B1(9,1)*(E(9,24)*B3(24,11)+E(9,13)*B3(13,11))+B1(2,1)
     1   *(E(2,18)*B3(18,11)+E(2,17)*B3(17,11))+B1(1,1)*(E(1,18)*B3(18,1
     2   1)+E(1,17)*B3(17,11))
      KE13(1,12) = B1(2,1)*(E(2,27)*B3(27,12)+E(2,20)*B3(20,12)+E(2,19)*
     1   B3(19,12))+B1(1,1)*(E(1,27)*B3(27,12)+E(1,20)*B3(20,12)+E(1,19)
     2   *B3(19,12))
      KE13(2,1) = B3(9,1)*E(9,10)*B1(10,2)+(B3(2,1)*E(2,4)+B3(1,1)*E(1,4
     1   ))*B1(4,2)+(B3(2,1)*E(2,3)+B3(1,1)*E(1,3))*B1(3,2)+B1(2,2)*(B3(
     2   2,1)*E(2,2)+B3(1,1)*E(1,2))
      KE13(2,2) = B1(10,2)*B3(10,2)*E(10,10)+B1(4,2)*(B3(4,2)*E(4,4)+B3(
     1   3,2)*E(3,4)+B3(2,2)*E(2,4))+B1(3,2)*(E(3,4)*B3(4,2)+B3(3,2)*E(3
     2   ,3)+B3(2,2)*E(2,3))+B1(2,2)*(E(2,4)*B3(4,2)+E(2,3)*B3(3,2)+B3(2
     3   ,2)*E(2,2))
      KE13(2,3) = B3(9,3)*E(9,10)*B1(10,2)+(B3(2,3)*E(2,4)+B3(1,3)*E(1,4
     1   ))*B1(4,2)+(B3(2,3)*E(2,3)+B3(1,3)*E(1,3))*B1(3,2)+B1(2,2)*(E(2
     2   ,2)*B3(2,3)+E(1,2)*B3(1,3))
      KE13(2,4) = B3(9,4)*E(9,10)*B1(10,2)+B1(4,2)*(E(4,6)*B3(6,4)+E(4,5
     1   )*B3(5,4))+B1(3,2)*(E(3,6)*B3(6,4)+E(3,5)*B3(5,4))+B1(2,2)*(E(2
     2   ,6)*B3(6,4)+E(2,5)*B3(5,4))
      KE13(2,5) = B1(10,2)*B3(10,5)*E(10,10)+B1(4,2)*(E(4,8)*B3(8,5)+E(4
     1   ,7)*B3(7,5))+B1(3,2)*(E(3,8)*B3(8,5)+E(3,7)*B3(7,5))+B1(2,2)*(E
     2   (2,8)*B3(8,5)+E(2,7)*B3(7,5))
      KE13(2,6) = B1(10,2)*E(10,12)*B3(12,6)+B1(4,2)*(E(4,11)*B3(11,6)+E
     1   (4,6)*B3(6,6)+E(4,5)*B3(5,6))+B1(3,2)*(E(3,11)*B3(11,6)+E(3,6)*
     2   B3(6,6)+E(3,5)*B3(5,6))+B1(2,2)*(E(2,11)*B3(11,6)+E(2,6)*B3(6,6
     3   )+E(2,5)*B3(5,6))
      KE13(2,7) = B1(10,2)*E(10,23)*B3(23,7)+B1(4,2)*(E(4,16)*B3(16,7)+E
     1   (4,15)*B3(15,7)+E(4,14)*B3(14,7))+B1(3,2)*(E(3,16)*B3(16,7)+E(3
     2   ,15)*B3(15,7)+E(3,14)*B3(14,7))+B1(2,2)*(E(2,16)*B3(16,7)+E(2,1
     3   5)*B3(15,7)+E(2,14)*B3(14,7))
      KE13(2,8) = B1(10,2)*(E(10,25)*B3(25,8)+E(10,23)*B3(23,8))+B1(4,2)
     1   *(E(4,20)*B3(20,8)+E(4,19)*B3(19,8))+B1(3,2)*(E(3,20)*B3(20,8)+
     2   E(3,19)*B3(19,8))+B1(2,2)*(E(2,20)*B3(20,8)+E(2,19)*B3(19,8))
      KE13(2,9) = B1(10,2)*(E(10,26)*B3(26,9)+E(10,24)*B3(24,9))+B1(4,2)
     1   *(E(4,22)*B3(22,9)+E(4,21)*B3(21,9))+B1(3,2)*(E(3,22)*B3(22,9)+
     2   E(3,21)*B3(21,9))+B1(2,2)*(E(2,22)*B3(22,9)+E(2,21)*B3(21,9))
      KE13(2,10) = B1(10,2)*(E(10,23)*B3(23,10)+E(10,12)*B3(12,10))+B1(4
     1   ,2)*(E(4,16)*B3(16,10)+E(4,15)*B3(15,10))+B1(3,2)*(E(3,16)*B3(1
     2   6,10)+E(3,15)*B3(15,10))+B1(2,2)*(E(2,16)*B3(16,10)+E(2,15)*B3(
     3   15,10))
      KE13(2,11) = B1(10,2)*(E(10,24)*B3(24,11)+E(10,13)*B3(13,11))+B1(4
     1   ,2)*(E(4,18)*B3(18,11)+E(4,17)*B3(17,11))+B1(3,2)*(E(3,18)*B3(1
     2   8,11)+E(3,17)*B3(17,11))+B1(2,2)*(E(2,18)*B3(18,11)+E(2,17)*B3(
     3   17,11))
      KE13(2,12) = B1(4,2)*(E(4,27)*B3(27,12)+E(4,20)*B3(20,12)+E(4,19)*
     1   B3(19,12))+B1(3,2)*(E(3,27)*B3(27,12)+E(3,20)*B3(20,12)+E(3,19)
     2   *B3(19,12))+B1(2,2)*(E(2,27)*B3(27,12)+E(2,20)*B3(20,12)+E(2,19
     3   )*B3(19,12))
      KE13(3,1) = B3(9,1)*B1(9,3)*E(9,9)+(B3(2,1)*E(2,2)+B3(1,1)*E(1,2))
     1   *B1(2,3)+B1(1,3)*(E(1,2)*B3(2,1)+B3(1,1)*E(1,1))
      KE13(3,2) = B1(9,3)*E(9,10)*B3(10,2)+B1(2,3)*(E(2,4)*B3(4,2)+E(2,3
     1   )*B3(3,2)+B3(2,2)*E(2,2))+B1(1,3)*(E(1,4)*B3(4,2)+E(1,3)*B3(3,2
     2   )+E(1,2)*B3(2,2))
      KE13(3,3) = B1(9,3)*B3(9,3)*E(9,9)+B1(2,3)*(E(2,2)*B3(2,3)+E(1,2)*
     1   B3(1,3))+B1(1,3)*(E(1,2)*B3(2,3)+E(1,1)*B3(1,3))
      KE13(3,4) = B1(9,3)*B3(9,4)*E(9,9)+B1(2,3)*(E(2,6)*B3(6,4)+E(2,5)*
     1   B3(5,4))+B1(1,3)*(E(1,6)*B3(6,4)+E(1,5)*B3(5,4))
      KE13(3,5) = B1(9,3)*E(9,10)*B3(10,5)+B1(2,3)*(E(2,8)*B3(8,5)+E(2,7
     1   )*B3(7,5))+B1(1,3)*(E(1,8)*B3(8,5)+E(1,7)*B3(7,5))
      KE13(3,6) = B1(9,3)*E(9,12)*B3(12,6)+B1(2,3)*(E(2,11)*B3(11,6)+E(2
     1   ,6)*B3(6,6)+E(2,5)*B3(5,6))+B1(1,3)*(E(1,11)*B3(11,6)+E(1,6)*B3
     2   (6,6)+E(1,5)*B3(5,6))
      KE13(3,7) = B1(9,3)*E(9,23)*B3(23,7)+B1(2,3)*(E(2,16)*B3(16,7)+E(2
     1   ,15)*B3(15,7)+E(2,14)*B3(14,7))+B1(1,3)*(E(1,16)*B3(16,7)+E(1,1
     2   5)*B3(15,7)+E(1,14)*B3(14,7))
      KE13(3,8) = B1(9,3)*(E(9,25)*B3(25,8)+E(9,23)*B3(23,8))+B1(2,3)*(E
     1   (2,20)*B3(20,8)+E(2,19)*B3(19,8))+B1(1,3)*(E(1,20)*B3(20,8)+E(1
     2   ,19)*B3(19,8))
      KE13(3,9) = B1(9,3)*(E(9,26)*B3(26,9)+E(9,24)*B3(24,9))+B1(2,3)*(E
     1   (2,22)*B3(22,9)+E(2,21)*B3(21,9))+B1(1,3)*(E(1,22)*B3(22,9)+E(1
     2   ,21)*B3(21,9))
      KE13(3,10) = B1(9,3)*(E(9,23)*B3(23,10)+E(9,12)*B3(12,10))+B1(2,3)
     1   *(E(2,16)*B3(16,10)+E(2,15)*B3(15,10))+B1(1,3)*(E(1,16)*B3(16,1
     2   0)+E(1,15)*B3(15,10))
      KE13(3,11) = B1(9,3)*(E(9,24)*B3(24,11)+E(9,13)*B3(13,11))+B1(2,3)
     1   *(E(2,18)*B3(18,11)+E(2,17)*B3(17,11))+B1(1,3)*(E(1,18)*B3(18,1
     2   1)+E(1,17)*B3(17,11))
      KE13(3,12) = B1(2,3)*(E(2,27)*B3(27,12)+E(2,20)*B3(20,12)+E(2,19)*
     1   B3(19,12))+B1(1,3)*(E(1,27)*B3(27,12)+E(1,20)*B3(20,12)+E(1,19)
     2   *B3(19,12))
      KE13(4,1) = B3(9,1)*B1(9,4)*E(9,9)+(B3(2,1)*E(2,6)+B3(1,1)*E(1,6))
     1   *B1(6,4)+(B3(2,1)*E(2,5)+B3(1,1)*E(1,5))*B1(5,4)
      KE13(4,2) = B1(9,4)*E(9,10)*B3(10,2)+(B3(4,2)*E(4,6)+B3(3,2)*E(3,6
     1   )+B3(2,2)*E(2,6))*B1(6,4)+(B3(4,2)*E(4,5)+B3(3,2)*E(3,5)+B3(2,2
     2   )*E(2,5))*B1(5,4)
      KE13(4,3) = B3(9,3)*B1(9,4)*E(9,9)+(B3(2,3)*E(2,6)+B3(1,3)*E(1,6))
     1   *B1(6,4)+(B3(2,3)*E(2,5)+B3(1,3)*E(1,5))*B1(5,4)
      KE13(4,4) = B1(9,4)*B3(9,4)*E(9,9)+B1(6,4)*(B3(6,4)*E(6,6)+B3(5,4)
     1   *E(5,6))+B1(5,4)*(E(5,6)*B3(6,4)+B3(5,4)*E(5,5))
      KE13(4,5) = B1(9,4)*E(9,10)*B3(10,5)+B1(6,4)*(E(6,8)*B3(8,5)+E(6,7
     1   )*B3(7,5))+B1(5,4)*(E(5,8)*B3(8,5)+E(5,7)*B3(7,5))
      KE13(4,6) = B1(9,4)*E(9,12)*B3(12,6)+B1(6,4)*(E(6,11)*B3(11,6)+B3(
     1   6,6)*E(6,6)+B3(5,6)*E(5,6))+B1(5,4)*(E(5,11)*B3(11,6)+E(5,6)*B3
     2   (6,6)+E(5,5)*B3(5,6))
      KE13(4,7) = B1(9,4)*E(9,23)*B3(23,7)+B1(6,4)*(E(6,16)*B3(16,7)+E(6
     1   ,15)*B3(15,7)+E(6,14)*B3(14,7))+B1(5,4)*(E(5,16)*B3(16,7)+E(5,1
     2   5)*B3(15,7)+E(5,14)*B3(14,7))
      KE13(4,8) = B1(9,4)*(E(9,25)*B3(25,8)+E(9,23)*B3(23,8))+B1(6,4)*(E
     1   (6,20)*B3(20,8)+E(6,19)*B3(19,8))+B1(5,4)*(E(5,20)*B3(20,8)+E(5
     2   ,19)*B3(19,8))
      KE13(4,9) = B1(9,4)*(E(9,26)*B3(26,9)+E(9,24)*B3(24,9))+B1(6,4)*(E
     1   (6,22)*B3(22,9)+E(6,21)*B3(21,9))+B1(5,4)*(E(5,22)*B3(22,9)+E(5
     2   ,21)*B3(21,9))
      KE13(4,10) = B1(9,4)*(E(9,23)*B3(23,10)+E(9,12)*B3(12,10))+B1(6,4)
     1   *(E(6,16)*B3(16,10)+E(6,15)*B3(15,10))+B1(5,4)*(E(5,16)*B3(16,1
     2   0)+E(5,15)*B3(15,10))
      KE13(4,11) = B1(9,4)*(E(9,24)*B3(24,11)+E(9,13)*B3(13,11))+B1(6,4)
     1   *(E(6,18)*B3(18,11)+E(6,17)*B3(17,11))+B1(5,4)*(E(5,18)*B3(18,1
     2   1)+E(5,17)*B3(17,11))
      KE13(4,12) = B1(6,4)*(E(6,27)*B3(27,12)+E(6,20)*B3(20,12)+E(6,19)*
     1   B3(19,12))+B1(5,4)*(E(5,27)*B3(27,12)+E(5,20)*B3(20,12)+E(5,19)
     2   *B3(19,12))
      KE13(5,1) = B3(9,1)*E(9,10)*B1(10,5)+(B3(2,1)*E(2,8)+B3(1,1)*E(1,8
     1   ))*B1(8,5)+(B3(2,1)*E(2,7)+B3(1,1)*E(1,7))*B1(7,5)
      KE13(5,2) = B3(10,2)*B1(10,5)*E(10,10)+(B3(4,2)*E(4,8)+B3(3,2)*E(3
     1   ,8)+B3(2,2)*E(2,8))*B1(8,5)+(B3(4,2)*E(4,7)+B3(3,2)*E(3,7)+B3(2
     2   ,2)*E(2,7))*B1(7,5)
      KE13(5,3) = B3(9,3)*E(9,10)*B1(10,5)+(B3(2,3)*E(2,8)+B3(1,3)*E(1,8
     1   ))*B1(8,5)+(B3(2,3)*E(2,7)+B3(1,3)*E(1,7))*B1(7,5)
      KE13(5,4) = B3(9,4)*E(9,10)*B1(10,5)+(B3(6,4)*E(6,8)+B3(5,4)*E(5,8
     1   ))*B1(8,5)+(B3(6,4)*E(6,7)+B3(5,4)*E(5,7))*B1(7,5)
      KE13(5,5) = B1(10,5)*B3(10,5)*E(10,10)+B1(8,5)*(B3(8,5)*E(8,8)+B3(
     1   7,5)*E(7,8))+B1(7,5)*(E(7,8)*B3(8,5)+B3(7,5)*E(7,7))
      KE13(5,6) = B1(10,5)*E(10,12)*B3(12,6)+B1(8,5)*(E(8,11)*B3(11,6)+B
     1   3(6,6)*E(6,8)+B3(5,6)*E(5,8))+B1(7,5)*(E(7,11)*B3(11,6)+B3(6,6)
     2   *E(6,7)+B3(5,6)*E(5,7))
      KE13(5,7) = B1(10,5)*E(10,23)*B3(23,7)+B1(8,5)*(E(8,16)*B3(16,7)+E
     1   (8,15)*B3(15,7)+E(8,14)*B3(14,7))+B1(7,5)*(E(7,16)*B3(16,7)+E(7
     2   ,15)*B3(15,7)+E(7,14)*B3(14,7))
      KE13(5,8) = B1(10,5)*(E(10,25)*B3(25,8)+E(10,23)*B3(23,8))+B1(8,5)
     1   *(E(8,20)*B3(20,8)+E(8,19)*B3(19,8))+B1(7,5)*(E(7,20)*B3(20,8)+
     2   E(7,19)*B3(19,8))
      KE13(5,9) = B1(10,5)*(E(10,26)*B3(26,9)+E(10,24)*B3(24,9))+B1(8,5)
     1   *(E(8,22)*B3(22,9)+E(8,21)*B3(21,9))+B1(7,5)*(E(7,22)*B3(22,9)+
     2   E(7,21)*B3(21,9))
      KE13(5,10) = B1(10,5)*(E(10,23)*B3(23,10)+E(10,12)*B3(12,10))+B1(8
     1   ,5)*(E(8,16)*B3(16,10)+E(8,15)*B3(15,10))+B1(7,5)*(E(7,16)*B3(1
     2   6,10)+E(7,15)*B3(15,10))
      KE13(5,11) = B1(10,5)*(E(10,24)*B3(24,11)+E(10,13)*B3(13,11))+B1(8
     1   ,5)*(E(8,18)*B3(18,11)+E(8,17)*B3(17,11))+B1(7,5)*(E(7,18)*B3(1
     2   8,11)+E(7,17)*B3(17,11))
      KE13(5,12) = B1(8,5)*(E(8,27)*B3(27,12)+E(8,20)*B3(20,12)+E(8,19)*
     1   B3(19,12))+B1(7,5)*(E(7,27)*B3(27,12)+E(7,20)*B3(20,12)+E(7,19)
     2   *B3(19,12))
      KE13(6,1) = B3(9,1)*E(9,12)*B1(12,6)+(B3(2,1)*E(2,11)+B3(1,1)*E(1,
     1   11))*B1(11,6)+(B3(2,1)*E(2,6)+B3(1,1)*E(1,6))*B1(6,6)+(B3(2,1)*
     2   E(2,5)+B3(1,1)*E(1,5))*B1(5,6)
      KE13(6,2) = B3(10,2)*E(10,12)*B1(12,6)+(B3(4,2)*E(4,11)+B3(3,2)*E(
     1   3,11)+B3(2,2)*E(2,11))*B1(11,6)+(B3(4,2)*E(4,6)+B3(3,2)*E(3,6)+
     2   B3(2,2)*E(2,6))*B1(6,6)+(B3(4,2)*E(4,5)+B3(3,2)*E(3,5)+B3(2,2)*
     3   E(2,5))*B1(5,6)
      KE13(6,3) = B3(9,3)*E(9,12)*B1(12,6)+(B3(2,3)*E(2,11)+B3(1,3)*E(1,
     1   11))*B1(11,6)+(B3(2,3)*E(2,6)+B3(1,3)*E(1,6))*B1(6,6)+(B3(2,3)*
     2   E(2,5)+B3(1,3)*E(1,5))*B1(5,6)
      KE13(6,4) = B3(9,4)*E(9,12)*B1(12,6)+(B3(6,4)*E(6,11)+B3(5,4)*E(5,
     1   11))*B1(11,6)+B1(6,6)*(B3(6,4)*E(6,6)+B3(5,4)*E(5,6))+B1(5,6)*(
     2   E(5,6)*B3(6,4)+B3(5,4)*E(5,5))
      KE13(6,5) = B3(10,5)*E(10,12)*B1(12,6)+(B3(8,5)*E(8,11)+B3(7,5)*E(
     1   7,11))*B1(11,6)+B1(6,6)*(E(6,8)*B3(8,5)+E(6,7)*B3(7,5))+B1(5,6)
     2   *(E(5,8)*B3(8,5)+E(5,7)*B3(7,5))
      KE13(6,6) = B1(12,6)*B3(12,6)*E(12,12)+B1(11,6)*(B3(11,6)*E(11,11)
     1   +B3(6,6)*E(6,11)+B3(5,6)*E(5,11))+B1(6,6)*(E(6,11)*B3(11,6)+B3(
     2   6,6)*E(6,6)+B3(5,6)*E(5,6))+B1(5,6)*(E(5,11)*B3(11,6)+E(5,6)*B3
     3   (6,6)+E(5,5)*B3(5,6))
      KE13(6,7) = B1(12,6)*E(12,23)*B3(23,7)+B1(11,6)*(E(11,16)*B3(16,7)
     1   +E(11,15)*B3(15,7)+E(11,14)*B3(14,7))+B1(6,6)*(E(6,16)*B3(16,7)
     2   +E(6,15)*B3(15,7)+E(6,14)*B3(14,7))+B1(5,6)*(E(5,16)*B3(16,7)+E
     3   (5,15)*B3(15,7)+E(5,14)*B3(14,7))
      KE13(6,8) = B1(12,6)*(E(12,25)*B3(25,8)+E(12,23)*B3(23,8))+B1(11,6
     1   )*(E(11,20)*B3(20,8)+E(11,19)*B3(19,8))+B1(6,6)*(E(6,20)*B3(20,
     2   8)+E(6,19)*B3(19,8))+B1(5,6)*(E(5,20)*B3(20,8)+E(5,19)*B3(19,8)
     3   )
      KE13(6,9) = B1(12,6)*(E(12,26)*B3(26,9)+E(12,24)*B3(24,9))+B1(11,6
     1   )*(E(11,22)*B3(22,9)+E(11,21)*B3(21,9))+B1(6,6)*(E(6,22)*B3(22,
     2   9)+E(6,21)*B3(21,9))+B1(5,6)*(E(5,22)*B3(22,9)+E(5,21)*B3(21,9)
     3   )
      KE13(6,10) = B1(12,6)*(E(12,23)*B3(23,10)+B3(12,10)*E(12,12))+B1(1
     1   1,6)*(E(11,16)*B3(16,10)+E(11,15)*B3(15,10))+B1(6,6)*(E(6,16)*B
     2   3(16,10)+E(6,15)*B3(15,10))+B1(5,6)*(E(5,16)*B3(16,10)+E(5,15)*
     3   B3(15,10))
      KE13(6,11) = B1(12,6)*(E(12,24)*B3(24,11)+E(12,13)*B3(13,11))+B1(1
     1   1,6)*(E(11,18)*B3(18,11)+E(11,17)*B3(17,11))+B1(6,6)*(E(6,18)*B
     2   3(18,11)+E(6,17)*B3(17,11))+B1(5,6)*(E(5,18)*B3(18,11)+E(5,17)*
     3   B3(17,11))
      KE13(6,12) = B1(11,6)*(E(11,27)*B3(27,12)+E(11,20)*B3(20,12)+E(11,
     1   19)*B3(19,12))+B1(6,6)*(E(6,27)*B3(27,12)+E(6,20)*B3(20,12)+E(6
     2   ,19)*B3(19,12))+B1(5,6)*(E(5,27)*B3(27,12)+E(5,20)*B3(20,12)+E(
     3   5,19)*B3(19,12))
      KE13(7,1) = B3(9,1)*E(9,23)*B1(23,7)+(B3(2,1)*E(2,16)+B3(1,1)*E(1,
     1   16))*B1(16,7)+(B3(2,1)*E(2,15)+B3(1,1)*E(1,15))*B1(15,7)+(B3(2,
     2   1)*E(2,14)+B3(1,1)*E(1,14))*B1(14,7)
      KE13(7,2) = B3(10,2)*E(10,23)*B1(23,7)+(B3(4,2)*E(4,16)+B3(3,2)*E(
     1   3,16)+B3(2,2)*E(2,16))*B1(16,7)+(B3(4,2)*E(4,15)+B3(3,2)*E(3,15
     2   )+B3(2,2)*E(2,15))*B1(15,7)+(B3(4,2)*E(4,14)+B3(3,2)*E(3,14)+B3
     3   (2,2)*E(2,14))*B1(14,7)
      KE13(7,3) = B3(9,3)*E(9,23)*B1(23,7)+(B3(2,3)*E(2,16)+B3(1,3)*E(1,
     1   16))*B1(16,7)+(B3(2,3)*E(2,15)+B3(1,3)*E(1,15))*B1(15,7)+(B3(2,
     2   3)*E(2,14)+B3(1,3)*E(1,14))*B1(14,7)
      KE13(7,4) = B3(9,4)*E(9,23)*B1(23,7)+(B3(6,4)*E(6,16)+B3(5,4)*E(5,
     1   16))*B1(16,7)+(B3(6,4)*E(6,15)+B3(5,4)*E(5,15))*B1(15,7)+(B3(6,
     2   4)*E(6,14)+B3(5,4)*E(5,14))*B1(14,7)
      KE13(7,5) = B3(10,5)*E(10,23)*B1(23,7)+(B3(8,5)*E(8,16)+B3(7,5)*E(
     1   7,16))*B1(16,7)+(B3(8,5)*E(8,15)+B3(7,5)*E(7,15))*B1(15,7)+(B3(
     2   8,5)*E(8,14)+B3(7,5)*E(7,14))*B1(14,7)
      KE13(7,6) = B3(12,6)*E(12,23)*B1(23,7)+(B3(11,6)*E(11,16)+B3(6,6)*
     1   E(6,16)+B3(5,6)*E(5,16))*B1(16,7)+(B3(11,6)*E(11,15)+B3(6,6)*E(
     2   6,15)+B3(5,6)*E(5,15))*B1(15,7)+(B3(11,6)*E(11,14)+B3(6,6)*E(6,
     3   14)+B3(5,6)*E(5,14))*B1(14,7)
      KE13(7,7) = B1(23,7)*B3(23,7)*E(23,23)+B1(16,7)*(B3(16,7)*E(16,16)
     1   +B3(15,7)*E(15,16)+B3(14,7)*E(14,16))+B1(15,7)*(E(15,16)*B3(16,
     2   7)+B3(15,7)*E(15,15)+B3(14,7)*E(14,15))+B1(14,7)*(E(14,16)*B3(1
     3   6,7)+E(14,15)*B3(15,7)+B3(14,7)*E(14,14))
      KE13(7,8) = B1(23,7)*(E(23,25)*B3(25,8)+B3(23,8)*E(23,23))+B1(16,7
     1   )*(E(16,20)*B3(20,8)+E(16,19)*B3(19,8))+B1(15,7)*(E(15,20)*B3(2
     2   0,8)+E(15,19)*B3(19,8))+B1(14,7)*(E(14,20)*B3(20,8)+E(14,19)*B3
     3   (19,8))
      KE13(7,9) = B1(23,7)*(E(23,26)*B3(26,9)+E(23,24)*B3(24,9))+B1(16,7
     1   )*(E(16,22)*B3(22,9)+E(16,21)*B3(21,9))+B1(15,7)*(E(15,22)*B3(2
     2   2,9)+E(15,21)*B3(21,9))+B1(14,7)*(E(14,22)*B3(22,9)+E(14,21)*B3
     3   (21,9))
      KE13(7,10) = B1(23,7)*(B3(23,10)*E(23,23)+B3(12,10)*E(12,23))+B1(1
     1   6,7)*(B3(16,10)*E(16,16)+B3(15,10)*E(15,16))+B1(15,7)*(E(15,16)
     2   *B3(16,10)+B3(15,10)*E(15,15))+B1(14,7)*(E(14,16)*B3(16,10)+E(1
     3   4,15)*B3(15,10))
      KE13(7,11) = B1(23,7)*(E(23,24)*B3(24,11)+B3(13,11)*E(13,23))+B1(1
     1   6,7)*(E(16,18)*B3(18,11)+E(16,17)*B3(17,11))+B1(15,7)*(E(15,18)
     2   *B3(18,11)+E(15,17)*B3(17,11))+B1(14,7)*(E(14,18)*B3(18,11)+E(1
     3   4,17)*B3(17,11))
      KE13(7,12) = B1(16,7)*(E(16,27)*B3(27,12)+E(16,20)*B3(20,12)+E(16,
     1   19)*B3(19,12))+B1(15,7)*(E(15,27)*B3(27,12)+E(15,20)*B3(20,12)+
     2   E(15,19)*B3(19,12))+B1(14,7)*(E(14,27)*B3(27,12)+E(14,20)*B3(20
     3   ,12)+E(14,19)*B3(19,12))
      KE13(8,1) = B3(9,1)*E(9,25)*B1(25,8)+B3(9,1)*E(9,23)*B1(23,8)+(B3(
     1   2,1)*E(2,20)+B3(1,1)*E(1,20))*B1(20,8)+(B3(2,1)*E(2,19)+B3(1,1)
     2   *E(1,19))*B1(19,8)
      KE13(8,2) = B3(10,2)*E(10,25)*B1(25,8)+B3(10,2)*E(10,23)*B1(23,8)+
     1   (B3(4,2)*E(4,20)+B3(3,2)*E(3,20)+B3(2,2)*E(2,20))*B1(20,8)+(B3(
     2   4,2)*E(4,19)+B3(3,2)*E(3,19)+B3(2,2)*E(2,19))*B1(19,8)
      KE13(8,3) = B3(9,3)*E(9,25)*B1(25,8)+B3(9,3)*E(9,23)*B1(23,8)+(B3(
     1   2,3)*E(2,20)+B3(1,3)*E(1,20))*B1(20,8)+(B3(2,3)*E(2,19)+B3(1,3)
     2   *E(1,19))*B1(19,8)
      KE13(8,4) = B3(9,4)*E(9,25)*B1(25,8)+B3(9,4)*E(9,23)*B1(23,8)+(B3(
     1   6,4)*E(6,20)+B3(5,4)*E(5,20))*B1(20,8)+(B3(6,4)*E(6,19)+B3(5,4)
     2   *E(5,19))*B1(19,8)
      KE13(8,5) = B3(10,5)*E(10,25)*B1(25,8)+B3(10,5)*E(10,23)*B1(23,8)+
     1   (B3(8,5)*E(8,20)+B3(7,5)*E(7,20))*B1(20,8)+(B3(8,5)*E(8,19)+B3(
     2   7,5)*E(7,19))*B1(19,8)
      KE13(8,6) = B3(12,6)*E(12,25)*B1(25,8)+B3(12,6)*E(12,23)*B1(23,8)+
     1   (B3(11,6)*E(11,20)+B3(6,6)*E(6,20)+B3(5,6)*E(5,20))*B1(20,8)+(B
     2   3(11,6)*E(11,19)+B3(6,6)*E(6,19)+B3(5,6)*E(5,19))*B1(19,8)
      KE13(8,7) = B3(23,7)*E(23,25)*B1(25,8)+B3(23,7)*B1(23,8)*E(23,23)+
     1   (B3(16,7)*E(16,20)+B3(15,7)*E(15,20)+B3(14,7)*E(14,20))*B1(20,8
     2   )+(B3(16,7)*E(16,19)+B3(15,7)*E(15,19)+B3(14,7)*E(14,19))*B1(19
     3   ,8)
      KE13(8,8) = B1(25,8)*(B3(25,8)*E(25,25)+B3(23,8)*E(23,25))+B1(23,8
     1   )*(E(23,25)*B3(25,8)+B3(23,8)*E(23,23))+B1(20,8)*(B3(20,8)*E(20
     2   ,20)+B3(19,8)*E(19,20))+B1(19,8)*(E(19,20)*B3(20,8)+B3(19,8)*E(
     3   19,19))
      KE13(8,9) = B1(25,8)*(E(25,26)*B3(26,9)+B3(24,9)*E(24,25))+B1(23,8
     1   )*(E(23,26)*B3(26,9)+E(23,24)*B3(24,9))+B1(20,8)*(E(20,22)*B3(2
     2   2,9)+E(20,21)*B3(21,9))+B1(19,8)*(E(19,22)*B3(22,9)+E(19,21)*B3
     3   (21,9))
      KE13(8,10) = (B3(23,10)*E(23,25)+B3(12,10)*E(12,25))*B1(25,8)+B1(2
     1   3,8)*(B3(23,10)*E(23,23)+B3(12,10)*E(12,23))+(B3(16,10)*E(16,20
     2   )+B3(15,10)*E(15,20))*B1(20,8)+(B3(16,10)*E(16,19)+B3(15,10)*E(
     3   15,19))*B1(19,8)
      KE13(8,11) = (B3(24,11)*E(24,25)+B3(13,11)*E(13,25))*B1(25,8)+B1(2
     1   3,8)*(E(23,24)*B3(24,11)+B3(13,11)*E(13,23))+(B3(18,11)*E(18,20
     2   )+B3(17,11)*E(17,20))*B1(20,8)+(B3(18,11)*E(18,19)+B3(17,11)*E(
     3   17,19))*B1(19,8)
      KE13(8,12) = B1(20,8)*(E(20,27)*B3(27,12)+B3(20,12)*E(20,20)+B3(19
     1   ,12)*E(19,20))+B1(19,8)*(E(19,27)*B3(27,12)+E(19,20)*B3(20,12)+
     2   B3(19,12)*E(19,19))
      KE13(9,1) = B3(9,1)*E(9,26)*B1(26,9)+B3(9,1)*E(9,24)*B1(24,9)+(B3(
     1   2,1)*E(2,22)+B3(1,1)*E(1,22))*B1(22,9)+(B3(2,1)*E(2,21)+B3(1,1)
     2   *E(1,21))*B1(21,9)
      KE13(9,2) = B3(10,2)*E(10,26)*B1(26,9)+B3(10,2)*E(10,24)*B1(24,9)+
     1   (B3(4,2)*E(4,22)+B3(3,2)*E(3,22)+B3(2,2)*E(2,22))*B1(22,9)+(B3(
     2   4,2)*E(4,21)+B3(3,2)*E(3,21)+B3(2,2)*E(2,21))*B1(21,9)
      KE13(9,3) = B3(9,3)*E(9,26)*B1(26,9)+B3(9,3)*E(9,24)*B1(24,9)+(B3(
     1   2,3)*E(2,22)+B3(1,3)*E(1,22))*B1(22,9)+(B3(2,3)*E(2,21)+B3(1,3)
     2   *E(1,21))*B1(21,9)
      KE13(9,4) = B3(9,4)*E(9,26)*B1(26,9)+B3(9,4)*E(9,24)*B1(24,9)+(B3(
     1   6,4)*E(6,22)+B3(5,4)*E(5,22))*B1(22,9)+(B3(6,4)*E(6,21)+B3(5,4)
     2   *E(5,21))*B1(21,9)
      KE13(9,5) = B3(10,5)*E(10,26)*B1(26,9)+B3(10,5)*E(10,24)*B1(24,9)+
     1   (B3(8,5)*E(8,22)+B3(7,5)*E(7,22))*B1(22,9)+(B3(8,5)*E(8,21)+B3(
     2   7,5)*E(7,21))*B1(21,9)
      KE13(9,6) = B3(12,6)*E(12,26)*B1(26,9)+B3(12,6)*E(12,24)*B1(24,9)+
     1   (B3(11,6)*E(11,22)+B3(6,6)*E(6,22)+B3(5,6)*E(5,22))*B1(22,9)+(B
     2   3(11,6)*E(11,21)+B3(6,6)*E(6,21)+B3(5,6)*E(5,21))*B1(21,9)
      KE13(9,7) = B3(23,7)*E(23,26)*B1(26,9)+B3(23,7)*E(23,24)*B1(24,9)+
     1   (B3(16,7)*E(16,22)+B3(15,7)*E(15,22)+B3(14,7)*E(14,22))*B1(22,9
     2   )+(B3(16,7)*E(16,21)+B3(15,7)*E(15,21)+B3(14,7)*E(14,21))*B1(21
     3   ,9)
      KE13(9,8) = (B3(25,8)*E(25,26)+B3(23,8)*E(23,26))*B1(26,9)+B1(24,9
     1   )*(E(24,25)*B3(25,8)+B3(23,8)*E(23,24))+(B3(20,8)*E(20,22)+B3(1
     2   9,8)*E(19,22))*B1(22,9)+(B3(20,8)*E(20,21)+B3(19,8)*E(19,21))*B
     3   1(21,9)
      KE13(9,9) = B1(26,9)*(B3(26,9)*E(26,26)+B3(24,9)*E(24,26))+B1(24,9
     1   )*(E(24,26)*B3(26,9)+B3(24,9)*E(24,24))+B1(22,9)*(B3(22,9)*E(22
     2   ,22)+B3(21,9)*E(21,22))+B1(21,9)*(E(21,22)*B3(22,9)+B3(21,9)*E(
     3   21,21))
      KE13(9,10) = (B3(23,10)*E(23,26)+B3(12,10)*E(12,26))*B1(26,9)+(B3(
     1   23,10)*E(23,24)+B3(12,10)*E(12,24))*B1(24,9)+(B3(16,10)*E(16,22
     2   )+B3(15,10)*E(15,22))*B1(22,9)+(B3(16,10)*E(16,21)+B3(15,10)*E(
     3   15,21))*B1(21,9)
      KE13(9,11) = (B3(24,11)*E(24,26)+B3(13,11)*E(13,26))*B1(26,9)+B1(2
     1   4,9)*(B3(24,11)*E(24,24)+B3(13,11)*E(13,24))+(B3(18,11)*E(18,22
     2   )+B3(17,11)*E(17,22))*B1(22,9)+(B3(18,11)*E(18,21)+B3(17,11)*E(
     3   17,21))*B1(21,9)
      KE13(9,12) = B1(22,9)*(E(22,27)*B3(27,12)+B3(20,12)*E(20,22)+B3(19
     1   ,12)*E(19,22))+B1(21,9)*(E(21,27)*B3(27,12)+B3(20,12)*E(20,21)+
     2   B3(19,12)*E(19,21))
      KE13(10,1) = B3(9,1)*E(9,23)*B1(23,10)+(B3(2,1)*E(2,16)+B3(1,1)*E(
     1   1,16))*B1(16,10)+(B3(2,1)*E(2,15)+B3(1,1)*E(1,15))*B1(15,10)+B3
     2   (9,1)*E(9,12)*B1(12,10)
      KE13(10,2) = B3(10,2)*E(10,23)*B1(23,10)+(B3(4,2)*E(4,16)+B3(3,2)*
     1   E(3,16)+B3(2,2)*E(2,16))*B1(16,10)+(B3(4,2)*E(4,15)+B3(3,2)*E(3
     2   ,15)+B3(2,2)*E(2,15))*B1(15,10)+B3(10,2)*E(10,12)*B1(12,10)
      KE13(10,3) = B3(9,3)*E(9,23)*B1(23,10)+(B3(2,3)*E(2,16)+B3(1,3)*E(
     1   1,16))*B1(16,10)+(B3(2,3)*E(2,15)+B3(1,3)*E(1,15))*B1(15,10)+B3
     2   (9,3)*E(9,12)*B1(12,10)
      KE13(10,4) = B3(9,4)*E(9,23)*B1(23,10)+(B3(6,4)*E(6,16)+B3(5,4)*E(
     1   5,16))*B1(16,10)+(B3(6,4)*E(6,15)+B3(5,4)*E(5,15))*B1(15,10)+B3
     2   (9,4)*E(9,12)*B1(12,10)
      KE13(10,5) = B3(10,5)*E(10,23)*B1(23,10)+(B3(8,5)*E(8,16)+B3(7,5)*
     1   E(7,16))*B1(16,10)+(B3(8,5)*E(8,15)+B3(7,5)*E(7,15))*B1(15,10)+
     2   B3(10,5)*E(10,12)*B1(12,10)
      KE13(10,6) = B3(12,6)*E(12,23)*B1(23,10)+(B3(11,6)*E(11,16)+B3(6,6
     1   )*E(6,16)+B3(5,6)*E(5,16))*B1(16,10)+(B3(11,6)*E(11,15)+B3(6,6)
     2   *E(6,15)+B3(5,6)*E(5,15))*B1(15,10)+B3(12,6)*B1(12,10)*E(12,12)
      KE13(10,7) = B3(23,7)*B1(23,10)*E(23,23)+B1(12,10)*E(12,23)*B3(23,
     1   7)+B1(16,10)*(B3(16,7)*E(16,16)+B3(15,7)*E(15,16)+B3(14,7)*E(14
     2   ,16))+B1(15,10)*(E(15,16)*B3(16,7)+B3(15,7)*E(15,15)+B3(14,7)*E
     3   (14,15))
      KE13(10,8) = B1(23,10)*(E(23,25)*B3(25,8)+B3(23,8)*E(23,23))+B1(12
     1   ,10)*(E(12,25)*B3(25,8)+E(12,23)*B3(23,8))+B1(16,10)*(E(16,20)*
     2   B3(20,8)+E(16,19)*B3(19,8))+B1(15,10)*(E(15,20)*B3(20,8)+E(15,1
     3   9)*B3(19,8))
      KE13(10,9) = B1(23,10)*(E(23,26)*B3(26,9)+E(23,24)*B3(24,9))+B1(12
     1   ,10)*(E(12,26)*B3(26,9)+E(12,24)*B3(24,9))+B1(16,10)*(E(16,22)*
     2   B3(22,9)+E(16,21)*B3(21,9))+B1(15,10)*(E(15,22)*B3(22,9)+E(15,2
     3   1)*B3(21,9))
      KE13(10,10) = B1(23,10)*(B3(23,10)*E(23,23)+B3(12,10)*E(12,23))+B1
     1   (12,10)*(E(12,23)*B3(23,10)+B3(12,10)*E(12,12))+B1(16,10)*(B3(1
     2   6,10)*E(16,16)+B3(15,10)*E(15,16))+B1(15,10)*(E(15,16)*B3(16,10
     3   )+B3(15,10)*E(15,15))
      KE13(10,11) = B1(23,10)*(E(23,24)*B3(24,11)+B3(13,11)*E(13,23))+B1
     1   (12,10)*(E(12,24)*B3(24,11)+E(12,13)*B3(13,11))+B1(16,10)*(E(16
     2   ,18)*B3(18,11)+E(16,17)*B3(17,11))+B1(15,10)*(E(15,18)*B3(18,11
     3   )+E(15,17)*B3(17,11))
      KE13(10,12) = B1(16,10)*(E(16,27)*B3(27,12)+E(16,20)*B3(20,12)+E(1
     1   6,19)*B3(19,12))+B1(15,10)*(E(15,27)*B3(27,12)+E(15,20)*B3(20,1
     2   2)+E(15,19)*B3(19,12))
      KE13(11,1) = B3(9,1)*E(9,24)*B1(24,11)+(B3(2,1)*E(2,18)+B3(1,1)*E(
     1   1,18))*B1(18,11)+(B3(2,1)*E(2,17)+B3(1,1)*E(1,17))*B1(17,11)+B3
     2   (9,1)*E(9,13)*B1(13,11)
      KE13(11,2) = B3(10,2)*E(10,24)*B1(24,11)+(B3(4,2)*E(4,18)+B3(3,2)*
     1   E(3,18)+B3(2,2)*E(2,18))*B1(18,11)+(B3(4,2)*E(4,17)+B3(3,2)*E(3
     2   ,17)+B3(2,2)*E(2,17))*B1(17,11)+B3(10,2)*E(10,13)*B1(13,11)
      KE13(11,3) = B3(9,3)*E(9,24)*B1(24,11)+(B3(2,3)*E(2,18)+B3(1,3)*E(
     1   1,18))*B1(18,11)+(B3(2,3)*E(2,17)+B3(1,3)*E(1,17))*B1(17,11)+B3
     2   (9,3)*E(9,13)*B1(13,11)
      KE13(11,4) = B3(9,4)*E(9,24)*B1(24,11)+(B3(6,4)*E(6,18)+B3(5,4)*E(
     1   5,18))*B1(18,11)+(B3(6,4)*E(6,17)+B3(5,4)*E(5,17))*B1(17,11)+B3
     2   (9,4)*E(9,13)*B1(13,11)
      KE13(11,5) = B3(10,5)*E(10,24)*B1(24,11)+(B3(8,5)*E(8,18)+B3(7,5)*
     1   E(7,18))*B1(18,11)+(B3(8,5)*E(8,17)+B3(7,5)*E(7,17))*B1(17,11)+
     2   B3(10,5)*E(10,13)*B1(13,11)
      KE13(11,6) = B3(12,6)*E(12,24)*B1(24,11)+(B3(11,6)*E(11,18)+B3(6,6
     1   )*E(6,18)+B3(5,6)*E(5,18))*B1(18,11)+(B3(11,6)*E(11,17)+B3(6,6)
     2   *E(6,17)+B3(5,6)*E(5,17))*B1(17,11)+B3(12,6)*E(12,13)*B1(13,11)
      KE13(11,7) = B3(23,7)*E(23,24)*B1(24,11)+B1(13,11)*E(13,23)*B3(23,
     1   7)+(B3(16,7)*E(16,18)+B3(15,7)*E(15,18)+B3(14,7)*E(14,18))*B1(1
     2   8,11)+(B3(16,7)*E(16,17)+B3(15,7)*E(15,17)+B3(14,7)*E(14,17))*B
     3   1(17,11)
      KE13(11,8) = B1(24,11)*(E(24,25)*B3(25,8)+B3(23,8)*E(23,24))+B1(13
     1   ,11)*(E(13,25)*B3(25,8)+E(13,23)*B3(23,8))+B1(18,11)*(E(18,20)*
     2   B3(20,8)+E(18,19)*B3(19,8))+B1(17,11)*(E(17,20)*B3(20,8)+E(17,1
     3   9)*B3(19,8))
      KE13(11,9) = B1(24,11)*(E(24,26)*B3(26,9)+B3(24,9)*E(24,24))+B1(13
     1   ,11)*(E(13,26)*B3(26,9)+E(13,24)*B3(24,9))+B1(18,11)*(E(18,22)*
     2   B3(22,9)+E(18,21)*B3(21,9))+B1(17,11)*(E(17,22)*B3(22,9)+E(17,2
     3   1)*B3(21,9))
      KE13(11,10) = (B3(23,10)*E(23,24)+B3(12,10)*E(12,24))*B1(24,11)+B1
     1   (13,11)*(E(13,23)*B3(23,10)+B3(12,10)*E(12,13))+(B3(16,10)*E(16
     2   ,18)+B3(15,10)*E(15,18))*B1(18,11)+(B3(16,10)*E(16,17)+B3(15,10
     3   )*E(15,17))*B1(17,11)
      KE13(11,11) = B1(24,11)*(B3(24,11)*E(24,24)+B3(13,11)*E(13,24))+B1
     1   (13,11)*(E(13,24)*B3(24,11)+B3(13,11)*E(13,13))+B1(18,11)*(B3(1
     2   8,11)*E(18,18)+B3(17,11)*E(17,18))+B1(17,11)*(E(17,18)*B3(18,11
     3   )+B3(17,11)*E(17,17))
      KE13(11,12) = B1(18,11)*(E(18,27)*B3(27,12)+E(18,20)*B3(20,12)+E(1
     1   8,19)*B3(19,12))+B1(17,11)*(E(17,27)*B3(27,12)+E(17,20)*B3(20,1
     2   2)+E(17,19)*B3(19,12))
      KE13(12,1) = (B3(2,1)*E(2,27)+B3(1,1)*E(1,27))*B1(27,12)+(B3(2,1)*
     1   E(2,20)+B3(1,1)*E(1,20))*B1(20,12)+(B3(2,1)*E(2,19)+B3(1,1)*E(1
     2   ,19))*B1(19,12)
      KE13(12,2) = (B3(4,2)*E(4,27)+B3(3,2)*E(3,27)+B3(2,2)*E(2,27))*B1(
     1   27,12)+(B3(4,2)*E(4,20)+B3(3,2)*E(3,20)+B3(2,2)*E(2,20))*B1(20,
     2   12)+(B3(4,2)*E(4,19)+B3(3,2)*E(3,19)+B3(2,2)*E(2,19))*B1(19,12)
      KE13(12,3) = (B3(2,3)*E(2,27)+B3(1,3)*E(1,27))*B1(27,12)+(B3(2,3)*
     1   E(2,20)+B3(1,3)*E(1,20))*B1(20,12)+(B3(2,3)*E(2,19)+B3(1,3)*E(1
     2   ,19))*B1(19,12)
      KE13(12,4) = (B3(6,4)*E(6,27)+B3(5,4)*E(5,27))*B1(27,12)+(B3(6,4)*
     1   E(6,20)+B3(5,4)*E(5,20))*B1(20,12)+(B3(6,4)*E(6,19)+B3(5,4)*E(5
     2   ,19))*B1(19,12)
      KE13(12,5) = (B3(8,5)*E(8,27)+B3(7,5)*E(7,27))*B1(27,12)+(B3(8,5)*
     1   E(8,20)+B3(7,5)*E(7,20))*B1(20,12)+(B3(8,5)*E(8,19)+B3(7,5)*E(7
     2   ,19))*B1(19,12)
      KE13(12,6) = (B3(11,6)*E(11,27)+B3(6,6)*E(6,27)+B3(5,6)*E(5,27))*B
     1   1(27,12)+(B3(11,6)*E(11,20)+B3(6,6)*E(6,20)+B3(5,6)*E(5,20))*B1
     2   (20,12)+(B3(11,6)*E(11,19)+B3(6,6)*E(6,19)+B3(5,6)*E(5,19))*B1(
     3   19,12)
      KE13(12,7) = (B3(16,7)*E(16,27)+B3(15,7)*E(15,27)+B3(14,7)*E(14,27
     1   ))*B1(27,12)+(B3(16,7)*E(16,20)+B3(15,7)*E(15,20)+B3(14,7)*E(14
     2   ,20))*B1(20,12)+(B3(16,7)*E(16,19)+B3(15,7)*E(15,19)+B3(14,7)*E
     3   (14,19))*B1(19,12)
      KE13(12,8) = (B3(20,8)*E(20,27)+B3(19,8)*E(19,27))*B1(27,12)+B1(20
     1   ,12)*(B3(20,8)*E(20,20)+B3(19,8)*E(19,20))+B1(19,12)*(E(19,20)*
     2   B3(20,8)+B3(19,8)*E(19,19))
      KE13(12,9) = (B3(22,9)*E(22,27)+B3(21,9)*E(21,27))*B1(27,12)+B1(20
     1   ,12)*(E(20,22)*B3(22,9)+E(20,21)*B3(21,9))+B1(19,12)*(E(19,22)*
     2   B3(22,9)+E(19,21)*B3(21,9))
      KE13(12,10) = (B3(16,10)*E(16,27)+B3(15,10)*E(15,27))*B1(27,12)+(B
     1   3(16,10)*E(16,20)+B3(15,10)*E(15,20))*B1(20,12)+(B3(16,10)*E(16
     2   ,19)+B3(15,10)*E(15,19))*B1(19,12)
      KE13(12,11) = (B3(18,11)*E(18,27)+B3(17,11)*E(17,27))*B1(27,12)+(B
     1   3(18,11)*E(18,20)+B3(17,11)*E(17,20))*B1(20,12)+(B3(18,11)*E(18
     2   ,19)+B3(17,11)*E(17,19))*B1(19,12)
      KE13(12,12) = B1(27,12)*(B3(27,12)*E(27,27)+B3(20,12)*E(20,27)+B3(
     1   19,12)*E(19,27))+B1(20,12)*(E(20,27)*B3(27,12)+B3(20,12)*E(20,2
     2   0)+B3(19,12)*E(19,20))+B1(19,12)*(E(19,27)*B3(27,12)+E(19,20)*B
     3   3(20,12)+B3(19,12)*E(19,19))

      return
      end










      subroutine B2EB2(B2,E,KE22)
c     Name:      B1EB1
c     Purpose:   To perform the multiplication KE12=B1t*EMAT*B2
c     Common:
c     Input:     B1,B2 and EMAT

c     Output:    KES
c     Called by: KESHRT
c     Calls    :
c                                                                      |
c*******************************************************************************


      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     

      real*8   B2(MXNEPS,MXNVAR),
     &         KE22(MXNVAR,MXNVAR),E(MXNEPS,MXNEPS)


      KE22(1,1) = B2(9,1)**2*E(9,9)+B2(2,1)*(B2(2,1)*E(2,2)+B2(1,1)*E(1,
     1   2))+B2(1,1)*(E(1,2)*B2(2,1)+B2(1,1)*E(1,1))
      KE22(1,2) = B2(9,1)*B2(9,2)*E(9,9)+B2(2,1)*(B2(2,2)*E(2,2)+B2(1,2)
     1   *E(1,2))+B2(1,1)*(E(1,2)*B2(2,2)+E(1,1)*B2(1,2))
      KE22(2,2) = B2(9,2)**2*E(9,9)+B2(2,2)*(B2(2,2)*E(2,2)+B2(1,2)*E(1,
     1   2))+B2(1,2)*(E(1,2)*B2(2,2)+E(1,1)*B2(1,2))

      KE22(2,1) = KE22(1,2)

      return
      end







      subroutine BIGOUT(A,DIM,NUMLIN,UNITNO)
      
c     Purpose: To print out a big matrix in columns.

      
      integer      DIM,NUMLIN,UNITNO,NUMCOL,NUMROW,REMAN,JBEGIN,
     *             JEND,ROW,I,J,COL(10),NOCOL
      real*8       A(DIM,DIM)
      
      NUMCOL = 6

      NUMROW = int(NUMLIN/NUMCOL)
      REMAN  = mod(NUMLIN,NUMCOL)
      
      if (REMAN .ne. 0) NUMROW = NUMROW + 1  
      
      JBEGIN = 1
      JEND   = min0(NUMLIN,NUMCOL)
      do 1 ROW=1,NUMROW
         if (ROW .eq. NUMROW) then
            NOCOL = REMAN
           else
            NOCOL = NUMCOL
         end if
         do 3 J=1,NOCOL
            COL(J) = J + JBEGIN - 1
3        continue
         write(UNITNO,120) (COL(J), J=1,NOCOL)
120      format(10x,10(i2,10x))
         do 2 I=1,NUMLIN
            write(UNITNO,100) I,(A(I,J), J=JBEGIN,JEND)
2        continue
         JBEGIN = JEND + 1
         JEND   = min0(JEND + NUMCOL, NUMLIN)
         write(UNITNO,110)
1     continue

100   format(x,i2,x,10(x,e11.4))
110   format(//)

      return
      end
      
      subroutine BN(B,N,XI,X,X1,X2,KAPA1,KAPA2,OA1,OA2,A2D1,JACOB)
      
c     Name:      B and N matrices
c     Purpose:   To calculate the B and N matrices.  This subroutine just calls
c                the appropriate one for the given order shape functions.
c     Common:    CONTRL
c     Input:    
c                
c     Output:    
c     Called by: FORMKF
c     Calls    : BN121,...

      
      integer   INFIL,OUTFIL,ERRRFL,UFIL,WFIL,BFIL,SHPFIL,POSFIL,
     *          NRFIL,M1RFIL,M2RFIL,M3RFIL,QRFIL,TRFIL,DOCFIL
      parameter(INFIL=10,OUTFIL=11,ERRRFL=12,UFIL=20, WFIL=21, BFIL=22,
     *          SHPFIL=23, POSFIL=24,NRFIL=25,M1RFIL=26,M2RFIL=27,
     *          M3RFIL=28,QRFIL=29,TRFIL=30,DOCFIL=4)
    
    
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      character*10    OTFILE
      logical         BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI
      integer         THEORY,TORORD,OSHPU,OSHPW,OSHPD, NINT,NINTW,NINTD
      common /CONTRL/ BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI,
     *                THEORY,TORORD,OSHPU,OSHPW,OSHPD,NINT,NINTW,NINTD,
     *                OTFILE
      save   /CONTRL/
      
      
      
      
      real*8       B(MAXNEN,MXNEPS,MXNVAR),N(MAXNEN,MXNVAR),
     *             XI,X,X1,X2,KAPA1,KAPA2,OA1,OA2,A2D1,JACOB
      
100   format(' in bn')
      
      
      if (OSHPU .eq. 1) then
         if (OSHPW .eq. 2) then
            if (OSHPD .eq. 1) then
               call BN121(B,N,XI,X,X1,X2,KAPA1,KAPA2,OA1,OA2,A2D1,JACOB)
            end if
         end if
      end if
      
      return
      end

      
      subroutine BN121(B,N,XI,X,X1,X2,KAPA1,KAPA2,OA1,OA2,A2D1,JACOB)
      
c     Name:      B and N (OSHPU=1,OSHPW=2,OSHPD=1)
c     Purpose:   To calculate the B and N matrices (OSHPU=1,OSHPW=2,
c                OSHPD=1) 
c     Common:    
c     Input:     KAPA1,KAPA2,OA1,OA2,A2D1,R,JACOB    
c     Output:    B(NEN,MXNEPS,MXNVAR),N(NEN,MXNVAR)
c     Called by: BN
c     Calls    : CLEARB,QUASHP,LINSHP

      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      character*10    OTFILE
      logical         BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI
      integer         THEORY,TORORD,OSHPU,OSHPW,OSHPD, NINT,NINTW,NINTD
      common /CONTRL/ BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI,
     *                THEORY,TORORD,OSHPU,OSHPW,OSHPD,NINT,NINTW,NINTD,
     *                OTFILE
      save   /CONTRL/
      
      
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      
      integer      J
      real*8       B(MAXNEN,MXNEPS,MXNVAR),N(MAXNEN,MXNVAR),
     *             XI,X,X1,X2,KAPA1,KAPA2,OA1,OA2,A2D1,JACOB,
     *             LSH(2),LPSH(2),QSH(3),QPSH(3),
     *             RBMSH(MXNRBM),RBMPSH(MXNRBM),C1,
     *             L1C1,L2C1,L1K1,L1K2,L2K1,L2K2,L1POA1,L2POA1,
     *             Q1K1,Q1K2,Q1POA1,Q2K1,Q2K2,Q2POA1,Q3K1,Q3K2,Q3POA1
     
100   format(' in bn121')
      
      call CLEARB(B)
      
      call QUASHP(QSH,QPSH,XI)
      call LINSHP(LSH,LPSH,XI)
      
      
      C1 = A2D1*OA1*OA2
      
      L1C1   = LSH(1)*C1
      L2C1   = LSH(2)*C1
      L1K1   = LSH(1)*KAPA1
      L1K2   = LSH(1)*KAPA2
      L2K1   = LSH(2)*KAPA1
      L2K2   = LSH(2)*KAPA2
      L1POA1 = LPSH(1)*OA1/JACOB
      L2POA1 = LPSH(2)*OA1/JACOB
      
      Q1K1   = QSH(1)*KAPA1
      Q1K2   = QSH(1)*KAPA2
      Q1POA1 = QPSH(1)*OA1/JACOB
      Q2K1   = QSH(2)*KAPA1
      Q2K2   = QSH(2)*KAPA2
      Q2POA1 = QPSH(2)*OA1/JACOB
      Q3K1   = QSH(3)*KAPA1
      Q3K2   = QSH(3)*KAPA2
      Q3POA1 = QPSH(3)*OA1/JACOB
            
      
      B(1,1,1)   = L1POA1
      B(1,1,3)   = Q1K1
      B(1,2,1)   = L1C1
      B(1,2,3)   = Q1K2
      B(1,3,2)   = -L1C1
      B(1,4,2)   = L1POA1
      B(1,5,4)   = L1POA1
      B(1,5,6)   = L1K1
      B(1,6,4)   = L1C1
      B(1,6,6)   = L1K2
      B(1,7,5)   = -L1C1
      B(1,8,5)   = L1POA1
      B(1,9,1)   = -L1K1
      B(1,9,3)   = Q1POA1
      B(1,9,4)   = LSH(1)
      B(1,10,2)  = -L1K2
      B(1,10,5)  = LSH(1)
      B(1,11,6)  = LSH(1)

      if (W1CHI) then
         B(1,12,6)  =  L1POA1
         B(1,12,10) = 2.*LSH(1)
         B(1,13,11) = 2.*LSH(1)
      else
         B(1,12,6)  = 0.
         B(1,12,10) = 0.
         B(1,13,11) = 0.
      endif

      B(1,14,7)  = 2.*LSH(1)
      B(1,15,7)  = L1K1
      B(1,15,10) = L1POA1
      B(1,16,7)  = L1K2
      B(1,16,10) = L1C1
      B(1,17,11) = -L1C1
      B(1,18,11) = L1POA1
      B(1,19,8)  = L1POA1
      B(1,19,12) = L1K1
      B(1,20,8)  = L1C1
      B(1,20,12) = L1K2
      B(1,21,9)  = -L1C1
      B(1,22,9)  = L1POA1
      B(1,23,7)  = L1POA1
      B(1,23,8)  = 3.*LSH(1)
      B(1,23,10) = L1K1
      B(1,24,9)  = 3.*LSH(1)
      B(1,24,11) = L1K2
      B(1,25,8)  = 2.*L1K1
      B(1,26,9)  = 2.*L1K2
      B(1,27,12) = 3.*LSH(1)
      
      B(2,1,1)  = Q2K1
      B(2,2,1)  = Q2K2
      B(2,9,1)  = Q2POA1
      
      B(3,1,1)   = L2POA1
      B(3,1,3)   = Q3K1
      B(3,2,1)   = L2C1
      B(3,2,3)   = Q3K2
      B(3,3,2)   = -L2C1
      B(3,4,2)   = L2POA1
      B(3,5,4)   = L2POA1
      B(3,5,6)   = L2K1
      B(3,6,4)   = L2C1
      B(3,6,6)   = L2K2
      B(3,7,5)   = -L2C1
      B(3,8,5)   = L2POA1
      B(3,9,1)   = -L2K1
      B(3,9,3)   = Q3POA1
      B(3,9,4)   = LSH(2)
      B(3,10,2)  = -L2K2
      B(3,10,5)  = LSH(2)
      B(3,11,6)  = LSH(2)

      if (W1CHI) then
         B(3,12,6)  = L2POA1
         B(3,12,10) = 2.*LSH(2)
         B(3,13,11) = 2.*LSH(2)
      else    
         B(3,12,6)  = 0.
         B(3,12,10) = 0.
         B(3,13,11) = 0.
      endif

      B(3,14,7)  = 2.*LSH(2)
      B(3,15,7)  = L2K1
      B(3,15,10) = L2POA1
      B(3,16,7)  = L2K2
      B(3,16,10) = L2C1
      B(3,17,11) = -L2C1
      B(3,18,11) = L2POA1
      B(3,19,8)  = L2POA1
      B(3,19,12) = L2K1
      B(3,20,8)  = L2C1
      B(3,20,12) = L2K2
      B(3,21,9)  = -L2C1
      B(3,22,9)  = L2POA1
      B(3,23,7)  = L2POA1
      B(3,23,8)  = 3.*LSH(2)
      B(3,23,10) = L2K1
      B(3,24,9)  = 3.*LSH(2)
      B(3,24,11) = L2K2
      B(3,25,8)  = 2.*L2K1
      B(3,26,9)  = 2.*L2K2
      B(3,27,12) = 3.*LSH(2)
      
      if (FLAT) then
         B(1,2,2)   = .5
         B(3,2,2)   = .5
      end if
      
      if (RIGID) then
         call RBMSHP(RBMSH,RBMPSH,X,X1,X2)
         
         B(2,1,2) = OA1*RBMPSH(1) + KAPA1*RBMSH(2)
         B(2,2,2) = C1*RBMSH(1) + KAPA2*RBMSH(2)
         B(2,9,2) = - KAPA1*RBMSH(1) + OA1*RBMPSH(2)
      end if
      
      do 1 J=1,NVAR
        N(1,J) = LSH(1)
1     continue
      N(1,3) = QSH(1)
         
      N(2,1) = QSH(2) 
      do 3 J=2,NVAR
         N(2,J) = 0.
3     continue

      if (RIGID) then
         do 4 J=1,NRBM
            N(2,J+NVAR) = RBMSH(J)
4        continue
      end if

      do 5 J=1,NVAR
        N(3,J) = LSH(2)
5     continue
      N(3,3) = QSH(3)

                
      return
      end
      
      
      subroutine BNEOUT(EL,INT,B,N,EMAT) 
      
c     Purpose: To print out the above variables.

      
      integer   INFIL,OUTFIL,ERRRFL,UFIL,WFIL,BFIL,SHPFIL,POSFIL,
     *          NRFIL,M1RFIL,M2RFIL,M3RFIL,QRFIL,TRFIL,DOCFIL
      parameter(INFIL=10,OUTFIL=11,ERRRFL=12,UFIL=20, WFIL=21, BFIL=22,
     *          SHPFIL=23, POSFIL=24,NRFIL=25,M1RFIL=26,M2RFIL=27,
     *          M3RFIL=28,QRFIL=29,TRFIL=30,DOCFIL=4)
    
    
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      
      integer     EL,INT,I,J,INODE
      real*8      B(MAXNEN,MXNEPS,MXNVAR),N(MAXNEN,MXNVAR),
     *            EMAT(MXNEPS,MXNEPS)
      
      
      write(4,100)
100   format(//' E matrix'/)

      call BIGOUT(EMAT,MXNEPS,NEPS,4)

      write(4,115) 
115   format(//' N'//)

      do 2 INODE=1,NEN
         write(DOCFIL,120) (N(INODE,I), I=1,NDOFPN(INODE))
120      format(x,8F10.5)
2     continue
      

      write(4,130) 
130   format(//' B matrix'/)
      
      do 3 INODE=1,NEN
         write(DOCFIL,140) INODE
140      format(/' INDOE=',I5)
         do 4 I=1,NEPS
            write(DOCFIL,150) (B(INODE,I,J), J=1,NDOFPN(INODE))
150         format(10(x,f8.5))
4        continue
3     continue

      return
      end
      
      subroutine CLEARB(B)
      
c     Name:      CLEAR B matrix.
c     Purpose:   To enter 0. into the B matrix
c     Common:    
c     Input:                    
c     Output:    B(NEN,MXNEPS,MXNVAR) with zeors.
c     Called by: BCY121
c     Calls    : 



      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      
      
      integer      NI,I,J
      real*8       B(MAXNEN,MXNEPS,MXNVAR)
            
      do 1 NI=1,NEN
         do 2 I=1,NEPS
            do 3 J=1,NDOFPN(NI)
                 B(NI,I,J)=0.
3           continue
2        continue
1     continue
 
      return
      end
      
      
      subroutine CLRFE(FE)
      
c     Name:     CLear F Element
c     Purpose:  To enter zeros into the element force matrix.
c     Common:   
c     Input:   
c     Output:    FE, the element force matrix with zeros.
c     Called by: KFCYLN,
c     Calls    :

      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      
      integer      I,J
      real*8       FE(MAXNEN,MXNVAR)
      
      do 1 I=1,MAXNEN
         do 2 J=1,MXNVAR
            FE(I,J) = 0.
2        continue
1     continue

      return
      end
      
      subroutine  CLRKE(KE)
      
c     Name:     CLear K Element
c     Purpose:  To enter zeros into the element stiffness matrix.
c     Common:   
c     Input:   
c     Output:    KE, the element stiffness matrix with zeros.
c     Called by: KCT121,
c     Calls    :

      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      
      integer      I,J,K,L
      real*8       KE(MAXNEN,MAXNEN,MXNVAR,MXNVAR)
            
      do 4 I=1,MAXNEN
         do 3 J=1,MAXNEN
            do 2 K=1,MXNVAR
               do 1 L=1,MXNVAR
                  KE(I,J,K,L) = 0.
1              continue
2           continue
3        continue
4     continue

      return
      end
     
      subroutine CLRKF
      
c     Name:      CLeaR Ksky and F
c     Purpose:   To clear KSKY and F
c     Common:    KF
c     Input:     KSKY and F from KF common.
c     Output:    KSKY and F with zero valued elements to KF common.
c     Called by: FORMKF
c     Calls    : 


      
      integer I,J
      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      real*8           KSKY(MAXLKS), F(MAXNEQ), D(MAXNEQ)
      common /KF/      KSKY,F,D
      save   /KF/
      
      
      do 1 I=1,LNKSKY
        KSKY(I) = 0.
1     continue

      do 2 I=1,NUMEQ
        F(I) = 0.
2     continue

4       continue
3     continue

      return
      end
      
      subroutine DIMENS(KAPA1,KAPA2,OA1,OA2,A2D1,R,Z,PHI,S,CALCK)
      
c     Name:      DIMENSions
c     Purpose:   To calculate the curvatures of the shell at the meridional
c                 coordinate, S. 
c                
c     Input:     S, the meridional coordinate. S may be arclength,
c                 or angle phi in degrees, depending on shape.
c     Output:    KAPA1,KAPA2,OA1,OA2,A2D1,R,Z
c     Called by: FORMKF,FEEDGT,SHPPLT,RESULT,POSPLT
c     Calls    : 


      
      real*8     PI,PIODEG
      parameter (PI=3.14159265, PIODEG = 0.0174532952)
      
      
      character*4     SHAPE
      real*8          RAD,R0,ALPHAD,RC,RPHI,PHI0D,RAT0,OFFSET,
     &                CYLEN,CONEHT,PHI1,PHI2,XF,XS
      common /GEOM/   RAD,R0,ALPHAD,RC,RPHI,PHI0D,RAT0,OFFSET,
     &                CYLEN,CONEHT,PHI1,PHI2,XF,XS,SHAPE
      save   /GEOM/
      
      
      logical      CALCK
      real*8       S,KAPA1,KAPA2,OA1,OA2,R,Z,PHI,A2D1,
     *             ALPHA,SA,CA,
     *             PHI0,SPHI,CPHI,C2PHI,C3PHI,TPHI,RTHETA
      
      if (SHAPE .eq. 'cyln') then
           R     = RAD
           if (CALCK) then
              KAPA1 = 0.
              KAPA2 = 1./R
              OA1   = 1.
              OA2   = 1./R
           end if
           Z     = S
           PHI   = PI/2.
           A2D1    = 0.
       else if (SHAPE .eq. 'cone') then
           ALPHA  = ALPHAD/180. * PI
           SA     = sin(ALPHA)
           CA     = cos(ALPHA)
           R      = R0 + S*SA
           if (CALCK) then
              KAPA1  = 0.
              KAPA2  = CA/R
              OA1   = 1.
              OA2   = 1./R
           end if
           Z      = S*CA
           PHI    = PI/2. - ALPHA
           A2D1     = SA
       else if (SHAPE .eq. 'torr') then
           PHI0   = PHI0D/180. * PI
           PHI    = PHI0 + S/RPHI
           SPHI   = sin(PHI)
           CPHI   = cos(PHI)
           R      = RC + RPHI*SPHI
           Z      = -RPHI*CPHI
           if (CALCK) then
              KAPA1  = 1./RPHI
              KAPA2  = SPHI/R
              OA1   = 1.
              OA2   = 1./R
           end if
           A2D1     = CPHI
       else if (SHAPE .eq. 'torp') then
           PHI    = S*PIODEG
c           PHI    = S
           SPHI   = sin(PHI)
           CPHI   = cos(PHI)
           R      = RC + RPHI*SPHI
           Z      = -RPHI*CPHI
           if (CALCK) then
              RTHETA = RC/SPHI + RPHI
              KAPA1  = 1./RPHI
              KAPA2  = 1./RTHETA
              OA1   = KAPA1/PIODEG
c              OA1   = KAPA1
              OA2   = 1./R
           end if
           A2D1     = RPHI*CPHI*PIODEG
c           A2D1     = RPHI*CPHI
       else if (SHAPE .eq. 'para') then
           if (S .ge. 90.) then
              call ERROR('DIMENS    ','S is greater than 90 degrees   ')
           end if
c          PHI Over Degrees = pi/180.   used to convert degrees to radians
           PHI    = S*PIODEG
           SPHI   = sin(PHI)
           CPHI   = cos(PHI)
           C2PHI  = CPHI*CPHI
           C3PHI  = C2PHI*CPHI
           TPHI   = SPHI/CPHI
           R      = RAT0*TPHI + OFFSET*SPHI
           Z      = R*R/(2.*RAT0) + OFFSET*(1. - CPHI)
           if (CALCK) then
              KAPA1  = C3PHI/(RAT0 + OFFSET*C3PHI)
              KAPA2  = CPHI/(RAT0 + OFFSET*CPHI)
              OA1   = KAPA1/PIODEG
              OA2   = 1./R
           end if
           A2D1 = (RAT0/C2PHI + OFFSET*CPHI)*PIODEG
           
           
       else if (SHAPE .eq. 'cyls') then
           R     = 1.
           if (CALCK) then
              KAPA1 = 1./RAD
              KAPA2 = 0.
              OA1   = KAPA1/PIODEG
              OA2   = 1.
           end if
           Z     = S
           PHI   = PI/2.
           A2D1    = 0.
        else       
           call ERROR('DIMENS    ','Improper SHAPE.                ')
      end if
      
      if (R .lt. 0.) then
        call ERROR('DIMENS    ',' R < 0.                        ')
      end if

      return
      end
      
      

        function DOT(A,B,N)
        

        integer      I,N  
        real*8       A(N),B(N),DOT     
           
        DOT=0.0
        do 1 I=1,N 
          DOT=DOT + A(I)*B(I)
1       continue
       
        return
        end
        
c- DSPPLT -********************************************************************
c                                                                             *
c                                                                             *
      subroutine DSPPLT                                                       *
c                                                                             *
c     Name:       DiSPlacement PLoT                                           *
c     Purpose:   To create data files for plotting displacemts.               *  
c     Input:     DISP from OUT common                                         *
c     Output:    The displacements to the data files UOUT,WOUT,DOUT           *
c     Called by: PLTOUT                                                       *
c     Calls    :                                                              *
c     Common:    CONTRL,ELMDAT,OUT                                            *
c                                                                             *
c******************************************************************************


      integer   INFIL,OUTFIL,ERRRFL,UFIL,WFIL,BFIL,SHPFIL,POSFIL,
     *          NRFIL,M1RFIL,M2RFIL,M3RFIL,QRFIL,TRFIL,DOCFIL
      parameter(INFIL=10,OUTFIL=11,ERRRFL=12,UFIL=20, WFIL=21, BFIL=22,
     *          SHPFIL=23, POSFIL=24,NRFIL=25,M1RFIL=26,M2RFIL=27,
     *          M3RFIL=28,QRFIL=29,TRFIL=30,DOCFIL=4)
    
    
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      character*10    OTFILE
      logical         BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI
      integer         THEORY,TORORD,OSHPU,OSHPW,OSHPD, NINT,NINTW,NINTD
      common /CONTRL/ BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI,
     *                THEORY,TORORD,OSHPU,OSHPW,OSHPD,NINT,NINTW,NINTD,
     *                OTFILE
      save   /CONTRL/
      
      
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      real*8          DISP(MAXNOD,MXNVAR)
      
      common /OUT/    DISP
      save   /OUT/


      
      character*1  TAB
      integer      UINCR,WINCR,DINCR,NODE,I,J
      
      open (unit= UFIL, file= 'UOUT.DAT', status= 'new')
      open (unit= WFIL, file= 'WOUT.DAT', status= 'new')
      open (unit= BFIL, file= 'BOUT.DAT', status= 'new')
      
      TAB = char(9)
      
      UINCR = NEN - OSHPU
      WINCR = NEN - OSHPW
      DINCR = NEN - OSHPD
      
      NODE = 1
      do 1 I=1,NUMNOD
         if (NODE .gt. NUMNOD) go to 1
         write(UFIL,100) NODE,TAB,XNODE(NODE),TAB,DISP(NODE,1),
     *                   TAB,DISP(NODE,2),TAB,DISP(NODE,3),
     *                   TAB,DISP(NODE,6),TAB,DISP(NODE,7),
     *                   TAB,DISP(NODE,12)
         NODE = NODE + UINCR
1     continue

100   format(x,i5,a1,10(x,e12.5,a1))

      NODE = 1
      do 2 I=1,NUMNOD
         if (NODE .gt. NUMNOD) go to 2
         write(WFIL,100) NODE,TAB,XNODE(NODE),TAB,DISP(NODE,3)
         NODE = NODE + WINCR
2     continue

      NODE = 1
      do 3 I=1,NUMNOD
         if (NODE .gt. NUMNOD) go to 3
         write(BFIL,100) NODE,TAB,XNODE(NODE), TAB,DISP(NODE,4),
     *                        TAB,DISP(NODE,5),TAB,DISP(NODE,8),
     *                        TAB,DISP(NODE,9),TAB,DISP(NODE,10),
     *                        TAB,DISP(NODE,11)
         NODE = NODE + DINCR
3     continue
      
      close(UFIL)
      close(WFIL)
      close(BFIL)
      
      return
      end
      
      subroutine EHOMO(EMAT,KAPA1,KAPA2)

c     Name:      E HOmogenious
c     Purpose:   To calculate the E (stiffness matrix for homogeneous
c                (through the thickness) materials.
c     Common:    HOMMAT
c     Input:     KAPA1, KAPA2 and E, NU (from ISOMAT common)       
c     Output:    E(MXNEPS,MXNEPS) stiffness matrix at a point
c     Called by: ESUB
c     Calls    : SYMTZR

      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      character*10    OTFILE
      logical         BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI
      integer         THEORY,TORORD,OSHPU,OSHPW,OSHPD, NINT,NINTW,NINTD
      common /CONTRL/ BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI,
     *                THEORY,TORORD,OSHPU,OSHPW,OSHPD,NINT,NINTW,NINTD,
     *                OTFILE
      save   /CONTRL/
      
      
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      real*8            E,NU,ALPHA,
     &                  C1111,C2222,C3333,C1122,C1133,C2233,
     &                  C1212,C1313,C2323,
     &                  ALPH11,ALPH22,ALPH33,
     &                  BETA11,BETA22,BETA33,THCKNS,
     &                  CI1111,CI2222,CI1122,BITA11,BITA22
      common /HOMMAT/   E,NU,ALPHA,
     &                  C1111,C2222,C3333,C1122,C1133,C2233,
     &                  C1212,C1313,C2323,
     &                  ALPH11,ALPH22,ALPH33,
     &                  BETA11,BETA22,BETA33,THCKNS,
     &                  CI1111,CI2222,CI1122,BITA11,BITA22
      save   /HOMMAT/
      
      
      
      integer      I,J
      real*8       KAPA1,KAPA2,EMAT(MXNEPS,MXNEPS),K1MK2,K2MK1,
     *             H,H2,H3,H5,H7,H9,H5O80,H7O448,H9OBIG,
     *             H2O28,H3O12,K1K1MK2,K2K2MK1,
     *             CONST11,CONST12,CONST21,CONST22,CONST31,
     *             CONST32,CONST41,CONST42,
c     
     *             H3K1,H3K2,H5K1,H5K2,H7K1,H7K2,H3K1MK2,H3K2MK1,
     *             H5K1MK2,H5K2MK1,H7K1MK2,H7K2MK1,H3K1K2,H5K1K2,H7K1K2,
     *             H3K1PK2,H5K1PK2,CSH11,CSH12,CSH21,CSH22
     
      real*8       B01111,B02222,B01122,B01212,B02121,B01221,
     *             B11111,B12222,B11122,B11212,B12121,B11221,
     *             B21111,B22222,B21122,B21212,B22121,B21221,
     *             B31111,B32222,B31122,B31212,B32121,B31221,
     *             B41111,B42222,B41122,B41212,B42121,B41221,
     *             B51111,B52222,B51122,B51212,B52121,B51221,
     *             B61111,B62222,B61122,B61212,B62121,B61221,
c     
     *             B01133,B02233,B11133,B12233,B21133,B22233,
     *             B31133,B32233,B41133,B42233,B51133,B52233,
c
     *             B03333,B13333,B23333,B33333,B43333,
c
     *             B01313,B02323,B11313,B12323,B21313,B22323,
     *             B31313,B32323,B41313,B42323,B51313,B52323,
     *             B61313,B62323
     

     
      H     = THCKNS
      H2    = H*H
      H3    = H2*H
      H5    = H2*H3
      H7    = H2*H5
      H9    = H2*H7
      
      K1MK2 = KAPA1 - KAPA2
      K2MK1 = - K1MK2
      
      H3O12  = H3/12.
      H5O80  = H5/80.
      H7O448 = H7/448.
      H9OBIG = H9/2304.
      
      H2O28  = H2/28.

      K1K1MK2 = KAPA1*K1MK2
      K2K2MK1 = KAPA2*K2MK1
      
      if (TORORD .eq. 0) then
      
         CONST11      = H
         CONST12      = H
         CONST21      = H3O12
         CONST22      = H3O12
         CONST31      = H5O80
         CONST32      = H5O80
         CONST41      = H7O448
         CONST42      = H7O448
         
         H3K1 = 0.
         H3K2 = 0.
         H5K1 = 0.
         H5K2 = 0.         
         
         H3K1MK2 = 0.
         H3K2MK1 = 0.
         H5K1MK2 = 0.
         H5K2MK1 = 0.
         H7K1MK2 = 0.
         H7K2MK1 = 0.

         H3K1K2  = 0.
         H5K1K2  = 0.
         H7K1K2  = 0.
         H3K1PK2 = 0.
         H5K1PK2 = 0.

         CSH11 = 1.
         CSH12 = 1.
         CSH21 = H
         CSH22 = H
      
      
        else if (TORORD .eq. 1) then
      
         CONST11      = H
         CONST12      = H
         CONST21      = H3O12
         CONST22      = H3O12
         CONST31      = H5O80
         CONST32      = H5O80
         CONST41      = H7O448
         CONST42      = H7O448
         
         H3K1 = H3O12*KAPA1
         H3K2 = H3O12*KAPA2
         H5K1 = H5O80*KAPA1
         H5K2 = H5O80*KAPA2         
         
         H3K1MK2 = H3O12*K1MK2
         H3K2MK1 = H3O12*K2MK1
         H5K1MK2 = H5O80*K1MK2
         H5K2MK1 = H5O80*K2MK1
         H7K1MK2 = H7O448*K1MK2
         H7K2MK1 = H7O448*K2MK1

         H3K1K2  = 0.
         H5K1K2  = 0.
         H7K1K2  = 0.
         
         H3K1PK2 = H3O12*(KAPA1 + KAPA2)
         H5K1PK2 = H5O80*(KAPA1 + KAPA2)

         CSH11 = 1.
         CSH12 = 1.
         CSH21 = H
         CSH22 = H
      
        else if (TORORD .eq. 2) then
      
         CONST11      = H     + H3O12   * K1K1MK2
         CONST12      = H     + H3O12   * K2K2MK1
         CONST21      = H3O12 + H5O80   * K1K1MK2
         CONST22      = H3O12 + H5O80   * K2K2MK1
         CONST31      = H5O80 + H7O448  * K1K1MK2
         CONST32      = H5O80 + H7O448  * K2K2MK1
         CONST41      = H7O448 + H9OBIG * K1K1MK2
         CONST42      = H7O448 + H9OBIG * K2K2MK1
         
         H3K1 = H3O12*KAPA1
         H3K2 = H3O12*KAPA2
         H5K1 = H5O80*KAPA1
         H5K2 = H5O80*KAPA2     
         H7K1 = H7O448*KAPA1
         H7K2 = H7O448*KAPA2    
         
         H3K1MK2 = H3O12*K1MK2
         H3K2MK1 = H3O12*K2MK1
         H5K1MK2 = H5O80*K1MK2
         H5K2MK1 = H5O80*K2MK1
         H7K1MK2 = H7O448*K1MK2
         H7K2MK1 = H7O448*K2MK1

         H3K1K2  = H3O12*KAPA1*KAPA2
         H5K1K2  = H5O80*KAPA1*KAPA2
         H7K1K2  = H7O448*KAPA1*KAPA2
         
         H3K1PK2 = H3O12*(KAPA1 + KAPA2)
         H5K1PK2 = H5O80*(KAPA1 + KAPA2)
         
         CSH11 = 1. + H2O28*K1K1MK2
         CSH12 = 1. + H2O28*K2K2MK1
         CSH21 = H  + H3O12*K1K1MK2
         CSH22 = H  + H3O12*K2K2MK1
         
      end if
            
      B01111 = C1111*CONST11
      B02222 = C2222*CONST12
      B01122 = C1122*H
      B01212 = C1212*CONST12
      B02121 = C1212*CONST11
      B01221 = C1212*H
      
      B11111 = C1111*H3K2MK1
      B12222 = C2222*H3K1MK2
      B11122 = 0.
      B11212 = C1212*H3K1MK2
      B12121 = C1212*H3K2MK1
      B11221 = 0.
      
      B21111 = C1111*CONST21
      B22222 = C2222*CONST22
      B21122 = C1122*H3O12
      B21212 = C1212*CONST22
      B22121 = C1212*CONST21
      B21221 = C1212*H3O12

      B31111 = C1111*H5K2MK1
      B32222 = C2222*H5K1MK2
      B31122 = 0.
      B31212 = C1212*H5K1MK2
      B32121 = C1212*H5K2MK1
      B31221 = 0.      
      
      B41111 = C1111*CONST31
      B42222 = C2222*CONST32
      B41122 = C1122*H5O80
      B41212 = C1212*CONST32
      B42121 = C1212*CONST31
      B41221 = C1212*H5O80
      
      B51111 = C1111*H7K2MK1
      B52222 = C2222*H7K1MK2
      B51122 = 0.
      B51212 = C1212*H7K1MK2
      B52121 = C1212*H7K2MK1
      B51221 = 0.      
      
      B61111 = C1111*CONST41
      B62222 = C2222*CONST42
      B61122 = C1122*H7O448
      B61212 = C1212*CONST42
      B62121 = C1212*CONST41
      B61221 = C1212*H7O448
      
      
      B01133 = C1133*H
      B02233 = C2233*H
      
      B11133 = C1133*H3K2
      B12233 = C2233*H3K1
      
      B21133 = C1133*H3O12
      B22233 = C2233*H3O12
      
      B31133 = C1133*H5K2
      B32233 = C2233*H5K1
      
      B41133 = C1133*H5O80
      B42233 = C2233*H5O80
      
      B51133 = C1133*H7K2
      B52233 = C2233*H7K1
      
      B03333 = C3333*(H + H3K1K2)
      B13333 = C3333*H3K1PK2
      B23333 = C3333*(H3O12 + H5K1K2)
      B33333 = C3333*H5K1PK2
      B43333 = C3333*(H5O80 + H7K1K2)
      
      if (SHEARC) then
         B01313 = 5./6.   *C1313*H*CSH11
         B02323 = 5./6.   *C2323*H*CSH12
         B21313 = 7./120. *C1313 * CSH21
         B22323 = 7./120. *C2323 * CSH22
       else
         B01313 = C1313*CONST11
         B02323 = C2323*CONST12
         
         B11313 = C1313*H3K2MK1
         B12323 = C2323*H3K1MK2
         
         B21313 = C1313*CONST21
         B22323 = C2323*CONST22
         
         B31313 = C1313*H5K2MK1
         B32323 = C2323*H5K1MK2
         
         B41313 = C1313*CONST31
         B42323 = C2323*CONST32
         
         B51313 = C1313*H7K2MK1
         B52323 = C2323*H7K1MK2
         
         B61313 = C1313*CONST41
         B62323 = C2323*CONST42
         
         
      end if
         
      
      do 1 I=1,MXNEPS
           do 1 J=I,MXNEPS
                EMAT(I,J) = 0.
1     continue
      
      EMAT(1,1)  = B01111
      EMAT(1,2)  = B01122
      EMAT(1,5)  = B11111
      EMAT(1,6)  = B11122
      EMAT(1,11) = B01133
      EMAT(1,14) = B11133
      
      EMAT(2,2)  = B02222
      EMAT(2,5)  = B11122
      EMAT(2,6)  = B12222
      EMAT(2,11) = B02233
      EMAT(2,14) = B12233
      
      EMAT(3,3)  = B01212
      EMAT(3,4)  = B01221
      EMAT(3,7)  = B11212
      EMAT(3,8)  = B11221
      
      EMAT(4,4)  = B02121
      EMAT(4,7)  = B11221
      EMAT(4,8)  = B12121
      
      EMAT(5,5)  = B21111
      EMAT(5,6)  = B21122
      EMAT(5,11) = B11133
      EMAT(5,14) = B21133
      
      EMAT(6,6)  = B22222
      EMAT(6,11) = B12233
      EMAT(6,14) = B22233
      
      EMAT(7,7)  = B21212
      EMAT(7,8)  = B21221
      
      EMAT(8,8)  = B22121
      
      EMAT(9,9)  = B01313
      EMAT(9,12) = B11313
      
      EMAT(10,10) = B02323
      EMAT(10,13) = B12323

      
      EMAT(11,11) = B03333
      EMAT(11,14) = B13333
      
      EMAT(12,12) = B21313
      
      EMAT(13,13) = B22323
      
      EMAT(14,14) = B23333
      
      if (NEPS .ge. 15) then
         
         EMAT(1,15)  = B21111
         EMAT(1,16)  = B21122
         EMAT(1,19)  = B31111
         EMAT(1,20)  = B31122
         EMAT(1,27)  = B21133
         
         EMAT(2,15)  = B21122
         EMAT(2,16)  = B22222
         EMAT(2,20)  = B32222
         EMAT(2,27)  = B22233
         
         EMAT(3,17)  = B21212
         EMAT(3,18)  = B21221
         EMAT(3,21)  = B31212
         EMAT(3,22)  = B31221
         
         EMAT(4,17)  = B21221
         EMAT(4,18)  = B22121
         EMAT(4,21)  = B31221
         EMAT(4,22)  = B32121
         
         EMAT(5,15)  = B31111
         EMAT(5,16)  = B31122
         EMAT(5,19)  = B41111
         EMAT(5,20)  = B41122
         EMAT(5,27)  = B31133
         
         EMAT(6,15)  = B31122
         EMAT(6,16)  = B32222
         EMAT(6,19)  = B41122
         EMAT(6,20)  = B42222
         EMAT(6,27)  = B32233
         
         EMAT(7,17)  = B31212
         EMAT(7,18)  = B31221
         EMAT(7,21)  = B41212
         EMAT(7,22)  = B41221
         
         EMAT(8,17)  = B31221
         EMAT(8,18)  = B32121
         EMAT(8,21)  = B41221
         EMAT(8,22)  = B42121
         
         EMAT(9,23)  = B21313
         EMAT(9,25)  = B31313
         
         EMAT(10,24) = B22323
         EMAT(10,26) = B32323
         
         EMAT(11,15) = B21133
         EMAT(11,16) = B22233
         EMAT(11,19) = B31133
         EMAT(11,20) = B32233
         EMAT(11,27) = B23333
         
         EMAT(12,23) = B31313
         EMAT(12,25) = B41313
         
         EMAT(13,24) = B32323
         EMAT(13,26) = B42323
         
         EMAT(14,15) = B31133
         EMAT(14,16) = B32233
         EMAT(14,19) = B41133
         EMAT(14,20) = B42233
         EMAT(14,27) = B33333
         
         EMAT(15,15) = B41111
         EMAT(15,16) = B41122
         EMAT(15,19) = B51111
         EMAT(15,20) = B51122
         EMAT(15,27) = B41133
         
         EMAT(16,16) = B42222
         EMAT(16,19) = B51122
         EMAT(16,20) = B52222
         EMAT(16,27) = B42233
         
         EMAT(17,17) = B41212
         EMAT(17,18) = B41221
         EMAT(17,21) = B51212
         EMAT(17,22) = B51221
         
         EMAT(18,18) = B42121
         EMAT(18,21) = B51221
         EMAT(18,22) = B52121
         
         EMAT(19,19) = B61111
         EMAT(19,20) = B61122
         EMAT(19,27) = B51133
         
         EMAT(20,20) = B62222
         EMAT(20,27) = B52233
         
         EMAT(21,21) = B61212
         EMAT(21,22) = B61221
         
         EMAT(22,22) = B62121
         
         EMAT(23,23) = B41313
         EMAT(23,25) = B51313
         
         EMAT(24,24) = B42323
         EMAT(24,26) = B52323

         EMAT(25,25) = B61313
         
         EMAT(26,26) = B62323
         
         EMAT(27,27) = B43333
         
         
      end if
      
      call SYMTZR(EMAT,MXNEPS)
      
      return
      end
      subroutine ELAM(EMAT,KAPA1,KAPA2)

c     Name:      E LAMinate
c     Purpose:   To calculate the E (stiffness matrix for laminated materials.
c     Common:    LAMSCF
c     Input:     KAPA1, KAPA2 and integrated laminate coefficients
c                (from LAMSCF common)       
c     Output:    E(MXNEPS,MXNEPS) stiffness matrix at a point
c     Called by: ESUB
c     Calls    : SYMTZR

      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      character*10    OTFILE
      logical         BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI
      integer         THEORY,TORORD,OSHPU,OSHPW,OSHPD, NINT,NINTW,NINTD
      common /CONTRL/ BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI,
     *                THEORY,TORORD,OSHPU,OSHPW,OSHPD,NINT,NINTW,NINTD,
     *                OTFILE
      save   /CONTRL/
      
      
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      real*8           CN1111(0:8),CN2222(0:8),CN1122(0:8),
     &                 CN1212(0:8),CN1112(0:8),CN2212(0:8),
     &                 CN1133(0:6),CN2233(0:6),CN1233(0:6),
     &                 CN1313(0:8),CN2323(0:8),CN1323(0:8),
     &                 CN3333(0:6)
     
      common /LAMSCF/  CN1111,CN2222,CN1122,
     &                 CN1212,CN1112,CN2212,
     &                 CN1133,CN2233,CN1233,
     &                 CN1313,CN2323,CN1323,CN3333

      save   /LAMSCF/

      logical           SYM
      integer           NSTACK,MATNO(MAXSTK),NPLY(MAXSTK)
      real*8            LTHKNS,PTHK(MAXSTK),THETA(MAXSTK),STHKNS(MAXSTK)
     
      common  /LAYUP/   SYM,
     &                  NSTACK,MATNO,NPLY,
     &                  LTHKNS,PTHK,THETA,STHKNS
 
      save    /LAYUP/
      
      
      
      
      integer      I,J
      real*8       KAPA1,KAPA2,EMAT(MXNEPS,MXNEPS),K1MK2,K2MK1,
     &             K1K1MK2,K2K2MK1,H,H2,H4,H6,
     &             H2U4,H2U8,H4U16,H4U32,H6U64,
     &             I1,I2,IB1,IB2,K1,K2,K1PK2,K1K2,
c     
     &             B1111(0:6),B1112(0:6),B1121(0:6),B1122(0:6),
     &             B1212(0:6),B1221(0:6),B1222(0:6),B2121(0:6),
     &             B2122(0:6),B2222(0:6),
c     
     &             B1133(0:5),B2233(0:5),B1233(0:5),B2133(0:5),
c
     &             B3333(0:4),
c
     &             B1313(0:6),B2323(0:6),B1323(0:6)
     

      H  = LTHKNS
      H2 = H*H
      H4 = H2*H2
      H6 = H4*H2
      
      H2U4 = 4./H2
      H2U8 = 8./H2
      H4U16 = 16./H4
      H4U32 = 32./H4
      H6U64 = 64./H6
      
      
      K1MK2 = KAPA1 - KAPA2
      K2MK1 = - K1MK2
      

      K1K1MK2 = KAPA1*K1MK2
      K2K2MK1 = KAPA2*K2MK1
      
      if (TORORD .eq. 0) then
      
         I1  = 0.
         I2  = 0.
         IB1 = 0.
         IB2 = 0.
         K1  = 0.
         K2  = 0.
         K1PK2 = 0.
         K1K2  = 0.
      
        else if (TORORD .eq. 1) then
        
         I1  = K2MK1
         I2  = K1MK2
         IB1 = 0.
         IB2 = 0.
         K1  = KAPA1
         K2  = KAPA2
         K1PK2 = KAPA1 + KAPA2
         K1K2  = 0.
      
        else if (TORORD .eq. 2) then
        
         I1  = K2MK1
         I2  = K1MK2
         IB1 = K1K1MK2
         IB2 = K2K2MK1
         K1  = KAPA1
         K2  = KAPA2
         K1PK2 = KAPA1 + KAPA2
         K1K2  = KAPA1*KAPA2
         
      end if
      
      
      do 1 I=0,6
         B1111(I) = CN1111(I) + I1*CN1111(I+1) + IB1*CN1111(I+2)
         B1112(I) = CN1112(I)
         B1121(I) = CN1112(I) + I1*CN1112(I+1) + IB1*CN1112(I+2)
         B1122(I) = CN1122(I)
         B1212(I) = CN1212(I) + I2*CN1212(I+1) + IB2*CN1212(I+2)
         B1221(I) = CN1212(I)
         B1222(I) = CN2212(I) + I2*CN2212(I+1) + IB2*CN2212(I+2)
         B2121(I) = CN1212(I) + I1*CN1212(I+1) + IB1*CN1212(I+2)
         B2122(I) = CN2212(I)
         B2222(I) = CN2222(I) + I2*CN2222(I+1) + IB2*CN2222(I+2)
1     continue


      do 2 I=0,5
         B1133(I) = CN1133(I) + K2*CN1133(I+1)
         B2233(I) = CN2233(I) + K1*CN1133(I+1)
         B1233(I) = CN1233(I) + K2*CN1233(I+1)
         B2133(I) = CN1233(I) + K1*CN1233(I+1)
2     continue


      do 3 I=0,4
         B3333(I) = CN3333(I) + K1PK2*CN3333(I+1) + K1K2*CN3333(I+2)
3     continue
         
      
      if (SHEARC) then
      
         B1313(0) = (25./16.)
     &             * ( (CN1313(0) - H2U8*CN1313(2) + H4U16*CN1313(4))
     &          + I1 * (CN1313(1) - H2U8*CN1313(3) + H4U16*CN1313(5))
     &          + IB1* (CN1313(2) - H2U8*CN1313(4) + H4U16*CN1313(6)) )
                
         B2323(0) = (25./16.)
     &             * ( (CN2323(0) - H2U8*CN2323(2) + H4U16*CN2323(4))
     &          + I2 * (CN2323(1) - H2U8*CN2323(3) + H4U16*CN2323(5))
     &          + IB2* (CN2323(2) - H2U8*CN2323(4) + H4U16*CN2323(6)) )
     
         B1323(0) = (25./16.)
     &             * (CN1323(0) - H2U8*CN1323(2) + H4U16*CN1323(4))
              
                
         B1313(1) = (49./64.)
     &             * ( (H2U4*CN1313(2) - H4U32*CN1313(4)
     &                                 + H6U64*CN1313(6))
     &          + I1 * (H2U4*CN1313(3) - H4U32*CN1313(5)
     &                                 + H6U64*CN1313(7))
     &          + IB1* (H2U4*CN1313(4) - H4U32*CN1313(6)
     &                                 + H6U64*CN1313(8)) )
                
         B2323(1) = (49./64.)
     &             * ( (H2U4*CN2323(2) - H4U32*CN2323(4)
     &                                 + H6U64*CN2323(6))
     &          + I2 * (H2U4*CN2323(3) - H4U32*CN2323(5)
     &                                 + H6U64*CN2323(7))
     &          + IB2* (H2U4*CN2323(4) - H4U32*CN2323(6)
     &                                 + H6U64*CN2323(8)) )
     
         B1323(1) = (49./64.)
     &             *  (H2U4*CN1323(2) - H4U32*CN1323(4))
     
     
       else
       
         do 4 I=0,6
            B1313(I) = CN1313(I) + I1*CN1313(I+1) + IB1*CN1313(I+2)
            B2323(I) = CN2323(I) + I2*CN2323(I+1) + IB2*CN2323(I+2)
            B1323(I) = CN1323(I)
4        continue


      end if
         
      
      do 5 I=1,MXNEPS
           do 6 J=I,MXNEPS
                EMAT(I,J) = 0.
6          continue
5     continue
      
      EMAT(1,1)  = B1111(0)
      EMAT(1,2)  = B1122(0)
      EMAT(1,3)  = B1112(0)
      EMAT(1,4)  = B1121(0)
      EMAT(1,5)  = B1111(1)
      EMAT(1,6)  = B1122(1)
      EMAT(1,7)  = B1112(1)
      EMAT(1,8)  = B1121(1)
      EMAT(1,11) = B1133(0)
      EMAT(1,14) = B1133(1)
      
      EMAT(2,2)  = B2222(0)
      EMAT(2,3)  = B1222(0)
      EMAT(2,4)  = B2122(0)
      EMAT(2,5)  = B1122(1)
      EMAT(2,6)  = B2222(1)
      EMAT(2,7)  = B1222(1)
      EMAT(2,8)  = B2122(1)
      EMAT(2,11) = B2233(0)
      EMAT(2,14) = B2233(1)

      EMAT(3,3)  = B1212(0)
      EMAT(3,4)  = B1221(0)
      EMAT(3,5)  = B1112(1)
      EMAT(3,6)  = B1222(1)
      EMAT(3,7)  = B1212(1)
      EMAT(3,8)  = B1221(1)
      EMAT(3,11) = B1233(0)
      EMAT(3,14) = B1233(1)
      
      EMAT(4,4)  = B2121(0)
      EMAT(4,5)  = B1121(1)
      EMAT(4,6)  = B2122(1)
      EMAT(4,7)  = B1221(1)
      EMAT(4,8)  = B2121(1)
      EMAT(4,11) = B2133(0)
      EMAT(4,14) = B2133(1)
            
      EMAT(5,5)  = B1111(2)
      EMAT(5,6)  = B1122(2)
      EMAT(5,7)  = B1112(2)
      EMAT(5,8)  = B1121(2)
      EMAT(5,11) = B1133(1)
      EMAT(5,14) = B1133(2)
      
      EMAT(6,6)  = B2222(2)
      EMAT(6,7)  = B1222(2)
      EMAT(6,8)  = B2122(2)
      EMAT(6,11) = B2233(1)
      EMAT(6,14) = B2233(2)

      EMAT(7,7)  = B1212(2)
      EMAT(7,8)  = B1221(2)
      EMAT(7,11) = B1233(1)
      EMAT(7,14) = B1233(2)
      
      EMAT(8,8)  = B2121(2)
      EMAT(8,11) = B2133(1)
      EMAT(8,14) = B2133(2)
      
      
      EMAT(9,9)  = B1313(0)
      EMAT(9,10) = B1323(0)
      EMAT(9,12) = B1313(1)
      EMAT(9,13) = B1323(1)
      
      EMAT(10,10) = B2323(0)
      EMAT(10,12) = B1323(1)
      EMAT(10,13) = B2323(1)

      
      EMAT(11,11) = B3333(0)
      EMAT(11,14) = B3333(1)
      
      EMAT(12,12) = B1313(2)
      EMAT(12,13) = B1323(2)
      
      EMAT(13,13) = B2323(2)
      
      EMAT(14,14) = B3333(2)
      
      if (NEPS .ge. 15) then
         
         EMAT(1,15)  = B1111(2)
         EMAT(1,16)  = B1122(2)
         EMAT(1,17)  = B1112(2)
         EMAT(1,18)  = B1121(2)
         EMAT(1,19)  = B1111(3)         
         EMAT(1,20)  = B1122(3)
         EMAT(1,21)  = B1112(3)
         EMAT(1,22)  = B1121(3)
         EMAT(1,27)  = B1133(2)
         
         EMAT(2,15)  = B1122(2)
         EMAT(2,16)  = B2222(2)
         EMAT(2,17)  = B1222(2)
         EMAT(2,18)  = B2122(2)
         EMAT(2,19)  = B1122(3)
         EMAT(2,20)  = B2222(3)
         EMAT(2,21)  = B1222(3)
         EMAT(2,22)  = B2122(3)
         EMAT(2,27)  = B2233(2)
         
         EMAT(3,15)  = B1112(2)
         EMAT(3,16)  = B1222(2)
         EMAT(3,17)  = B1212(2)
         EMAT(3,18)  = B1221(2)
         EMAT(3,19)  = B1112(3)
         EMAT(3,20)  = B1222(3)
         EMAT(3,21)  = B1212(3)
         EMAT(3,22)  = B1221(3)
         EMAT(3,27)  = B1233(2)
         
         EMAT(4,15)  = B1121(2)
         EMAT(4,16)  = B2122(2)
         EMAT(4,17)  = B1221(2)
         EMAT(4,18)  = B2121(2)
         EMAT(4,19)  = B1121(3)
         EMAT(4,20)  = B2122(3)
         EMAT(4,21)  = B1221(3)
         EMAT(4,22)  = B2121(3)
         EMAT(4,27)  = B2133(2)
         
         EMAT(5,15)  = B1111(3)
         EMAT(5,16)  = B1122(3)
         EMAT(5,17)  = B1112(3)
         EMAT(5,18)  = B1121(3)
         EMAT(5,19)  = B1111(4)         
         EMAT(5,20)  = B1122(4)
         EMAT(5,21)  = B1112(4)
         EMAT(5,22)  = B1121(4)
         EMAT(5,27)  = B1133(3)
                  
         EMAT(6,15)  = B1122(3)
         EMAT(6,16)  = B2222(3)
         EMAT(6,17)  = B1222(3)
         EMAT(6,18)  = B2122(3)
         EMAT(6,19)  = B1122(4)
         EMAT(6,20)  = B2222(4)
         EMAT(6,21)  = B1222(4)
         EMAT(6,22)  = B2122(4)
         EMAT(6,27)  = B2233(3)
         
         EMAT(7,15)  = B1112(3)
         EMAT(7,16)  = B1222(3)
         EMAT(7,17)  = B1212(3)
         EMAT(7,18)  = B1221(3)
         EMAT(7,19)  = B1112(4)
         EMAT(7,20)  = B1222(4)
         EMAT(7,21)  = B1212(4)
         EMAT(7,22)  = B1221(4)
         EMAT(7,27)  = B1233(3)
         
         EMAT(8,15)  = B1121(3)
         EMAT(8,16)  = B2122(3)
         EMAT(8,17)  = B1221(3)
         EMAT(8,18)  = B2121(3)
         EMAT(8,19)  = B1121(4)
         EMAT(8,20)  = B2122(4)
         EMAT(8,21)  = B1221(4)
         EMAT(8,22)  = B2121(4)
         EMAT(8,27)  = B2133(3)      
         
         EMAT(9,23)  = B1313(2)
         EMAT(9,24)  = B1323(2)
         EMAT(9,25)  = B1313(3)
         EMAT(9,26)  = B1323(3)
         
         EMAT(10,23) = B1323(2)
         EMAT(10,24) = B2323(2)
         EMAT(10,25) = B1323(3)
         EMAT(10,26) = B2323(3)
         
         EMAT(11,15) = B1133(2)
         EMAT(11,16) = B2233(2)
         EMAT(11,17) = B1233(2)
         EMAT(11,18) = B2133(2)
         EMAT(11,19) = B1133(3)
         EMAT(11,20) = B2233(3)
         EMAT(11,21) = B1233(3)
         EMAT(11,22) = B2133(3)
         EMAT(11,27) = B3333(2)
         
         EMAT(12,23) = B1313(3)
         EMAT(12,24) = B1323(3)
         EMAT(12,25) = B1313(4)
         EMAT(12,26) = B1323(4)
         
         EMAT(13,23) = B1323(3)
         EMAT(13,24) = B2323(3)
         EMAT(13,25) = B1323(4)
         EMAT(13,26) = B2323(4)
         
         EMAT(14,15) = B1133(3)
         EMAT(14,16) = B2233(3)
         EMAT(14,17) = B1233(3)
         EMAT(14,18) = B2133(3)
         EMAT(14,19) = B1133(4)
         EMAT(14,20) = B2233(4)
         EMAT(14,21) = B1233(4)
         EMAT(14,22) = B2133(4)
         EMAT(14,27) = B3333(3)
         
         EMAT(15,15) = B1111(4)
         EMAT(15,16) = B1122(4)
         EMAT(15,17) = B1112(4)
         EMAT(15,18) = B1121(4)
         EMAT(15,19) = B1111(5)
         EMAT(15,20) = B1122(5)
         EMAT(15,21) = B1112(5)
         EMAT(15,22) = B1121(5)
         EMAT(15,27) = B1133(4)
         
         EMAT(16,16) = B2222(4)
         EMAT(16,17) = B1222(4)
         EMAT(16,18) = B2122(4)
         EMAT(16,19) = B1122(5)
         EMAT(16,20) = B2222(5)
         EMAT(16,21) = B1222(5)
         EMAT(16,22) = B2122(5)
         EMAT(16,27) = B2233(4)
         
         EMAT(17,17) = B1212(4)
         EMAT(17,18) = B1221(4)
         EMAT(17,19) = B1112(5)
         EMAT(17,20) = B1222(5)
         EMAT(17,21) = B1212(5)
         EMAT(17,22) = B1221(5)
         EMAT(17,27) = B1233(4)
         
         EMAT(18,18) = B2121(4)
         EMAT(18,19) = B1121(5)
         EMAT(18,20) = B2122(5)
         EMAT(18,21) = B1221(5)
         EMAT(18,22) = B2121(5)
         EMAT(18,27) = B2133(4)
         
         EMAT(19,19) = B1111(6)
         EMAT(19,20) = B1122(6)
         EMAT(19,21) = B1112(6)
         EMAT(19,22) = B1121(6)
         EMAT(19,27) = B1133(5)
         
         EMAT(20,20) = B2222(6)
         EMAT(20,21) = B1222(6)
         EMAT(20,22) = B2122(6)
         EMAT(20,27) = B2233(5)
         
         EMAT(21,21) = B1212(6)
         EMAT(21,22) = B1221(6)
         EMAT(21,27) = B1233(5)
         
         EMAT(22,22) = B2121(6)
         EMAT(22,27) = B2133(5)
         
         EMAT(23,23) = B1313(4)
         EMAT(23,24) = B1323(4)
         EMAT(23,25) = B1313(5)
         EMAT(23,26) = B1323(5)
         
         EMAT(24,24) = B2323(4)
         EMAT(24,25) = B1323(5)
         EMAT(24,26) = B2323(5)

         EMAT(25,25) = B1313(6)
         EMAT(25,26) = B1323(6)
         
         EMAT(26,26) = B2323(6)
         
         EMAT(27,27) = B3333(4)
         
         
      end if
      
      call SYMTZR(EMAT,MXNEPS)
      
      return
      end
      subroutine ENGTOC(E1,E2,E3,NU12,NU13,NU23,G12,G13,G23,
     &                  C1111,C2222,C3333,C1122,C1133,C2233,
     &                  C1212,C1313,C2323)
c                                                                             *
c                                                                             *
c                                                                             *
c     Name:      ENGineering TO C                                             *
c     Purpose:   To calculate the stiffness coeficients given the engineering *
c                constants.                                                   *
c     Input:     The engineering constants: E1,E2,...,G23                     *
c     Output:    The stiffness coefficients, C                                *
c     Called by: LAMCOF                                                       *
c     Calls    :                                                              *
c     Common:                                                                 *
c                                                                      |      *
c******************************************************************************


      
      
      real*8      E1,E2,E3,NU12,NU13,NU23,G12,G13,G23, C1111,C2222,
     &            C3333,C1122,C1133,C2233,C1212,C1313,C2323,DELTA,
     &            N12N21,N13N31,N23N32,E1E2D,E1E3D,E2E3D
     
      N12N21 = NU12*NU12*E2/E1
      N13N31 = NU13*NU13*E3/E1
      N23N32 = NU23*NU23*E3/E2
      
      DELTA = (1. - N12N21 - N23N32
     $            - N13N31 - 2.*NU12*NU13*NU23*E3/E1) /
     &        (E1*E2*E3)
      
      E1E2D  = E1*E2*DELTA
      E1E3D  = E1*E3*DELTA
      E2E3D  = E2*E3*DELTA
     
                
                
      C1111 = (1. - N23N32) / E2E3D
      C2222 = (1. - N13N31) / E1E3D
      C3333 = (1. - N12N21) / E1E2D
      C1122 = (NU12 + NU13*NU23*E3/E2) / E1E3D
      C1133 = (NU13 + NU12*NU23)       / E1E2D
      C2233 = (NU23 + NU13*NU12*E2/E1) / E1E2D
      C1212 = G12
      C1313 = G13
      C2323 = G23
      
100   format(/' E1   = ',e12.5,3x,'E2   = ',e12.5,3x,'E2   = ',e12.5/
     &        ' Nu12 = ',e12.5,3x,'Nu13 = ',e12.5,3x,'Nu23 = ',e12.5/
     &        ' G12  = ',e12.5,3x,'G13  = ',e12.5,3x,'G23  = ',e12.5/
     &        ' C1111= ',e12.5,3x,'C2222= ',e12.5,3x,'C3333= ',e12.5/
     &        ' C1122= ',e12.5,3x,'C1133= ',e12.5,3x,'C2233= ',e12.5/
     &        ' C1212= ',e12.5,3x,'C1313= ',e12.5,3x,'C2323= ',e12.5/)
      return
      end
      
      subroutine ESUB(EMAT,KAPA1,KAPA2)
      
c     Name:      E SUBroutine
c     Purpose:   To calculate the E (stiffness) matrix.  Actually this subroutine
c                just calls the appropriate subroutine depending on the type
c                of material.
c     Common:    MATCOD
c     Input:     KAPA1,KAPA2
c     Output:    EMAT
c     Called by: FORMKF
c     Calls    : 

 
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      logical          HOMOGN
      character*3      MATCODE      
      common /MATCOD/  HOMOGN,MATCODE
      save   /MATCOD/


      
      real*8       KAPA1,KAPA2,EMAT(MXNEPS,MXNEPS)
      
      
      if (HOMOGN) then
           call EHOMO(EMAT,KAPA1,KAPA2)
          
         else 
           call ELAM(EMAT,KAPA1,KAPA2)
      end if
      
      return
      end
      
      
      subroutine FEDISP(EL,KE,FE)
      
c     Name:      Force (Element) due to prescribed DISPlacements
c     Purpose:   To calculate the portion of the element force vector
c                due to prescribed displacements.
c     Common:    
c     Input:     EL, element no.; KE, element stiffness matrix; 
c                FE, element force vector with zero valued elements.
c                UBCTOP, UBCBOT; the prescribed displacements at the top
c                    and bottom, respectively. (From BC common)            
c     Output:    FE, portion of the element force vector due to prescribed
c                    displacements
c     Called by:
c     Calls    : 

      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer     BCTYPE(2),BCCODE(2,MXNBC)
      real*8      UBC(2,MXNVAR),TBC(2,MXNVAR)
      common /BC/ BCTYPE,BCCODE,UBC,TBC
      save /BC/
      
      
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      
      integer      EL,INODE,JNODE,I,J,EDGE
      real*8       KE(MAXNEN,MAXNEN,MXNVAR,MXNVAR), FE(MAXNEN,MXNVAR)
     
100   format(/' in fedisp')

      if (EL .eq. 1) then
          JNODE = 1
          EDGE  = 1
        else if (EL .eq. NUMEL) then
          JNODE=NEN
          EDGE  = 2
        else
          call ERROR('FEDISP    ',' EL not equal to 1 or NUMEL   ')          
      end if

      do 3 INODE=1,NEN
        do 4 I=1,NDOFPN(INODE)
          do 5 J=1,NDOFPN(JNODE)
            if (JNODE .ge. INODE) then
              FE(INODE,I) = FE(INODE,I)
     &                      - KE(INODE,JNODE,I,J)*UBC(EDGE,J)
             else
              FE(INODE,I) = FE(INODE,I)
     &                      - KE(JNODE,INODE,J,I)*UBC(EDGE,J)
             end if      
5         continue
4       continue
3     continue
            
      return
      end

      subroutine FEEDGT(EL,FE)
      
c     Name:      Force (Element) due to prescribed EDGe Tractions
c     Purpose:   To calculate the portion of the element force vector
c                due to prescribed edge tractions.  
c     Common:    BC,ELMDAT
c     Input:     EL, element no.; 
c                FE, element force vector.
c                TBCTOP,TBCBOT; the prescribed tractions at the top and bottom,
c                   respectively. (From BC common)
c     Output:    FE, portion of the element force vector due to prescribed
c                   tractions.
c     Called by: KFCYLN
c     Calls    :
      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer     BCTYPE(2),BCCODE(2,MXNBC)
      real*8      UBC(2,MXNVAR),TBC(2,MXNVAR)
      common /BC/ BCTYPE,BCCODE,UBC,TBC
      save /BC/
      
      
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      
      integer      EL,INODE,I,EDGE
      real*8       FE(MAXNEN,MXNVAR),
     *             S,KAPA1,KAPA2,OA1,OA2,A2D1,R,Z,PHI
      
100   format(//' in feedgt')
      
      if (EL .eq. 1) then
         
         INODE = 1
          S    = XEDGE(1)
          EDGE = 1
      
        else if (EL .eq. NUMEL) then
          
          INODE = NEN
          S     = XEDGE(NUMEL+1)
          EDGE  = 2
      
        else
          call ERROR('FEEDGT    ',' EL not equal to 1 or NUMEL   ')
          
      end if
      
      call DIMENS(KAPA1,KAPA2,OA1,OA2,A2D1,R,Z,PHI,S,.false.)
      
      do 3 I=1,NDOFPN(INODE)
         FE(INODE,I) = FE(INODE,I) + TBC(EDGE,I)*R
3     continue
     
      return
      end
      
      
      subroutine FEMECH(FE,N,FMECH,WTJR)
      
c     Name:      Force (Element) array due to MECHanical loads
c     Purpose:   To calculate the portion of the element force vector
c                due to prescribed mechanical loading.  This subroutine
c                multiplies N*FMECH*WTJR
c     Input:                 
c     Output:    FE, portion of the element force vector due to prescribed
c                    mechanical loads.
c     Called by: FORMKF
c     Calls    : 

      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      
      integer       INODE,I,IDOF
      real*8        N(MAXNEN,MXNVAR),FE(MAXNEN,MXNVAR),WTJR,
     *              FMECH(MXNVAR)
           
100   format(' in femech')
          
      do 1 INODE=1,NEN
        do 2 I=1,NDOFPN(INODE)
          IDOF = FDOF(INODE,I)
          FE(INODE,I) = FE(INODE,I) + N(INODE,I)*FMECH(IDOF)*WTJR
2       continue
1     continue
      
      return
      end
      
      subroutine FEOUT(EL,INT,FE)
      
C     Purpose: To print out the element load vector.

      integer   INFIL,OUTFIL,ERRRFL,UFIL,WFIL,BFIL,SHPFIL,POSFIL,
     *          NRFIL,M1RFIL,M2RFIL,M3RFIL,QRFIL,TRFIL,DOCFIL
      parameter(INFIL=10,OUTFIL=11,ERRRFL=12,UFIL=20, WFIL=21, BFIL=22,
     *          SHPFIL=23, POSFIL=24,NRFIL=25,M1RFIL=26,M2RFIL=27,
     *          M3RFIL=28,QRFIL=29,TRFIL=30,DOCFIL=4)
    
    
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      
      integer    INODE,EL,INT,I
      real*8     FE(MAXNEN,MXNVAR)
      
      write(DOCFIL,100) EL,INT
100   format(//' FE for EL=',I4,' and INT=',I4)
      do 1 INODE=1,NEN
         write(DOCFIL,110) INODE
110      format(//' NI=',I5,/)
         do 2 I=1,NDOFPN(INODE)
            write(DOCFIL,120) FE(INODE,I)
120         format(x,e11.4)
2        continue
1     continue

      return
      end
      
      subroutine FETHRM(FE,B,FTHRM,WTJR)
      
c     Name:      Force (Element) due to THerMal loads
c     Purpose:   To calculate the portion of the force vector due to prescribed
C                thermal loads loading.
c     Input:     B(MAXNEN,MXNEPS,MXNVAR),FTHRM(MXNEPS),WTJR
c     Output:    FE, portion of the element force vector due to prescribed
c                    thermal loads.
c     Called by: FORMKF
c     Calls    : 

     
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      
      integer        INODE,I,J
      real*8         FE(MAXNEN,MXNVAR),FTHRM(MXNEPS),
     *               B(MAXNEN,MXNEPS,MXNVAR),WTJR

100   format(//' in fethrm')
      
      do 1 INODE=1,NEN
        do 2 I=1,NDOFPN(INODE)
          do 3 J=1,NEPS
            FE(INODE,I) = FE(INODE,I) -
     *                    B(INODE,J,I)*FTHRM(J)*WTJR
3         continue
2       continue
1     continue
      
      return
      end
      

      subroutine FGOUT(EL)
      
C     Purpose: To print out the global force matrix

      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      real*8           KSKY(MAXLKS), F(MAXNEQ), D(MAXNEQ)
      common /KF/      KSKY,F,D
      save   /KF/
      
      
      integer I,EL

      write(4,120) 
120   format(//' F'//)
      do 2 I=1,NUMEQ
         write(4,130) F(I)
130      format(x,e12.4)
2     continue

      return
      end
      
      
      subroutine FMECHS(FMECH,S)
      
c     Name:      Force  vector due to MECHanical loads Subroutine
c     Purpose:   To calculate the load vector.
c     Input:     S, the meridional arclength coordinate.
c     Output:    The mechanical load vector.
c     Called by: FORMKF
c     Calls    : 


      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      real*8           THICK,PZTOP,PZBOT,N11,N22,M11,M22,
     *                 TEMP0(MAXELM+1), TEMP1(MAXELM+1),
     *                 TEMP2(MAXELM+1),
     *                 MOIST0(MAXELM+1),MOIST1(MAXELM+1),
     *                 MOIST2(MAXELM+1)
     
      common /LOAD/    THICK,PZTOP,PZBOT,N11,N22,M11,M22,
     *                 TEMP0,TEMP1,TEMP2,
     *                 MOIST0,MOIST1,MOIST2
      save   /LOAD/
      
      
      
      integer       I
      real*8        FMECH(MXNVAR),S,LENGTH
      
100   format(' in fmechs')
      
      do 1 I=1,MXNVAR
         FMECH(I) = 0.
1     continue

      LENGTH = XEDGE(NUMEL+1) - XEDGE(1)     

      FMECH(3) = PZTOP + (S-XEDGE(1))/LENGTH * (PZBOT-PZTOP)
      FMECH(4) = M11
      FMECH(5) = M22
     
110   format(/,' FMECH',/,10F9.4)
     
      return
      end
     
     
      
      subroutine FORMKF

c     Name:      FORM the K and F matrices.
c     Purpose:   To form the global K and F matrices.
c     Input:                     
c     Output: 
c     Common:       
c     Called by:
c     Calls    : 


      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      character*10    OTFILE
      logical         BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI
      integer         THEORY,TORORD,OSHPU,OSHPW,OSHPD, NINT,NINTW,NINTD
      common /CONTRL/ BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI,
     *                THEORY,TORORD,OSHPU,OSHPW,OSHPD,NINT,NINTW,NINTD,
     *                OTFILE
      save   /CONTRL/
      
      
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      character*4     SHAPE
      real*8          RAD,R0,ALPHAD,RC,RPHI,PHI0D,RAT0,OFFSET,
     &                CYLEN,CONEHT,PHI1,PHI2,XF,XS
      common /GEOM/   RAD,R0,ALPHAD,RC,RPHI,PHI0D,RAT0,OFFSET,
     &                CYLEN,CONEHT,PHI1,PHI2,XF,XS,SHAPE
      save   /GEOM/
      
      real*8   XIINT(MAXINT,MAXINT), WEIGHTS(MAXINT,MAXINT)
      common /INT/ XIINT,WEIGHTS
      save   /INT/

      
      integer      EL,INT
      
      real*8       LENGTH,JACOB,XI,X,X1,X2,WEIGHT,XPOS,KAPA1,KAPA2,
     *             OA1,OA2,A2D1,R,Z,PHI,
     *             WTJRA1,B(MAXNEN,MXNEPS,MXNVAR),
     *             N(MAXNEN,MXNVAR),
     *             EMAT(MXNEPS,MXNEPS),
     *             KE(MAXNEN,MAXNEN,MXNVAR,MXNVAR),
     *             FMECH(MXNVAR),FTHRM(MXNEPS),
     *             FE(MAXNEN,MXNVAR)
      
      call CLRKF
      
      do 1 EL=1,NUMEL
      
         call CLRKE(KE)
         call CLRFE(FE)
         X2 = XEDGE(EL + 1)
         X1 = XEDGE(EL)
         LENGTH = X2 - X1
         JACOB =  LENGTH * 0.5
         
         
         do 2 INT=1,NINT

            XI = XIINT(NINT,INT)
            WEIGHT = WEIGHTS(NINT,INT)
            X = XPOS(EL,XI)
            call DIMENS(KAPA1,KAPA2,OA1,OA2,A2D1,
     *                  R,Z,PHI,X,.true.)
     
            WTJRA1 = WEIGHT*JACOB*R/OA1
            
            
            call BN(B,N,XI,X,X1,X2,KAPA1,KAPA2,OA1,OA2,A2D1,JACOB)
            call ESUB(EMAT,KAPA1,KAPA2)
        
            call KESUB(KE,B,EMAT,WTJRA1)

            
            if (FCODE) then
               call FMECHS(FMECH,X)            
               call FEMECH(FE,N,FMECH,WTJRA1)
            end if
            
            if (TCODE) then
               call FTHERM(FTHRM,KAPA1,KAPA2,EL,XI,.true.)
               call FETHRM(FE,B,FTHRM,WTJRA1)
            end if
            
            if (MOIST) then
               call FTHERM(FTHRM,KAPA1,KAPA2,EL,XI,.false.)
               call FETHRM(FE,B,FTHRM,WTJRA1)
            end if
            
            
2        continue

        if ((EL .eq. 1) .or. (EL .eq. NUMEL)) then
           call FEDISP(EL,KE,FE)
           call FEEDGT(EL,FE)
        end if     
   

        call KFASSM(EL,KE,FE)
        
        
1     continue           
      
      return 
      end
      
       
            
      subroutine FTHERM(F,KAPA1,KAPA2,EL,XI,THERM)
      
c     Name:      Force  vector due to THeRMal loads
c     Purpose:   To calculate the thermal load vector at point S.  Actually this
c                subroutine just calls the appropriate subroutine depending on
c                the type of material.
c     Input:     S, the meridional arclength coordinate.
c     Output:    FTHRM, the mechanical load vector.
c     Called by: 
c     Calls    : FTHMIS

 
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      real*8           THICK,PZTOP,PZBOT,N11,N22,M11,M22,
     *                 TEMP0(MAXELM+1), TEMP1(MAXELM+1),
     *                 TEMP2(MAXELM+1),
     *                 MOIST0(MAXELM+1),MOIST1(MAXELM+1),
     *                 MOIST2(MAXELM+1)
     
      common /LOAD/    THICK,PZTOP,PZBOT,N11,N22,M11,M22,
     *                 TEMP0,TEMP1,TEMP2,
     *                 MOIST0,MOIST1,MOIST2
      save   /LOAD/
      
      
      logical          HOMOGN
      character*3      MATCODE      
      common /MATCOD/  HOMOGN,MATCODE
      save   /MATCOD/


      
      logical       THERM
      integer       I,EL
      real*8        F(MXNEPS),T0,T1,T2,
     *              KAPA1,KAPA2,XI
      
100   format(' in ftherm, THERM = ',l6)
      
      
      if (THERM) then
         T0=   (TEMP0(EL+1) + TEMP0(EL))/2.
     *        + (TEMP0(EL+1) - TEMP0(EL))*XI/2.
     
         T1=   (TEMP1(EL+1) + TEMP1(EL))/2.
     *       + (TEMP1(EL+1) - TEMP1(EL))*XI/2.
     
         T2=   (TEMP2(EL+1) + TEMP2(EL))/2.
     *       + (TEMP2(EL+1) - TEMP2(EL))*XI/2.
       else
         T0=   (MOIST0(EL+1) + MOIST0(EL))/2.
     *        + (MOIST0(EL+1) - MOIST0(EL))*XI/2.
     
         T1=   (MOIST1(EL+1) + MOIST1(EL))/2.
     *       + (MOIST1(EL+1) - MOIST1(EL))*XI/2.
     
         T2=   (MOIST2(EL+1) + MOIST2(EL))/2.
     *       + (MOIST2(EL+1) - MOIST2(EL))*XI/2.
      end if
        
      
      if (HOMOGN) then
           call FTHHOM(THERM,KAPA1,KAPA2,T0,T1,T2,F) 
         else 
           call FTHLAM(THERM,KAPA1,KAPA2,T0,T1,T2,F) 
      end if
      
110   format(/,' F',/,2(5e12.4/))
            
      return
      end

      subroutine FTHHOM(THERM,KAPA1,KAPA2,THET0S,THET1S,THET2S,FTHRM)
      
c     Name:      Force  vector due to THerMal loads for HOmogenious (through
c                the thickness) materials
c     Purpose:   To calculate the thermal load vector for homgeneous materials
c     Input:     KAPA1,KAPA2: the curvatures at the point.
c                THET0S,THET1S: THETa 0 at S and THETa 1 at S.
c                BETA: The coefficient of thermal expansion for isotropic 
c                 materials.
c     Output:    FTHRM, the mechanical load vector.
c     Called by: FTHERM
c     Calls    : 

      
      integer   INFIL,OUTFIL,ERRRFL,UFIL,WFIL,BFIL,SHPFIL,POSFIL,
     *          NRFIL,M1RFIL,M2RFIL,M3RFIL,QRFIL,TRFIL,DOCFIL
      parameter(INFIL=10,OUTFIL=11,ERRRFL=12,UFIL=20, WFIL=21, BFIL=22,
     *          SHPFIL=23, POSFIL=24,NRFIL=25,M1RFIL=26,M2RFIL=27,
     *          M3RFIL=28,QRFIL=29,TRFIL=30,DOCFIL=4)
    
    
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      character*10    OTFILE
      logical         BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI
      integer         THEORY,TORORD,OSHPU,OSHPW,OSHPD, NINT,NINTW,NINTD
      common /CONTRL/ BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI,
     *                THEORY,TORORD,OSHPU,OSHPW,OSHPD,NINT,NINTW,NINTD,
     *                OTFILE
      save   /CONTRL/
      
      
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      real*8            E,NU,ALPHA,
     &                  C1111,C2222,C3333,C1122,C1133,C2233,
     &                  C1212,C1313,C2323,
     &                  ALPH11,ALPH22,ALPH33,
     &                  BETA11,BETA22,BETA33,THCKNS,
     &                  CI1111,CI2222,CI1122,BITA11,BITA22
      common /HOMMAT/   E,NU,ALPHA,
     &                  C1111,C2222,C3333,C1122,C1133,C2233,
     &                  C1212,C1313,C2323,
     &                  ALPH11,ALPH22,ALPH33,
     &                  BETA11,BETA22,BETA33,THCKNS,
     &                  CI1111,CI2222,CI1122,BITA11,BITA22
      save   /HOMMAT/
      
      
      logical       THERM
      integer       I

      real*8        FTHRM(MXNEPS),THET0S,THET1S,THET2S,H,H2,H3,H5,
     *              KAPA1,KAPA2,H3O12,H5O80,
     *              H3K1,H3K2,H5K1,H5K2,H3K1K2,H5K1K2,H3K1PK2,H5K1PK2,
     *              K1K2,K1PK2,TN11,TN22,TM111,TM122,
     *              T0T,T1T,T2T,TM211,TM222,TM311,TM322
      
100   format(' in fthhom')
      
      do 1 I=1,MXNEPS
         FTHRM(I) = 0.
1     continue

     
      H     = THCKNS
      H2    = H*H
      H3    = H2*H
      H5    = H2*H3
      
      H3O12  = H3/12.
      H5O80  = H5/80.
      
      K1K2   = KAPA1*KAPA2
      K1PK2  = KAPA1 + KAPA2
      
      if (TORORD .eq. 2) then
      
         H3K1 = H3O12*KAPA1
         H3K2 = H3O12*KAPA2
         H5K1 = H5O80*KAPA1
         H5K2 = H5O80*KAPA2
         H3K1K2  = H3O12*KAPA1*KAPA2
         H5K1K2  = H5O80*KAPA1*KAPA2
         H3K1PK2 = H3O12*(KAPA1 + KAPA2)
         H5K1PK2 = H5O80*(KAPA1 + KAPA2)
         
       else if (TORORD .eq. 1) then
       
         H3K1 = H3O12*KAPA1
         H3K2 = H3O12*KAPA2
         H5K1 = H5O80*KAPA1
         H5K2 = H5O80*KAPA2
         H3K1K2  = 0.
         H5K1K2  = 0.
         H3K1PK2 = H3O12*(KAPA1 + KAPA2)
         H5K1PK2 = H5O80*(KAPA1 + KAPA2)

       else if (TORORD .eq. 0) then
       
         H3K1 = 0.
         H3K2 = 0.
         H5K1 = 0.
         H5K2 = 0.
         H3K1K2  = 0.
         H5K1K2  = 0.
         H3K1PK2 = 0.
         H5K1PK2 = 0.
         
       else
         call ERROR('FTHHOM',' TORORD must be 0,1,2')
      
      end if
      
      
      TN11 = BETA11*(H*THET0S + H3K2*THET1S)
      TN22 = BETA22*(H*THET0S + H3K1*THET1S)
      
      TM111 = BETA11*(H3O12*THET1S + H3K2*THET0S)
      TM122 = BETA22*(H3O12*THET1S + H3K1*THET0S)
      
      FTHRM(1) = TN11
      FTHRM(2) = TN22
      FTHRM(5) = TM111
      FTHRM(6) = TM122
      
      if (NEPS .ge. 11) then
      
         T0T = BETA33*(H*THET0S + (H3K1PK2*THET1S + H3K1K2*THET0S))
         T1T = BETA33 * ((H3O12*THET1S + H3K1PK2*THET0S)
     *                         + H5K1K2*THET1S)
         
         FTHRM(11) = T0T
         FTHRM(14) = T1T
         
         if (NEPS .ge. 15) then
      
            TM211 = BETA11*(H3O12*THET0S + H5K2*THET1S)
            TM222 = BETA22*(H3O12*THET0S + H5K1*THET1S)
            
            TM311 = BETA11*(H5O80*THET1S + H5K2*THET0S)
            TM322 = BETA22*(H5O80*THET1S + H5K1*THET0S)
            
            T2T = BETA33*(H3O12*THET0S
     *                + (H5K1PK2*THET1S + H5K1K2*THET0S))            
            
            FTHRM(15) = TM211
            FTHRM(16) = TM222
            FTHRM(19) = TM311
            FTHRM(20) = TM322
            FTHRM(27) = T2T
            
         end if
            
      end if
           
      return
      end
     

      subroutine FTHLAM(THERM,KAPA1,KAPA2,T0,T1,T2,F)
      
c     Name:      Force  vector due to THerMal loads for HOmogenious (through
c                the thickness) materials
c     Purpose:   To calculate the thermal load vector for homgeneous materials
c     Input:     KAPA1,KAPA2: the curvatures at the point.
c                THET0S,THET1S: THETa 0 at S and THETa 1 at S.
c                BETA: The coefficient of thermal expansion for isotropic 
c                 materials.
c     Output:    F, the thermal (if THERM=.true) or
c                moisture (if THERM = .false) expansion load vector.
c     Called by: FTHERM
c     Calls    : 

      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      character*10    OTFILE
      logical         BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI
      integer         THEORY,TORORD,OSHPU,OSHPW,OSHPD, NINT,NINTW,NINTD
      common /CONTRL/ BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI,
     *                THEORY,TORORD,OSHPU,OSHPW,OSHPD,NINT,NINTW,NINTD,
     *                OTFILE
      save   /CONTRL/
      
      
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      real*8          BTTN11(0:6),BTTN22(0:6),BTTN12(0:6),
     &                BTTN33(0:6),
     &                BTMN11(0:6),BTMN22(0:6),BTMN12(0:6),
     &                BTMN33(0:6)
     
      common /LAMECF/ BTTN11,BTTN22,BTTN12,BTTN33,
     &                BTMN11,BTMN22,BTMN12,BTMN33

      save   /LAMECF/

      
      logical       THERM
      integer       I

      real*8        F(MXNEPS),T0,T1,T2,KAPA1,KAPA2,
     &              K1,K2,K1K2,K1PK2,
     &              TR11(0:3),TR12(0:3),TR21(0:3),TR22(0:3),
     &              TR33(0:2),
     &              B11(0:6),B22(0:6),B12(0:6),B33(0:6)
      
100   format(' in fthmis')
      
      do 1 I=1,MXNEPS
         F(I) = 0.
1     continue

     
            
      if (TORORD .eq. 2) then
        K1    = KAPA1
        K2    = KAPA2
        K1PK2 = KAPA1 + KAPA2
        K1K2  = KAPA1*KAPA2
       else if (TORORD .eq. 1) then
        K1    = KAPA1
        K2    = KAPA2
        K1PK2 = KAPA1 + KAPA2
        K1K2  = 0.
       else if (TORORD .eq. 0) then
        K1    = 0.
        K2    = 0.
        K1PK2 = 0.
        K1K2  = 0.
       else
         call ERROR('FTHHOM',' TORORD must be 0,1,2')
      
      end if
      
      if (THERM) then
         do 4 I=0,6
            B11(I) = BTTN11(I)
            B22(I) = BTTN22(I)
            B12(I) = BTTN12(I)
            B33(I) = BTTN33(I)
4        continue
       else
         do 5 I=0,6      
            B11(I) = BTMN11(I)
            B22(I) = BTMN22(I)
            B12(I) = BTMN12(I)
            B33(I) = BTMN33(I)
5        continue
      end if
      
      do 2 I=0,3
      
         TR11(I) = T0*B11(I) + (K2*T0 + T1)*B11(I+1)
     &                       + (K2*T1 + T2)*B11(I+2)
     &                       + (K2*T2)     *B11(I+3)
         TR12(I) = T0*B12(I) + (K2*T0 + T1)*B12(I+1)
     &                       + (K2*T1 + T2)*B12(I+2)
     &                       + (K2*T2)     *B12(I+3)
         TR21(I) = T0*B12(I) + (K1*T0 + T1)*B12(I+1)
     &                       + (K1*T1 + T2)*B12(I+2)
     &                       + (K1*T2)     *B12(I+3)
         TR22(I) = T0*B22(I) + (K1*T0 + T1)*B22(I+1)
     &                       + (K1*T1 + T2)*B22(I+2)
     &                       + (K1*T2)     *B22(I+3)
  
2     continue


            
      F(1) = TR11(0)
      F(2) = TR22(0)
      F(3) = TR21(0)
      F(4) = TR12(0)
      F(5) = TR11(1)
      F(6) = TR22(1)
      F(7) = TR21(1)
      F(8) = TR12(1)
      
      if (NEPS .ge. 11) then
      
         do 3 I=0,2
         
            TR33(I) =    T0                      *B33(I)
     &                + (T1 + K1PK2*T0)          *B33(I+1)
     &                + (T2 + K1PK2*T1 + K1K2*T0)*B33(I+2)
     &                + (     K1PK2*T2 + K1K2*T1)*B33(I+3)
     &                + (                K1K2*T2)*B33(I+4)
         
3        continue


         F(11) = TR33(0)
         F(14) = TR33(1)
         
         
         if (NEPS .ge. 15) then
      
            
            F(15) = TR11(2)
            F(16) = TR22(2)
            F(17) = TR21(2)
            F(18) = TR12(2)
            F(19) = TR11(3)
            F(20) = TR22(3)
            F(21) = TR21(3)
            F(22) = TR12(3)            
            F(27) = TR33(2)
            
         end if
            
      end if
           
      return
      end

      

      subroutine IDIEN
      
c     Name:      ID and IEN
c     Purpose:   To calculate the ID, IEN, and JDIAG matrices.
c     Common:    BC,CONTRL,ELDAT1,ELDAT2,
c     Input:     BCCDT,BCCDB,OSHPU,OSHPW,OSHPD,NUMEL,XEDGE(position of edge nodes),
c                from the commons.
c     Output:    XNODE:  position of all nodes
c                ID(MXNVAR,MAXNOD)    : ID array.  The I,J'th element is the
c                    global equation number corrosponding to the I'th variable
c                    for the J'th global node
c                IEN(MAXNEN,MAXELM)  : IEN array.  The I,J'th element is the
c                    global node number of the I'th local node of the J'th
c                    element.
c                NEN : Number of nodes/element
c                NUMNOD: NUMber of NODes
c                JDIAG(MAXNEQ): Pointer array to determine the location in the
c                    skyline profile global K matrix of diagonal pivots.  The
c                    I'th element of JDIAG(I)  is the location in skyline K of 
c                    the diagonal element K(I,I).
c     Called by:
c     Calls    : L121,ERROR


      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      integer     BCTYPE(2),BCCODE(2,MXNBC)
      real*8      UBC(2,MXNVAR),TBC(2,MXNVAR)
      common /BC/ BCTYPE,BCCODE,UBC,TBC
      save /BC/
      
      
      character*10    OTFILE
      logical         BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI
      integer         THEORY,TORORD,OSHPU,OSHPW,OSHPD, NINT,NINTW,NINTD
      common /CONTRL/ BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI,
     *                THEORY,TORORD,OSHPU,OSHPW,OSHPD,NINT,NINTW,NINTD,
     *                OTFILE
      save   /CONTRL/
      
      
      integer      TERM,ERRFIL
      common /IO/  TERM,ERRFIL
      save   /IO/
      
      
      
      integer I,J,LOCNOD,DOF,EL,EQNUM,MINEQ,GEQNO,I2
    
      
comment: Find the number of nodes per element (NEN) and the FDOF array.
c        The element FDOF(I,J) is the number of the J'th degree of freedom
c        of the I'th local node.
         
      if (OSHPU .eq. 1) then
           if (OSHPW .eq. 2) then
                if (OSHPD .eq. 1) then
                     call L121(NVAR,NRBM,NEN,NDOFPN,FDOF)
                   else
                     call ERROR('IDIEN     ',
     *                          'Improper OHSP''s               ')
                end if
              else 
                call ERROR('IDIEN     ',
     *                     'Improper OHSP''s               ')
           end if           
        else
           call ERROR('IDIEN     ',
     *                'Improper OHSP''s               ')
      end if
      
comment: Determine the IEN array.
      
      do 1 J=1,NUMEL
           do 1 I=1,NEN
                IEN(I,J) = I + (J-1)*(NEN-1)
1     continue

      NUMNOD = NUMEL*(NEN-1) + 1
      
      if (NUMNOD .gt. MAXNOD) then
         call ERROR('IDIEN     ','NUMNOD>MAXNOD.Increase MAXNOD. ')
      end if


      
comment:  Determine the ID array in four steps.
c         1) First initialize ID.
c         2) Then, enter ones for spaces in the ID array that are true
c         degrees of freedom.  Information determining whether or not a space
c         in the ID array corrosponds to a true degree of freedom comes from
c         the FDOF array.
c         3) Next, enter zeros for the degrees of freedom that are prescribed
c         by the boundary conditions.
c         4) Then fill the remaining blanks with incrementing integers.

comment: step 1)

      do 2 I=1,MXNVAR
           do 3 J=1,NUMNOD
                ID(I,J) = 0
3          continue
2     continue


comment: step 2)

      do 4 LOCNOD=1,NEN
         do 5 I=1,NDOFPN(LOCNOD)
            do 6 EL=1,NUMEL
               ID(FDOF(LOCNOD,I),IEN(LOCNOD,EL)) = 1
6           continue
5        continue
4     continue
            
          
comment: step 3) 
          
      do 7 DOF=1,NBC
           if (BCCODE(1,DOF) .eq. 1) ID(DOF,1)      = 0
           if (BCCODE(2,DOF) .eq. 1) ID(DOF,NUMNOD) = 0
7     continue

     
comment: step 4)

      EQNUM = 1
      
      do 8 J=1,NUMNOD
           do 8 I=1,NVAR+NRBM
                if (ID(I,J) .eq. 1) then
                     ID(I,J) = EQNUM
                     EQNUM = EQNUM +1
                end if
8     continue

      NUMEQ = EQNUM-1
      
      if (NUMEQ .gt. MAXNEQ) then
         call ERROR('IDIEN     ','NUMEQ>MAXNEQ.Increase MAXNEQ.  ')                ')
      end if

      
comment: Interpolate to find the position of all nodes.

      do 17 I=1,NUMEL+1
         XNODE(2*I-1) = XEDGE(I)
17    continue

      do 18 I=1,NUMEL
          I2 = I*2
          XNODE(I2) = (XNODE(I2-1) + XNODE(I2+1)) * 0.5
18    continue
         
      
      
comment: Calculate the JDIAG array in two steps: 1) Find the row number of the
c        first non-zero element in each column of the global K matrix and
c        temporarily store this number in JDIAG.  This requires two steps: 1a)
c        For each element, find the minimum global equation number associated
c        with that element. 1b) Store this minimum in the appropriate element
c        of JDIAG if it is less than the value already there.  2)  Use this
c        information to put the proper values into JDIAG.

comment: initialize JDIAG

      do 10 I=1,NUMEQ
         JDIAG(I) = MAXNEQ
10    continue

comment: step 1a)

      do 11 EL=1,NUMEL
      
         MINEQ = MAXNEQ
         do 12 LOCNOD=1,NEN
            do 13 I=1,NDOFPN(LOCNOD)
               DOF = FDOF(LOCNOD,I)
               GEQNO = ID(DOF,IEN(LOCNOD,EL))
               if ((GEQNO .ne. 0) .and. (GEQNO .lt. MINEQ)) then
                  MINEQ = GEQNO
               end if
13          continue
12       continue

comment: step 1b)

         do 14 LOCNOD=1,NEN
            do 15 I=1,NDOFPN(LOCNOD)
               DOF = FDOF(LOCNOD,I)
               GEQNO = ID(DOF,IEN(LOCNOD,EL))
               if (GEQNO .ne. 0) JDIAG(GEQNO) = min0(MINEQ,JDIAG(GEQNO))
15          continue
14       continue

11     continue


comment: step 2)

      do 16 I=2,NUMEQ
         JDIAG(I) = JDIAG(I-1) + (I-JDIAG(I)) + 1
16    continue

      LNKSKY = JDIAG(NUMEQ)
      
      if (LNKSKY .gt. MAXLKS) then
         write (ERRFIL,100) LNKSKY
100      format(' LNKSKY = ',i8)         
         call ERROR('IDIEN     ','LNKSKY>MAXLKS.Increase MAXLKS  ')
      end if

   
      return
      end
   
       subroutine INPUT
      
      

c     Name:      Input
c     Purpose:   To read input data from a file and make preliminary cal-
c                culations.
c     Common:    TITLE,ELMDAT1,ELMDAT2,ISOMAT,LAMMAT,GEOM,MATCOD,LOAD,BC,CONTRL
c     Input:     Data from the file 'INPUT.DAT'
c                
c     Output:    Date to the commons
c     Called by:
c     Calls    : NODEIN,NODECALC,ERROR
c                                                                      |
c*******************************************************************************
      
      integer   INFIL,OUTFIL,ERRRFL,UFIL,WFIL,BFIL,SHPFIL,POSFIL,
     *          NRFIL,M1RFIL,M2RFIL,M3RFIL,QRFIL,TRFIL,DOCFIL
      parameter(INFIL=10,OUTFIL=11,ERRRFL=12,UFIL=20, WFIL=21, BFIL=22,
     *          SHPFIL=23, POSFIL=24,NRFIL=25,M1RFIL=26,M2RFIL=27,
     *          M3RFIL=28,QRFIL=29,TRFIL=30,DOCFIL=4)
    
    
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer     BCTYPE(2),BCCODE(2,MXNBC)
      real*8      UBC(2,MXNVAR),TBC(2,MXNVAR)
      common /BC/ BCTYPE,BCCODE,UBC,TBC
      save /BC/
      
      
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      integer      TERM,ERRFIL
      common /IO/  TERM,ERRFIL
      save   /IO/
      
      logical          HOMOGN
      character*3      MATCODE      
      common /MATCOD/  HOMOGN,MATCODE
      save   /MATCOD/


      real*8          DISP(MAXNOD,MXNVAR)
      
      common /OUT/    DISP
      save   /OUT/


      
      integer      EDGENO,DOF
   
      ERRFIL = ERRRFL
      
      call INRED('INPUT.DAT')
      
      if (.not. HOMOGN) then
         call LAMCOF
      end if
      
      call ZEROR2(DISP, MAXNOD, MXNVAR)
      
      do 3 EDGENO=1,2
         do 2 DOF=1, NBC
           if (BCCODE(EDGENO,DOF) .eq. 1) then
              DISP(EDGENO,DOF) = UBC(EDGENO,DOF)
           end if      
2        continue
3     continue

      
      return
      end
      
      
      subroutine INTDAT
      
c     Name:      INTegration DATa
c     Purpose:   To enter the Gaussian integration points and corrosponding
c                weights into INT common.
c     Common:    INT
c     Input:     none
c     Output:    XIINT(MAXINT,MAXINT), XI INTegration point.  The I,J'th element
c                   is the J'th local integration coordinate for NINT=I.
c                WEIGHTS(MAXINT,MAXINT), Integration WEIGHTS.  The I,J'th element
c                   is the J'th Gaussian weighting factor for NINT=I.
c     Called by:
c     Calls    : 

      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      real*8   XIINT(MAXINT,MAXINT), WEIGHTS(MAXINT,MAXINT)
      common /INT/ XIINT,WEIGHTS
      save   /INT/

      
      XIINT(1,1) = 0.            
      WEIGHTS(1,1) = 2.
c      
      
      XIINT(2,1) = -1./sqrt(3.)  
      WEIGHTS(2,1) = 1.
      
      XIINT(2,2) = -XIINT(2,1)  
      WEIGHTS(2,2) = 1.
c      
      
      XIINT(3,1) = -sqrt(3./5.)  
      WEIGHTS(3,1) = 5./9.
      
      XIINT(3,2) = 0.            
      WEIGHTS(3,2) = 8./9.
      
      XIINT(3,3) = -XIINT(3,1)   
      WEIGHTS(3,3) = WEIGHTS(3,1)
      
      return
      end
      
      
      
      
      
      subroutine KEOUT(EL,INT,KE)
      
c     Purpose: To print KE

      
      integer   INFIL,OUTFIL,ERRRFL,UFIL,WFIL,BFIL,SHPFIL,POSFIL,
     *          NRFIL,M1RFIL,M2RFIL,M3RFIL,QRFIL,TRFIL,DOCFIL
      parameter(INFIL=10,OUTFIL=11,ERRRFL=12,UFIL=20, WFIL=21, BFIL=22,
     *          SHPFIL=23, POSFIL=24,NRFIL=25,M1RFIL=26,M2RFIL=27,
     *          M3RFIL=28,QRFIL=29,TRFIL=30,DOCFIL=4)
    
    
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      
      integer      I,J,NI,NJ,EL,INT
      real*8       KE(MAXNEN,MAXNEN,MXNVAR,MXNVAR)
      
      write(DOCFIL,101) EL,INT
101   format(//' Ke    EL:',I3,'  INT:',I3/)
      
        do 1 NI=1,NEN
          do 1 NJ=NI,NEN
            write(DOCFIL,102) NI,NJ
102         format(//' NI=',I5,'   NJ=',I5/)
            do 1 I=1,NDOFPN(NI)
                write(DOCFIL,100) (KE(NI,NJ,I,J), J=1,NDOFPN(NJ))
100             format(10(X,e11.4))
1       continue

      return
      end

      
       subroutine KESHRT(KE,B,EMAT,WTJR)
      
c     Name:      K (Element stiffness matrix) SHoRT subroutine
c     Purpose:   To calculate Ke by multiplying Bt*EMAT*B * Weight*J*R using
c                fewer calculations
c     Common:    
c     Input:     B(NEN,MXNEPS,MXNVAR), B matrix
c                EMAT(MXNEPS,MXNEPS), stiffness matrix
c                WTJ, weight*j*R
c     Output:    KE(MAXNEN,MAXNEN,MXNVAR,MXNVAR), K Element 
c     Called by: FORMKF
c     Calls    : 

      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      
      integer      I,J
      real*8       KE(MAXNEN,MAXNEN,MXNVAR,MXNVAR),WTJR,
     *             B(MAXNEN,MXNEPS,MXNVAR),EMAT(MXNEPS,MXNEPS),
     *             B1(MXNEPS,MXNVAR),B2(MXNEPS,MXNVAR),
     *             B3(MXNEPS,MXNVAR),KES(MXNVAR,MXNVAR)
 
      do 1 I=1,MXNEPS
         do 2 J=1,MXNVAR
            B1(I,J) = 0.
            B2(I,J) = 0.
            B3(I,J) = 0.
2        continue
1     continue

      do 4 I=1,NEPS
         do 5 J=1,NDOFPN(1)
            B1(I,J) = B(1,I,J)
5        continue
         do 6 J=1,NDOFPN(2)
            B2(I,J) = B(2,I,J)
6        continue
         do 7 J=1,NDOFPN(3)
            B3(I,J) = B(3,I,J)
7        continue
4     continue

      call B1EB1(B1,EMAT,KES)
      do 8 I=1,NDOFPN(1)
         do 9 J=1,NDOFPN(1)
            KE(1,1,I,J) = KE(1,1,I,J) + KES(I,J)*WTJR
9        continue
8     continue

      call B1EB2(B1,B2,EMAT,KES)
      do 10 I=1,NDOFPN(1)
         do 11 J=1,NDOFPN(2)
            KE(1,2,I,J) = KE(1,2,I,J) + KES(I,J)*WTJR
11        continue
10     continue


      call B1EB3(B1,B3,EMAT,KES)
      do 12 I=1,NDOFPN(1)
         do 13 J=1,NDOFPN(3)
            KE(1,3,I,J) = KE(1,3,I,J) + KES(I,J)*WTJR
13        continue
12     continue


      call B2EB2(B2,EMAT,KES)
      do 14 I=1,NDOFPN(2)
         do 15 J=1,NDOFPN(2)
            KE(2,2,I,J) = KE(2,2,I,J) + KES(I,J)*WTJR
15        continue
14     continue

      call B1EB2(B3,B2,EMAT,KES)
      do 16 I=1,NDOFPN(2)
         do 17 J=1,NDOFPN(3)
            KE(2,3,I,J) = KE(2,3,I,J) + KES(J,I)*WTJR
17        continue
16     continue

 
      call B1EB1(B3,EMAT,KES)
      do 18 I=1,NDOFPN(3)
         do 19 J=1,NDOFPN(3)
            KE(3,3,I,J) = KE(3,3,I,J) + KES(I,J)*WTJR
19       continue
18    continue

      return
      end
      
      
 
      subroutine KESUB(KE,B,EMAT,WTJR)
      
c     Name:      K (Element stiffness matrix) SUBroutine
c     Purpose:   To calculate Ke by multiplying Bt*EMAT*B * Weight*J*R
c     Common:    
c     Input:     B(NEN,MXNEPS,MXNVAR), B matrix
c                EMAT(MXNEPS,MXNEPS), stiffness matrix
c                WTJ, weight*j*R
c     Output:    KE(MAXNEN,MAXNEN,MXNVAR,MXNVAR), K Element 
c     Called by: FORMKF
c     Calls    : 

      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      character*10    OTFILE
      logical         BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI
      integer         THEORY,TORORD,OSHPU,OSHPW,OSHPD, NINT,NINTW,NINTD
      common /CONTRL/ BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI,
     *                THEORY,TORORD,OSHPU,OSHPW,OSHPD,NINT,NINTW,NINTD,
     *                OTFILE
      save   /CONTRL/
      
      
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      
      integer      NI,NJ,I,J,K,L
      real*8       KE(MAXNEN,MAXNEN,MXNVAR,MXNVAR), WTJR,
     *             B(MAXNEN,MXNEPS,MXNVAR),EMAT(MXNEPS,MXNEPS)

      if (KSHORT) then
         call KESHRT(KE,B,EMAT,WTJR)
       else

         do 1 NI=1,NEN
           do 2 NJ=NI,NEN
             do 3 I=1,NDOFPN(NI)
               do 4 J=1,NDOFPN(NJ)
                 do 5 K=1,NEPS
                   do 6 L=1,NEPS
                     KE(NI,NJ,I,J) = KE(NI,NJ,I,J) + 
     *                            B(NI,K,I)*EMAT(K,L)*B(NJ,L,J)*WTJR
6                  continue
5                continue
4              continue
3            continue
2          continue
1        continue

      end if
      
      return
      end
      
      subroutine KFASSM(EL,KE,FE)
      
c     Name:      K and F ASSeMble
c     Purpose:   To assemble the element K matrices into the KSKYline array, and
c                FE into the global F matrix.
c     Common:    ELMDAT, KF
c     Input:     EL, the ELement number;  KE, the element stiffness matrix.
c                FE, the element load vector.
c     Output:    The KSKY array with the element matrix added to it.
c                F, the load vector with FE added to it.
c     Called by: KFCYLN  
c     Calls    : 

      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      real*8           KSKY(MAXLKS), F(MAXNEQ), D(MAXNEQ)
      common /KF/      KSKY,F,D
      save   /KF/
      
      
      integer  INODE,JNODE,I,J,IDOF,JDOF,IGEQNO,JGEQNO,POINT,EL
      real*8   KE(MAXNEN,MAXNEN,MXNVAR,MXNVAR), FE(MAXNEN,MXNVAR)
      
      
      do 1 INODE=1,NEN
        do 2 I=1,NDOFPN(INODE)
          IDOF = FDOF(INODE,I)
          IGEQNO = ID(IDOF,IEN(INODE,EL))
          if (IGEQNO .ne. 0) then
            F(IGEQNO) = F(IGEQNO) + FE(INODE,I)
            do 3 JNODE =INODE,NEN
              do 4 J=1,NDOFPN(JNODE)
                JDOF = FDOF(JNODE,J)
                JGEQNO = ID(JDOF,IEN(JNODE,EL))
                if ((JGEQNO .ne. 0) .and. (JGEQNO .ge. IGEQNO)) then
                  POINT  = JDIAG(JGEQNO) - (JGEQNO - IGEQNO)
                  KSKY(POINT) = KSKY(POINT) + KE(INODE,JNODE,I,J)
                end if
4             continue
3           continue
          end if
2       continue
1     continue


      return
      end
      
      
      subroutine KGOUT(EL)
      
C     Purpose: To print out the global stiffness matrix

      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      real*8           K(MAXNEQ,MAXNEQ)
      common /KBIG/    K
      save   /KBIG/
 
 
      
      integer EL
      
      
      write(4,100) EL
100   format(//' In KGOUT.    EL=',I5,//' K'//)

      call BIGOUT(K,MAXNEQ,NUMEQ,4)
      
      return
      end
      
      
      subroutine KSKYO(EL)
      
C     Purpose: To print out the global skyline stiffness array

      
      integer   INFIL,OUTFIL,ERRRFL,UFIL,WFIL,BFIL,SHPFIL,POSFIL,
     *          NRFIL,M1RFIL,M2RFIL,M3RFIL,QRFIL,TRFIL,DOCFIL
      parameter(INFIL=10,OUTFIL=11,ERRRFL=12,UFIL=20, WFIL=21, BFIL=22,
     *          SHPFIL=23, POSFIL=24,NRFIL=25,M1RFIL=26,M2RFIL=27,
     *          M3RFIL=28,QRFIL=29,TRFIL=30,DOCFIL=4)
    
    
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      real*8           KSKY(MAXLKS), F(MAXNEQ), D(MAXNEQ)
      common /KF/      KSKY,F,D
      save   /KF/
      
      
      integer I,EL
      
      write(DOCFIL,100) EL
100   format(//' In KSKYO.    EL=',I5,//' KSKY'//)

      do 1 I=1,LNKSKY      
        write(DOCFIL,110) KSKY(I) 
1     continue
110   format(e12.4) 

      return
      end
      
      
      subroutine KSTEST
      
c     Purpose:  To test the skyline solver


      integer   INFIL,OUTFIL,ERRRFL,UFIL,WFIL,BFIL,SHPFIL,POSFIL,
     *          NRFIL,M1RFIL,M2RFIL,M3RFIL,QRFIL,TRFIL,DOCFIL
      parameter(INFIL=10,OUTFIL=11,ERRRFL=12,UFIL=20, WFIL=21, BFIL=22,
     *          SHPFIL=23, POSFIL=24,NRFIL=25,M1RFIL=26,M2RFIL=27,
     *          M3RFIL=28,QRFIL=29,TRFIL=30,DOCFIL=4)
    
    
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      real*8           KSKY(MAXLKS), F(MAXNEQ), D(MAXNEQ)
      common /KF/      KSKY,F,D
      save   /KF/
      
      real*8           K(MAXNEQ,MAXNEQ)
      common /KBIG/    K
      save   /KBIG/
 
 
      
      integer      I,J
      real*8       FTEST(MAXNEQ)

      write(DOCFIL,100) 
100   format(//' D'/)

      do 1 I=1,NUMEQ
         write(DOCFIL,110) D(I)
110      format(x,e11.4)
1     continue

      do 2 I=1,NUMEQ
          FTEST(I) = 0.
          do 3  J=1,NUMEQ
             FTEST(I) = FTEST(I) + K(I,J)*D(J)
3         continue
2     continue


      write(DOCFIL,120) 
120   format(//4X,' F',8X,'FTEST'/)

      do 4 I=1,NUMEQ
         write(DOCFIL,130) F(I),FTEST(I)
130      format(x,2(e11.4,X))
4     continue

      return
      end
      
      subroutine L121(NVAR,NRBM,NENDUM,NDOFPN,FDOF)
      
      
c     Name:      Logical Degree Of Freedom map (OSHPU=1,OSHPW=2,OSHPD=1)
c     Purpose:   To calculate NEN (NENDUM is the dummy variable),LDOF,and
c                NDOFPN for the given element
c     Common:    None
c     Input:    
c     Output:    NEN: Number of nodes per element (integer)
c
c                FDOF(MAXNEN,MXNVAR): Free Degree Of Freedom array.  The element
c                  FDOF(I,J) is the number of the J'th degree of freedom
c                  of the I'th local node.

c     Called by: IDIEN
c     Calls    : 

      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      character*10    OTFILE
      logical         BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI
      integer         THEORY,TORORD,OSHPU,OSHPW,OSHPD, NINT,NINTW,NINTD
      common /CONTRL/ BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI,
     *                THEORY,TORORD,OSHPU,OSHPW,OSHPD,NINT,NINTW,NINTD,
     *                OTFILE
      save   /CONTRL/
      
      
      
      integer      J,NDOFPN(MAXNEN),NENDUM,FDOF(MAXNEN,MXNVAR),
     *             NVAR,NRBM,IRBM
      
      NENDUM = 3
                                     
      do 1 J=1,NVAR
         FDOF(1,J) = J
         FDOF(3,J) = J
1     continue

      FDOF(2,1) = 3
      
      if (RIGID) then
         do 3 IRBM = 1,NRBM
            FDOF(2,1 + IRBM) = NVAR +IRBM
3        continue
      end if
      
      do 2 J=2+NRBM,NVAR+NRBM
         FDOF(2,J) = 0
2     continue
         
      NDOFPN(1) = NVAR
      NDOFPN(2) = 1 + NRBM
      NDOFPN(3) = NVAR
            
      return
      end
      
      subroutine LAMCOF
c                                                                             *
c                                                                             *
c                                                                             *
c     Name:      LAMinate COeFficients                                        *
c     Purpose:   To calculate the laminate stiffness and expansion            *
c                coefficients                                                 *
c     Input:     Material Properties from the file MAT.DAT                    *
c     Output:    The laminate coefficients in the common LAMCOF               *
c     Called by: INPUT                                                        *
c     Calls    :                                                              *
c     Common:                                                                 *
c                                                                      |      *
c******************************************************************************
 

      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer   INFIL,OUTFIL,ERRRFL,UFIL,WFIL,BFIL,SHPFIL,POSFIL,
     *          NRFIL,M1RFIL,M2RFIL,M3RFIL,QRFIL,TRFIL,DOCFIL
      parameter(INFIL=10,OUTFIL=11,ERRRFL=12,UFIL=20, WFIL=21, BFIL=22,
     *          SHPFIL=23, POSFIL=24,NRFIL=25,M1RFIL=26,M2RFIL=27,
     *          M3RFIL=28,QRFIL=29,TRFIL=30,DOCFIL=4)
    
    
      real*8     PI,PIODEG
      parameter (PI=3.14159265, PIODEG = 0.0174532952)
      
      
      character*10    OTFILE
      logical         BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI
      integer         THEORY,TORORD,OSHPU,OSHPW,OSHPD, NINT,NINTW,NINTD
      common /CONTRL/ BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI,
     *                THEORY,TORORD,OSHPU,OSHPW,OSHPD,NINT,NINTW,NINTD,
     *                OTFILE
      save   /CONTRL/
      
      
      logical           SYM
      integer           NSTACK,MATNO(MAXSTK),NPLY(MAXSTK)
      real*8            LTHKNS,PTHK(MAXSTK),THETA(MAXSTK),STHKNS(MAXSTK)
     
      common  /LAYUP/   SYM,
     &                  NSTACK,MATNO,NPLY,
     &                  LTHKNS,PTHK,THETA,STHKNS
 
      save    /LAYUP/
      
      
      logical         MATLOG(MAXMAT)
      
      character*30    MATNAM(MAXMAT)
      
      integer         NMAT,MATTYP(MAXMAT)
      
      real*8          E1(MAXMAT),E2(MAXMAT),E3(MAXMAT),
     &                NU12(MAXMAT),NU13(MAXMAT),NU23(MAXMAT),
     &                G12(MAXMAT),G13(MAXMAT),G23(MAXMAT),
     &                ALPHT1(MAXMAT),ALPHT2(MAXMAT),ALPHT3(MAXMAT),
     &                ALPHM1(MAXMAT),ALPHM2(MAXMAT),ALPHM3(MAXMAT)
 
      common /MATPRP/
     &                E1,E2,E3,
     &                NU12,NU13,NU23,
     &                G12,G13,G23,
     &                ALPHT1,ALPHT2,ALPHT3,
     &                ALPHM1,ALPHM2,ALPHM3,
     &                NMAT,MATTYP,
     &                MATLOG, MATNAM

 
      save  /MATPRP/

      real*8          BTTN11(0:6),BTTN22(0:6),BTTN12(0:6),
     &                BTTN33(0:6),
     &                BTMN11(0:6),BTMN22(0:6),BTMN12(0:6),
     &                BTMN33(0:6)
     
      common /LAMECF/ BTTN11,BTTN22,BTTN12,BTTN33,
     &                BTMN11,BTMN22,BTMN12,BTMN33

      save   /LAMECF/

      real*8           CN1111(0:8),CN2222(0:8),CN1122(0:8),
     &                 CN1212(0:8),CN1112(0:8),CN2212(0:8),
     &                 CN1133(0:6),CN2233(0:6),CN1233(0:6),
     &                 CN1313(0:8),CN2323(0:8),CN1323(0:8),
     &                 CN3333(0:6)
     
      common /LAMSCF/  CN1111,CN2222,CN1122,
     &                 CN1212,CN1112,CN2212,
     &                 CN1133,CN2233,CN1233,
     &                 CN1313,CN2323,CN1323,CN3333

      save   /LAMSCF/

      
      integer     STK,N,MAT
      
      real*8      CP1111,CP2222,CP3333,
     &            CP1122,CP1133,CP2233,CP1212,CP1313,CP2323,
     &            C1111,C2222,C3333,
     &            C1122,C1133,C1233,C2233,C1212,C1112,C2212,
     &            C1313,C2323,C1323,
     &            BTPT11,BTPT22,BTPT33,BTPM11,BTPM22,BTPM33,T,
     &            BETT11,BETT22,BETT12,BETT33,
     &            BETM11,BETM22,BETM12,BETM33,
     &            ZK,ZK2,ZK3,ZK4,ZK5,ZK6,ZK7,ZK8,ZK9,
     &            ZKM1,ZKM12,ZKM13,ZKM14,ZKM15,ZKM16,
     &            ZKM17,ZKM18,ZKM19,
     &            IZ(0:8)
      
      do 1 N=0,8
         CN1111(N) = 0.
         CN2222(N) = 0.
         CN1122(N) = 0.
         CN1212(N) = 0.
         CN1112(N) = 0.
         CN2212(N) = 0.
1     continue

      do 2 N=0,8
         CN1313(N) = 0.
         CN2323(N) = 0.
         CN1323(N) = 0.
2     continue

      do 3 N=0,6
         CN1133(N) = 0.
         CN2233(N) = 0.
         CN1233(N) = 0.
3     continue

      do 4 N=0,6
         CN3333(N) = 0.
4     continue

      do 5 N=0,6
         BTTN11(N) = 0.
         BTTN22(N) = 0.
         BTTN12(N) = 0.
         BTTN33(N) = 0.
         BTMN11(N) = 0.
         BTMN22(N) = 0.
         BTMN12(N) = 0.
         BTMN33(N) = 0.
5     continue
      
      

      
      ZK     = - LTHKNS / 2.

      do 7 STK=1,NSTACK
      
         ZKM1 = ZK
         ZK   = ZKM1 + STHKNS(STK)
         
         MAT = MATNO(STK)
         
         if (MAT .gt. NMAT) then
            call ERROR('LAMCOF','That MATerial NO. is not defined  ')
         end if
         
comment: Calculate the elasticity constants (in the primed (lamina) coordinate
c        system) from the engineering constants

         call ENGTOC(E1(MAT),E2(MAT),E3(MAT),NU12(MAT),NU13(MAT),
     &               NU23(MAT),G12(MAT),G13(MAT),G23(MAT),
     &                  CP1111,CP2222,CP3333,CP1122,CP1133,CP2233,
     &                  CP1212,CP1313,CP2323)
     
comment: BTPT11: BeTa Prime Thermal  11;
c        BTPM11: BeTa Prime Moisture 11;
c        ALPHT1(I): ALPHa Thermal 1 for stack I

         call ALTOBT(BTPT11,BTPT22,BTPT33,
     &               ALPHT1(MAT),ALPHT2(MAT),ALPHT3(MAT),
     &               CP1111,CP2222,CP3333,CP1122,CP1133,CP2233)
     
         call ALTOBT(BTPM11,BTPM22,BTPM33,
     &               ALPHM1(MAT),ALPHM2(MAT),ALPHM3(MAT),
     &               CP1111,CP2222,CP3333,CP1122,CP1133,CP2233)
     
comment: If plane stress is assumed, calculate the reduced
c        stiffnesses
         
         if (.not. V3CODE) then
            CP1111  = CP1111 - CP1133*CP1133/CP3333
            CP2222  = CP2222 - CP2233*CP2233/CP3333
            CP1122  = CP1122 - CP1133*CP2233/CP3333
           
            BTPT11 = BTPT11 - CP1133*BTPT33/CP3333
            BTPT22 = BTPT22 - CP2233*BTPT33/CP3333
            
            BTPM11 = BTPM11 - CP1133*BTPM33/CP3333
            BTPM22 = BTPM22 - CP2233*BTPM33/CP3333
         end if

comment: Calculate the coefficients in the global coordinate system.
          
         T = THETA(STK) *PI/180.

         call STIFRO(CP1111,CP2222,CP3333,CP1122,CP1133,CP2233,
     &                  CP1212,CP1313,CP2323,T,
     &                  C1111, C2222, C3333,
     &                  C1122, C1133, C2233, C1233,
     &                  C1212, C1112, C2212, C1313, C2323, C1323)
     
         call STRRO(BTPT11,BTPT22,BTPT33,T,
     &              BETT11,BETT22,BETT33,BETT12)
     
         call STRRO(BTPM11,BTPM22,BTPM33,T,
     &              BETM11,BETM22,BETM33,BETM12)
     
     
         ZK2 = ZK*ZK
         ZK3 = ZK2*ZK
         ZK4 = ZK2*ZK2
         ZK5 = ZK3*ZK2
         ZK6 = ZK3*ZK3
         ZK7 = ZK4*ZK3
         ZK8 = ZK4*ZK4
         ZK9 = ZK5*ZK4
         
         ZKM12 = ZKM1*ZKM1
         ZKM13 = ZKM12*ZKM1
         ZKM14 = ZKM12*ZKM12
         ZKM15 = ZKM13*ZKM12
         ZKM16 = ZKM13*ZKM13
         ZKM17 = ZKM14*ZKM13
         ZKM18 = ZKM14*ZKM14
         ZKM19 = ZKM15*ZKM14
         
         IZ(0) = ZK - ZKM1
         IZ(1) = ZK2 - ZKM12
         IZ(2) = ZK3 - ZKM13
         IZ(3) = ZK4 - ZKM14
         IZ(4) = ZK5 - ZKM15
         IZ(5) = ZK6 - ZKM16
         IZ(6) = ZK7 - ZKM17
         IZ(7) = ZK8 - ZKM18
         IZ(8) = ZK9 - ZKM19
         
         if (SYM) then
         
            do 8 N=0,8,2
               CN1111(N) = CN1111(N) + C1111*IZ(N)
               CN2222(N) = CN2222(N) + C2222*IZ(N)
               CN1122(N) = CN1122(N) + C1122*IZ(N)
               CN1212(N) = CN1212(N) + C1212*IZ(N)
               CN1112(N) = CN1112(N) + C1112*IZ(N)
               CN2212(N) = CN2212(N) + C2212*IZ(N)
8           continue

            do 9 N=0,8,2
               CN1313(N) = CN1313(N) + C1313*IZ(N)
               CN2323(N) = CN2323(N) + C2323*IZ(N)
               CN1323(N) = CN1323(N) + C1323*IZ(N)
9           continue

            do 10 N=0,6,2
               CN1133(N) = CN1133(N) + C1133*IZ(N)
               CN2233(N) = CN2233(N) + C2233*IZ(N)
               CN1233(N) = CN1233(N) + C1233*IZ(N)
10          continue

            do 11 N=0,6,2
               CN3333(N) = CN3333(N) + C3333*IZ(N)
11          continue

            do 12 N=0,6,2
               BTTN11(N) = BTTN11(N) + BETT11*IZ(N)
               BTTN22(N) = BTTN22(N) + BETT22*IZ(N)
               BTTN12(N) = BTTN12(N) + BETT12*IZ(N)
               BTTN33(N) = BTTN33(N) + BETT33*IZ(N)
   
               BTMN11(N) = BTMN11(N) + BETM11*IZ(N)
               BTMN22(N) = BTMN22(N) + BETM22*IZ(N)
               BTMN12(N) = BTMN12(N) + BETM12*IZ(N)
               BTMN33(N) = BTMN33(N) + BETM33*IZ(N)
12          continue
            
          else
            
            do 13 N=0,8
               CN1111(N) = CN1111(N) + C1111*IZ(N)
               CN2222(N) = CN2222(N) + C2222*IZ(N)
               CN1122(N) = CN1122(N) + C1122*IZ(N)
               CN1212(N) = CN1212(N) + C1212*IZ(N)
               CN1112(N) = CN1112(N) + C1112*IZ(N)
               CN2212(N) = CN2212(N) + C2212*IZ(N)
13          continue

            do 14 N=0,8
               CN1313(N) = CN1313(N) + C1313*IZ(N)
               CN2323(N) = CN2323(N) + C2323*IZ(N)
               CN1323(N) = CN1323(N) + C1323*IZ(N)
14          continue

            do 15 N=0,6
               CN1133(N) = CN1133(N) + C1133*IZ(N)
               CN2233(N) = CN2233(N) + C2233*IZ(N)
               CN1233(N) = CN1233(N) + C1233*IZ(N)
15          continue

            do 16 N=0,6
               CN3333(N) = CN3333(N) + C3333*IZ(N)
16          continue

            do 17 N=0,6
               BTTN11(N) = BTTN11(N) + BETT11*IZ(N)
               BTTN22(N) = BTTN22(N) + BETT22*IZ(N)
               BTTN12(N) = BTTN12(N) + BETT12*IZ(N)
               BTTN33(N) = BTTN33(N) + BETT33*IZ(N)
   
               BTMN11(N) = BTMN11(N) + BETM11*IZ(N)
               BTMN22(N) = BTMN22(N) + BETM22*IZ(N)
               BTMN12(N) = BTMN12(N) + BETM12*IZ(N)
               BTMN33(N) = BTMN33(N) + BETM33*IZ(N)
17          continue
            
         end if
         
7      continue   
       
         
       if (SYM) then
          
         do 18 N=0,8,2
            CN1111(N) = CN1111(N) * 2.0  / (N+1)
            CN2222(N) = CN2222(N) * 2.0  / (N+1)
            CN1122(N) = CN1122(N) * 2.0  / (N+1)
            CN1212(N) = CN1212(N) * 2.0  / (N+1)
            CN1112(N) = CN1112(N) * 2.0  / (N+1)
            CN2212(N) = CN2212(N) * 2.0  / (N+1)
18       continue

         do 19 N=0,8,2
            CN1313(N) = CN1313(N) * 2.0  / (N+1)
            CN2323(N) = CN2323(N) * 2.0  / (N+1)
            CN1323(N) = CN1323(N) * 2.0  / (N+1)
19       continue

         do 20 N=0,6,2
            CN1133(N) = CN1133(N) * 2.0  / (N+1)
            CN2233(N) = CN2233(N) * 2.0  / (N+1)
            CN1233(N) = CN1233(N) * 2.0  / (N+1)
20       continue

         do 21 N=0,6,2
            CN3333(N) = CN3333(N) * 2.0  / (N+1)
21       continue

         do 22 N=0,6,2
            BTTN11(N) = BTTN11(N) * 2.0  / (N+1)
            BTTN22(N) = BTTN22(N) * 2.0  / (N+1)
            BTTN12(N) = BTTN12(N) * 2.0  / (N+1)
            BTTN33(N) = BTTN33(N) * 2.0  / (N+1)
   
            BTMN11(N) = BTMN11(N) * 2.0  / (N+1)
            BTMN22(N) = BTMN22(N) * 2.0  / (N+1)
            BTMN12(N) = BTMN12(N) * 2.0  / (N+1)
            BTMN33(N) = BTMN33(N) * 2.0  / (N+1)
22       continue

       else

         do 23 N=0,8
            CN1111(N) = CN1111(N)  / (N+1)
            CN2222(N) = CN2222(N)  / (N+1)
            CN1122(N) = CN1122(N)  / (N+1)
            CN1212(N) = CN1212(N)  / (N+1)
            CN1112(N) = CN1112(N)  / (N+1)
            CN2212(N) = CN2212(N)  / (N+1)
23       continue

         do 24 N=0,8
            CN1313(N) = CN1313(N)  / (N+1)
            CN2323(N) = CN2323(N)  / (N+1)
            CN1323(N) = CN1323(N)  / (N+1)
24       continue

         do 25 N=0,6
            CN1133(N) = CN1133(N)  / (N+1)
            CN2233(N) = CN2233(N)  / (N+1)
            CN1233(N) = CN1233(N)  / (N+1)
25       continue

         do 26 N=0,6
            CN3333(N) = CN3333(N)  / (N+1)
26       continue

         do 27 N=0,6
            BTTN11(N) = BTTN11(N)  / (N+1)
            BTTN22(N) = BTTN22(N)  / (N+1)
            BTTN12(N) = BTTN12(N)  / (N+1)
            BTTN33(N) = BTTN33(N)  / (N+1)
   
            BTMN11(N) = BTMN11(N)  / (N+1)
            BTMN22(N) = BTMN22(N)  / (N+1)
            BTMN12(N) = BTMN12(N)  / (N+1)
            BTMN33(N) = BTMN33(N)  / (N+1)
27       continue
        
      end if
      
      do 50 N=0,8
      
         write(DOCFIL,100) N,CN1111(N),N,CN2222(N),N,CN1122(N),
     &                     N,CN1212(N),N,CN1112(N),N,CN2212(N),
     &                     N,CN1313(N),N,CN2323(N),N,CN1323(N)
100      format(//' CN1111(',i1,') = ',e12.5,2x,
     &            ' CN2222(',i1,') = ',e12.5,2x,
     &            ' CN1122(',i1,') = ',e12.5,/
     &            ' CN1212(',i1,') = ',e12.5,2x,
     &            ' CN1112(',i1,') = ',e12.5,2x,
     &            ' CN2212(',i1,') = ',e12.5,/
     &            ' CN1313(',i1,') = ',e12.5,2x,
     &            ' CN2323(',i1,') = ',e12.5,2x,
     &            ' CN1323(',i1,') = ',e12.5)
50    continue


      do 55 N=0,6
      
         write(DOCFIL,110) N,CN1133(N),N,CN2233(N),N,CN1233(N),
     &                     N,CN3333(N)
110      format(//' CN1133(',i1,') = ',e12.5,2x,
     &            ' CN2233(',i1,') = ',e12.5,2x,
     &            ' CN1233(',i1,') = ',e12.5,/
     &            ' CN3333(',i1,') = ',e12.5)
55    continue

      do 60 N=0,6
      
         write(DOCFIL,120) N,BTTN11(N),N,BTTN22(N),
     &                     N,BTTN12(N),N,BTTN33(N),
     &                     N,BTMN11(N),N,BTMN22(N),
     &                     N,BTMN12(N),N,BTMN33(N)
120      format(//' BTTN11(',i1,') = ',e12.5,2x,
     &            ' BTTN22(',i1,') = ',e12.5,2x,
     &            ' BTTN12(',i1,') = ',e12.5,/
     &            ' BTTN33(',i1,') = ',e12.5//
     &            ' BTTM11(',i1,') = ',e12.5,2x,
     &            ' BTTM22(',i1,') = ',e12.5,2x,
     &            ' BTTM12(',i1,') = ',e12.5,/
     &            ' BTTM33(',i1,') = ',e12.5)
60    continue
       
      return
      end
      
      
      
      subroutine LINSHP(LSH,LPSH,XI)
      
c     Name:      LINear SHAPe function.
c     Purpose:   To calculat the values of the linear shape function at the
c                postion XI
c     Common:    
c     Input:     XI, local element coordinate
c     Output:    LSH(2) (Linear SHape function array), The I'th element is the
c                  value at XI of the I'th linear isoparametric shape function.
c                LPSH(2) (Linear Primed SHape function array), The I'th element
c                  is the value at XI of the derivative of the I'th linear
c                  isoparametric shape function.
c     Called by: BCY121
c     Calls    : 

      
      real*8       LSH(2),LPSH(2),XI
      
      LSH(1) = (1. - XI)/2.
      LSH(2) = (1. + XI)/2.
      
      LPSH(1) = -0.5
      LPSH(2) = +0.5
      
      return
      end
      
      
      subroutine LJOUT(EL,LENGTH,JACOB)
      
c     Purpose: To print the length and Jacobian.

      
      integer     EL
      real*8      LENGTH,JACOB
      
      write(4,100) EL,LENGTH,JACOB
100   format(///' EL=',I4,2X,'LENGTH=',F10.4,2X,'JACOB=',F10.4/)
 
      return
      end
      
      subroutine NODEIN
      
c     Name:      NODE INput
c     Purpose:   To read in the given nodal coordinates and calculate the rest.
c     Common:    ELMDAT1, ELMDAT2
c     Input:     NODE, X(NODE) from INPUT.DAT
c     Output:    Data in the ELMDAT2 common
c     Called by: INPUT
c     Calls    : ERROR

      
      integer   INFIL,OUTFIL,ERRRFL,UFIL,WFIL,BFIL,SHPFIL,POSFIL,
     *          NRFIL,M1RFIL,M2RFIL,M3RFIL,QRFIL,TRFIL,DOCFIL
      parameter(INFIL=10,OUTFIL=11,ERRRFL=12,UFIL=20, WFIL=21, BFIL=22,
     *          SHPFIL=23, POSFIL=24,NRFIL=25,M1RFIL=26,M2RFIL=27,
     *          M3RFIL=28,QRFIL=29,TRFIL=30,DOCFIL=4)
    
    
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      
      integer NODE,NUMENOD,I,DIFF,LASTNODE
      real*8  XEINCR,LASTXE,POSITION

c     NUMber of Edge NODes      
      NUMENOD = NUMEL+1
      
      read(INFIL,*)  NODE,POSITION
      XEDGE(NODE) = POSITION      
      
      if (NODE .ne. 1) call ERROR('NODEIN','First node must be 1.')
      
commment: interpolate to calculate the element edge nodal coordinates that are
c         not given.

1      continue 
         LASTNODE = NODE
         LASTXE   = XEDGE(NODE)               
         read(INFIL,*)  NODE,POSITION
         XEDGE(NODE) = POSITION        
         if (NODE .gt. NUMENOD) then
               call ERROR('NODEIN    ',
     *                    'Last node must be NUMEL+1.    ')
            else if (NODE .le. LASTNODE) then
               call ERROR('NODEIN    ',
     *                    'Nodes must increase.          ')
            else if (XEDGE(NODE) .le. LASTXE) then
               call ERROR('NODEIN    ',
     *                    'XEDGE(NODE) must increase.        ')
         end if
        
          DIFF  = NODE - LASTNODE
          XEINCR = (XEDGE(NODE) - LASTXE) / DIFF
         
          do 2, I=1,DIFF-1
             XEDGE(LASTNODE+I) = LASTXE + XEINCR*I
2         continue
         
          if (NODE .eq. NUMENOD) return
         
      go to 1
               
      end
      
      subroutine OUTPUT


      integer   INFIL,OUTFIL,ERRRFL,UFIL,WFIL,BFIL,SHPFIL,POSFIL,
     *          NRFIL,M1RFIL,M2RFIL,M3RFIL,QRFIL,TRFIL,DOCFIL
      parameter(INFIL=10,OUTFIL=11,ERRRFL=12,UFIL=20, WFIL=21, BFIL=22,
     *          SHPFIL=23, POSFIL=24,NRFIL=25,M1RFIL=26,M2RFIL=27,
     *          M3RFIL=28,QRFIL=29,TRFIL=30,DOCFIL=4)
    
    
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer     BCTYPE(2),BCCODE(2,MXNBC)
      real*8      UBC(2,MXNVAR),TBC(2,MXNVAR)
      common /BC/ BCTYPE,BCCODE,UBC,TBC
      save /BC/
      
      
      character*10    OTFILE
      logical         BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI
      integer         THEORY,TORORD,OSHPU,OSHPW,OSHPD, NINT,NINTW,NINTD
      common /CONTRL/ BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI,
     *                THEORY,TORORD,OSHPU,OSHPW,OSHPD,NINT,NINTW,NINTD,
     *                OTFILE
      save   /CONTRL/
      
      
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      character*4     SHAPE
      real*8          RAD,R0,ALPHAD,RC,RPHI,PHI0D,RAT0,OFFSET,
     &                CYLEN,CONEHT,PHI1,PHI2,XF,XS
      common /GEOM/   RAD,R0,ALPHAD,RC,RPHI,PHI0D,RAT0,OFFSET,
     &                CYLEN,CONEHT,PHI1,PHI2,XF,XS,SHAPE
      save   /GEOM/
      
      real*8            E,NU,ALPHA,
     &                  C1111,C2222,C3333,C1122,C1133,C2233,
     &                  C1212,C1313,C2323,
     &                  ALPH11,ALPH22,ALPH33,
     &                  BETA11,BETA22,BETA33,THCKNS,
     &                  CI1111,CI2222,CI1122,BITA11,BITA22
      common /HOMMAT/   E,NU,ALPHA,
     &                  C1111,C2222,C3333,C1122,C1133,C2233,
     &                  C1212,C1313,C2323,
     &                  ALPH11,ALPH22,ALPH33,
     &                  BETA11,BETA22,BETA33,THCKNS,
     &                  CI1111,CI2222,CI1122,BITA11,BITA22
      save   /HOMMAT/
      
      integer      TERM,ERRFIL
      common /IO/  TERM,ERRFIL
      save   /IO/
      
      logical           SYM
      integer           NSTACK,MATNO(MAXSTK),NPLY(MAXSTK)
      real*8            LTHKNS,PTHK(MAXSTK),THETA(MAXSTK),STHKNS(MAXSTK)
     
      common  /LAYUP/   SYM,
     &                  NSTACK,MATNO,NPLY,
     &                  LTHKNS,PTHK,THETA,STHKNS
 
      save    /LAYUP/
      
      
      real*8           THICK,PZTOP,PZBOT,N11,N22,M11,M22,
     *                 TEMP0(MAXELM+1), TEMP1(MAXELM+1),
     *                 TEMP2(MAXELM+1),
     *                 MOIST0(MAXELM+1),MOIST1(MAXELM+1),
     *                 MOIST2(MAXELM+1)
     
      common /LOAD/    THICK,PZTOP,PZBOT,N11,N22,M11,M22,
     *                 TEMP0,TEMP1,TEMP2,
     *                 MOIST0,MOIST1,MOIST2
      save   /LOAD/
      
      
      logical          HOMOGN
      character*3      MATCODE      
      common /MATCOD/  HOMOGN,MATCODE
      save   /MATCOD/


      logical         MATLOG(MAXMAT)
      
      character*30    MATNAM(MAXMAT)
      
      integer         NMAT,MATTYP(MAXMAT)
      
      real*8          E1(MAXMAT),E2(MAXMAT),E3(MAXMAT),
     &                NU12(MAXMAT),NU13(MAXMAT),NU23(MAXMAT),
     &                G12(MAXMAT),G13(MAXMAT),G23(MAXMAT),
     &                ALPHT1(MAXMAT),ALPHT2(MAXMAT),ALPHT3(MAXMAT),
     &                ALPHM1(MAXMAT),ALPHM2(MAXMAT),ALPHM3(MAXMAT)
 
      common /MATPRP/
     &                E1,E2,E3,
     &                NU12,NU13,NU23,
     &                G12,G13,G23,
     &                ALPHT1,ALPHT2,ALPHT3,
     &                ALPHM1,ALPHM2,ALPHM3,
     &                NMAT,MATTYP,
     &                MATLOG, MATNAM

 
      save  /MATPRP/

      real*8          DISP(MAXNOD,MXNVAR)
      
      common /OUT/    DISP
      save   /OUT/


      integer           NOSPT
      real*8            SOPT(MXSOPT), STRESR(MXSOPT,MXNEPS),
     *                  STRAIN(MXSOPT,MXNEPS)
      
      common /STRSES/   SOPT,STRESR,STRAIN,NOSPT
      save   /STRSES/

      character*80     TITLE
      common /TITLE/   TITLE
      save   /TITLE/

      character*1    UNIT
      character*2    LENUS
      character*3    X1,STRSUS
      character*5    TEMPUS
      character*6    LENUL,DISPUS(0:4)
      character*7    X1US,X1UL,STRSUL,ALPTUS,TEMPUL
      character*8    RSLTUS(0:3)
      character*10   ALPTUL
      character*17   ALPMUL,ALPMUS
      character*22   DISPUL(0:3)
      character*27   RSLTUL(0:3)
      common /UNITS/ UNIT,LENUS,LENUL,STRSUS,STRSUL,X1,X1US,X1UL,
     &               ALPTUS,ALPTUL,ALPMUS,ALPMUL,TEMPUS,TEMPUL,
     &               DISPUS,DISPUL,RSLTUS,RSLTUL
      save   /UNITS/
      
      
      
      integer      NODE,I,J,VAR,SPTNO,NOENOD,EL,DOF
      character*17 SHAPEL
         
      open (unit=OUTFIL, file= OTFILE, status= 'new')

      call INWRT(OUTFIL)
      

1240  format(//' Number of nodes per element:',i4,/,
     *         ' Number of nodes:            ',i4//)

1250  format(' IEN transpose')
1260       format(20I4)
20    continue

1270  format(//' ID transpose')
25    continue

      write(OUTFIL,1280) NUMEQ
1280  format(/' No. of equations:',I5)
1290  format(/' NDOFPN')
1300  format(20I5)

1310  format(//' FDOF')
1320  format(20I5)
30    continue

      write(OUTFIL,1325) LNKSKY
1325  format(//' Length of K skyline = ',I5)
1330  format(//' JDIAG')
     
35    continue

      if (.not. BACK) then
         write(OUTFIL,1331)
1331     format(////' Not solving for displacements.')
         return
      end if
      


      write(OUTFIL,1340)
1340  format(///'   Displacements'//)


      
      write(OUTFIL,1350) X1,X1US,DISPUS(0),DISPUS(0),DISPUS(0),
     *                   DISPUS(1),DISPUS(1)
1350  format(x,'Node',4x,a,10x,'U 1',10x,'U 2',10x,'W',
     *      10x,'1 Beta1',6x,'1 Beta2'/9x,a,6x,a,4(7x,a))
     
      do 40 NODE=1,NUMNOD
         write(OUTFIL,1360) NODE, XNODE(NODE),
     *                     (DISP(NODE,VAR), VAR=1,5)
40    continue
1360  format(i3,20(x,e12.5))



      if (NVAR .ge. 12) then
       
           write(OUTFIL,1370) X1,X1US,DISPUS(1),DISPUS(2),DISPUS(3)
1370       format(//x,'Node',4x,a,10x,'1 Eta ',
     *            7x,'2 Eta',7x,'3 Eta'/9x,a,6x,a,2(7x,a))

           do 50 NODE=1,NUMNOD
              write(OUTFIL,1360) NODE, XNODE(NODE),
     *                         (DISP(NODE,VAR), VAR=6,7),DISP(NODE,12)
50         continue


        else if (NVAR .ge. 7) then
       
           write(OUTFIL,1380) X1,X1US,DISPUS(1),DISPUS(2)
1380       format(//x,'Node',4x,a,10x,'1 Eta ',7x,'2 Eta'/ 
     &            9x,a,6x,a,(7x,a))

           do 55 NODE=1,NUMNOD
              write(OUTFIL,1360) NODE, XNODE(NODE),
     *                         (DISP(NODE,VAR), VAR=6,7)
55         continue


        else if (NVAR .ge. 6) then
      
           write(OUTFIL,1390) X1,X1US,DISPUS(1)
1390       format(//x, 'Node',5x,a,10x,'1 Eta'/
     &            9x,a,6x,a)

           do 60 NODE=1,NUMNOD
              write(OUTFIL,1360) NODE, XNODE(NODE),DISP(NODE,6)
60         continue

      end if





       if (NVAR .ge. 11) then
       
           write(OUTFIL,1400)X1,X1US,DISPUS(2),DISPUS(2),DISPUS(3),
     *                   DISPUS(3)
1400       format(//x,'Node',4x,a,9x,'2 Beta1',6x,'2 Beta2',
     *          6x,'3 Beta1',6x,'3 Beta2'/
     &          9x,a,6x,a,4(7x,a))
         
           do 65 NODE=1,NUMNOD
              write(OUTFIL,1360) NODE, XNODE(NODE),
     *                          (DISP(NODE,VAR), VAR=10,11),
     *                          (DISP(NODE,VAR), VAR=8,9)
65         continue

         else if (NVAR .ge. 9) then
         
           write(OUTFIL,1410) X1,X1US,DISPUS(3),DISPUS(3)
1410       format(//x,'Node',4x,a,9x,'3 Beta1',6x,'3 Beta2'/
     &             9x,a,6x,a,2(7x,a))
         
          do 70 NODE=1,NUMNOD
             write(OUTFIL,1360) NODE, XNODE(NODE),
     *                          (DISP(NODE,VAR), VAR=8,9)
70        continue
        
      end if
               

      if (RIGID) then
      
         write(OUTFIL,1411) DISPUS(0)
1411     format(//' Rigid Body Motion Degrees of Freedom'//
     *             2x,'Element',7x,'Uz'/17x,a)
         do 71 EL=1,NUMEL
            NODE = IEN(2,EL)
            write(OUTFIL,1412) EL,(DISP(NODE,DOF), DOF=NVAR+1,NVAR+NRBM)
1412        format(3x,i3,10(3x,e12.5))
71       continue

      end if



      
      if (RSLT) then
      
         write(OUTFIL,1420)
1420     format(////'   Strains'//)      

         write(OUTFIL,1430) X1,X1US,DISPUS(1),DISPUS(1),DISPUS(1),
     &                      DISPUS(1)
1430     format(8x,a,8x,'Gama11',7x,'Gama22',7x,'Gama21'7x,'Gama12'/
     &          6x,a,4(7x,a))

         do 75 SPTNO = 1,NOSPT
            write(OUTFIL,1440) SOPT(SPTNO), (STRAIN(SPTNO,I), I=1,4)
75      continue
1440     format(x,5(x,e12.5))


         write(OUTFIL,1450) X1,X1US,DISPUS(2),DISPUS(2),DISPUS(2),
     &                      DISPUS(2)
1450     format(//,8x,a,8x,'1 Kapa11',5x,'1 Kapa22',5x,
     *                        '1 Kapa21',5x,'1 Kapa12'/
     &          6x,a,4(7x,a))
      
         do 80 SPTNO = 1,NOSPT
            write(OUTFIL,1440) SOPT(SPTNO), (STRAIN(SPTNO,I), I=5,8)
80      continue


         if (NEPS .ge. 22) then
         
            write(OUTFIL,1460) X1,X1US,DISPUS(3),DISPUS(3),DISPUS(3),
     &                      DISPUS(3)
1460        format(//,8x,a,9x,'2 Kapa11',5x,'2 Kapa22',5x,'2 Kapa21',
     *                    5x,'2 Kapa12'/
     &                    6x,a,4(7x,a))
      
            do 85 SPTNO = 1,NOSPT
               write(OUTFIL,1440) SOPT(SPTNO),
     *                            (STRAIN(SPTNO,I), I=15,18)
85         continue

            write(OUTFIL,1470) X1,X1US,DISPUS(4),DISPUS(4),DISPUS(4),
     &                      DISPUS(4)
1470        format(//,8x,a,8x,'3 Kapa11',5x,'3 Kapa22',5x,'3 Kapa21',
     *                       5x,'3 Kapa12'/
     &                    6x,a,4(7x,a))
      
            do 90 SPTNO = 1,NOSPT
               write(OUTFIL,1440) SOPT(SPTNO),
     *                            (STRAIN(SPTNO,I), I=19,22)
90         continue

         end if
      
      
      
      
         if (NEPS .ge. 27) then 

            write(OUTFIL,1480)X1,X1US,DISPUS(1),DISPUS(2),DISPUS(3)
1480        format(//,8x,a,8X,'0 Lambda',5x,'1 Lambda',5x,'2 Lambda'/
     &          6x,a,3(7x,a))
            do 95 SPTNO = 1,NOSPT
               write(OUTFIL,1440) SOPT(SPTNO), STRAIN(SPTNO,11),
     *                           STRAIN(SPTNO,14),STRAIN(SPTNO,27)
95         continue


          else if (NEPS .ge. 14) then
       
            write(OUTFIL,1490)X1,X1US,DISPUS(1),DISPUS(2)
1490        format(//,8x,a,8X,'0 Lambda',5x,'1 Lambda'/
     &          6x,a,2(7x,a))
            do 100 SPTNO = 1,NOSPT
               write(OUTFIL,1440) SOPT(SPTNO), STRAIN(SPTNO,11),
     *                           STRAIN(SPTNO,14)
100         continue

          else if (NEPS .ge. 11) then
       
            write(OUTFIL,1500)X1,X1US,DISPUS(1)
1500        format(//,8x,a,8X,'0 Lambda'/
     &          6x,a,7x,a)
            do 105 SPTNO = 1,NOSPT
               write(OUTFIL,1440) SOPT(SPTNO), STRAIN(SPTNO,11)
105         continue

          end if




          if (NEPS .ge. 26) then
      
            write(OUTFIL,1510) X1,X1US,DISPUS(1),DISPUS(1),
     &                         DISPUS(2),DISPUS(2)
1510        format(//,8x,a,8x,'1 Omega1',5x,'1 Omega2',6x,
     *                   '1 Xi1',8x,'1 Xi2'/ 
     &          6x,a,4(7x,a))
      
             do 110 SPTNO = 1,NOSPT
                write(OUTFIL,1440) SOPT(SPTNO),
     *                             (STRAIN(SPTNO,I), I=9,10),
     *                             (STRAIN(SPTNO,I), I=12,13)
110          continue
      
             write(OUTFIL,1520) X1,X1US,DISPUS(3),DISPUS(3),
     &                         DISPUS(4),DISPUS(4)
1520         format(//8x,a,10x,'2 Xi',9x,'2 Xi2',
     *               7x,'3 Xi1',8x,'3 Xi2'/
     &               6x,a,4(7x,a))
      
             do 120 SPTNO = 1,NOSPT
                  write(OUTFIL,1440) SOPT(SPTNO),
     *                               (STRAIN(SPTNO,I), I=23,26)
120          continue
         
         
           else if (NEPS .ge. 13) then
       
             write(OUTFIL,1530) X1,X1US,DISPUS(1),DISPUS(1),
     &                         DISPUS(2),DISPUS(2)
1530         format(//,8x,a,8x,'1 Omega1',5x,'1 Omega2',6x,
     *                           '1 Xi1',8x,'1 Xi2'/ 
     &               6x,a,4(7x,a))
      
             do 125 SPTNO = 1,NOSPT
               write(OUTFIL,1440) SOPT(SPTNO),
     *                            (STRAIN(SPTNO,I), I=9,10),
     *                            (STRAIN(SPTNO,I), I=12,13)
125          continue
      

           else if (NEPS .ge. 10) then
       
             write(OUTFIL,1540)X1,X1US,DISPUS(1),DISPUS(1)
1540         format(//,8x,a,8x,'1 Omega1',5x,'1 Omega2'/
     &               6x,a,2(7x,a))
      
             do 130 SPTNO = 1,NOSPT
                write(OUTFIL,1440) SOPT(SPTNO),
     *                             (STRAIN(SPTNO,I), I=9,10)
130          continue
       
         end if
     
     

         
        write(OUTFIL,1550)
1550    format(////'   Stress Resultants'//)

      
      
       
        write(OUTFIL,1560) X1,X1US,RSLTUS(0),RSLTUS(0),
     &                     RSLTUS(0),RSLTUS(0)
1560    format(8x,a,9x,'N11',10x,'N22',10x,'N21'10x,'N12'/
     &               5x,a,2x,4(5x,a))

        do 135 SPTNO = 1,NOSPT
           write(OUTFIL,1440) SOPT(SPTNO), (STRESR(SPTNO,I), I=1,4)
135     continue


         write(OUTFIL,1570) X1,X1US,RSLTUS(1),RSLTUS(1),
     &                      RSLTUS(1),RSLTUS(1)
1570     format(//,8x,a,9x,'1 M11',8x,'1 M22',8x,'1 M21',8x,'1 M12'/
     &               5x,a,2x,4(5x,a))
      
         do 140 SPTNO = 1,NOSPT
            write(OUTFIL,1440) SOPT(SPTNO), (STRESR(SPTNO,I), I=5,8)
140      continue




         if (NEPS .ge. 22) then
      
            write(OUTFIL,1580)X1,X1US,RSLTUS(2),RSLTUS(2),
     &                      RSLTUS(2),RSLTUS(2)
1580         format(//,8x,a,9x,'2 M11',8x,'2 M22',8x,'2 M21',
     *                   8x,'2 M12'/
     &               5x,a,2x,4(5x,a))
      
            do 145 SPTNO = 1,NOSPT
               write(OUTFIL,1440) SOPT(SPTNO),
     *                            (STRESR(SPTNO,I), I=15,18)
145         continue

            write(OUTFIL,1590)X1,X1US,RSLTUS(3),RSLTUS(3),
     &                      RSLTUS(3),RSLTUS(3)
1590        format(//,8x,a,9x,'3 M11',8x,'3 M22',8x,'3 M21',
     *                8x,'3 M12'/
     &               5x,a,2x,4(5x,a))
      
            do 160 SPTNO = 1,NOSPT
               write(OUTFIL,1440) SOPT(SPTNO),
     *                            (STRESR(SPTNO,I), I=19,22)
160         continue

         end if
      
      
      
         if (NEPS .ge. 27) then
      
            write(OUTFIL,1600)X1,X1US,RSLTUS(0),RSLTUS(1),
     &                      RSLTUS(2)
1600        format(//,8x,a,9x,'0 T',10x,'1 T',10x,'2 T'/
     &               5x,a,2x,3(5x,a))
            do 170 SPTNO = 1,NOSPT
               write(OUTFIL,1440) SOPT(SPTNO), STRESR(SPTNO,11),
     *                       STRESR(SPTNO,14), STRESR(SPTNO,27)
170         continue

           else if (NEPS .ge. 14) then   
         
            write(OUTFIL,1610)X1,X1US,RSLTUS(0),RSLTUS(1)
1610        format(//,8x,a,9x,'0 T',10x,'1 T'/
     &               5x,a,2x,2(5x,a))
            do 180 SPTNO = 1,NOSPT
               write(OUTFIL,1440) SOPT(SPTNO), STRESR(SPTNO,11),
     *                           STRESR(SPTNO,14)
180         continue


          else if (NEPS .ge. 11) then   
         
            write(OUTFIL,1620)X1,X1US,RSLTUS(0)
1620        format(//,8x,a,9x,'0 T'/
     &               5x,a,2x,5x,a)
            do 185 SPTNO = 1,NOSPT
               write(OUTFIL,1440) SOPT(SPTNO), STRESR(SPTNO,11)
185         continue

         end if
      
      
      
         if (NEPS .ge. 26) then
      
            write(OUTFIL,1630)X1,X1US,RSLTUS(0),RSLTUS(0),
     &                        RSLTUS(1),RSLTUS(1)
1630        format(//,8x,a,10x,'1 Q1',9x,'1 Q2',9X,'1 S1',9X,'1 S2',/      
     &               5x,a,2x,4(5x,a))
            do 190 SPTNO = 1,NOSPT
               write(OUTFIL,1440) SOPT(SPTNO),
     *                            (STRESR(SPTNO,I), I=9,10),
     *                            (STRESR(SPTNO,I), I=12,13)
190         continue

            write(OUTFIL,1640)X1,X1US,RSLTUS(2),RSLTUS(2),
     &                        RSLTUS(3),RSLTUS(3)
1640        format(//,8x,a,10x,'2 S',9x,'2 S2',9x,'3 S1',9x,'3 S2'/
     &               5x,a,2x,4(5x,a))
      
            do 200 SPTNO = 1,NOSPT
               write(OUTFIL,1440) SOPT(SPTNO),
     *                            (STRESR(SPTNO,I), I=23,26)
200         continue


          else if (NEPS .ge. 13) then
      
            write(OUTFIL,1650)X1,X1US,RSLTUS(0),RSLTUS(0),
     &                        RSLTUS(1),RSLTUS(1)
1650        format(//,8x,a,10x,'1 Q1',9x,'1 Q2',9X,'1 S1',9X,'1 S2',/
     &               5x,a,2x,4(5x,a))
      
            do 205 SPTNO = 1,NOSPT
               write(OUTFIL,1440) SOPT(SPTNO),
     *                            (STRESR(SPTNO,I), I=9,10),
     *                            (STRESR(SPTNO,I), I=12,13)
205         continue


          else if (NEPS .ge. 10) then
      
            write(OUTFIL,1660)X1,X1US,RSLTUS(0),RSLTUS(0)
1660        format(//,8x,a,10x,'1 Q1',9x,'1 Q2'/
     &               5x,a,2x,2(5x,a))
       
            do 210 SPTNO = 1,NOSPT
               write(OUTFIL,1440) SOPT(SPTNO), (STRESR(SPTNO,I), I=9,10),
210         continue


          end if

      
      end if
      
      
      
      close(OUTFIL)
      
      if (PLTSWC) call PLTOUT
      
      return
      end
      
      
c- PLTOUT -********************************************************************
c                                                                             *
c                                                                             *
      subroutine PLTOUT                                                       *
c                                                                             *
c     Name:      PLot OUTput                                                  *
c     Purpose:   To create data files for plotting routines.                  *  
c     Input:                                                                  *
c     Output:                                                                 *
c     Called by:                                                              *
c     Calls    :                                                              *
c     Common:                                                                 *
c                                                                             *
c******************************************************************************

      character*10    OTFILE
      logical         BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI
      integer         THEORY,TORORD,OSHPU,OSHPW,OSHPD, NINT,NINTW,NINTD
      common /CONTRL/ BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI,
     *                THEORY,TORORD,OSHPU,OSHPW,OSHPD,NINT,NINTW,NINTD,
     *                OTFILE
      save   /CONTRL/
      
      

      call DSPPLT
      call SHPPLT
      call POSPLT
      
      if (RSLT) then
         call RESPLT
      end if
      
      return
      end
      
      
c- POSPLT -********************************************************************
c                                                                             *
c                                                                             *
      subroutine POSPLT                                                       *
c                                                                             *
c     Name:      POSition PLot                                                *
c     Purpose:   To create data files for plotting the position of the nodes  * 
c                before and after the deformation.                            *
c     Input:                                                                  *
c     Output:                                                                 *
c     Called by:                                                              *
c     Calls    :                                                              *
c     Common:                                                                 *
c                                                                             *
c******************************************************************************


      integer   INFIL,OUTFIL,ERRRFL,UFIL,WFIL,BFIL,SHPFIL,POSFIL,
     *          NRFIL,M1RFIL,M2RFIL,M3RFIL,QRFIL,TRFIL,DOCFIL
      parameter(INFIL=10,OUTFIL=11,ERRRFL=12,UFIL=20, WFIL=21, BFIL=22,
     *          SHPFIL=23, POSFIL=24,NRFIL=25,M1RFIL=26,M2RFIL=27,
     *          M3RFIL=28,QRFIL=29,TRFIL=30,DOCFIL=4)
    
    
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      real*8          DISP(MAXNOD,MXNVAR)
      
      common /OUT/    DISP
      save   /OUT/


      
      character*1  TAB
      integer      NODE
      
      real*8       GPOSUD(MAXNOD,2),GPOSDF(MAXNOD,2),
     *             BIGNUM,MAXDPM,MINR,MAXR,MINZ,MAXZ,
     *             S,KAPA1,KAPA2,OA1,OA2,A2D1,R,Z,PHI,CPHI,SPHI,UPHI,W,
     *             SPAN,SCLFAC
     
      open (unit= POSFIL, file= 'POSOUT.DAT', status= 'new')

      TAB = char(9)
      
      BIGNUM = 9999999.
      MAXDPM = 0.
      MINR   = BIGNUM
      MAXR   = 0.
      MINZ   = BIGNUM
      MAXZ   = -BIGNUM
      
      do 1 NODE=1,NUMNOD
      
         S = XNODE(NODE)
         call DIMENS( KAPA1,KAPA2,OA1,OA2,A2D1,R,Z,PHI,S,.false.)
         
Comment:  calculate the Global POSitions of the UnDeformed nodes and store
c         maximum and minimum values of R and Z
         GPOSUD(NODE,1) = R
         GPOSUD(NODE,2) = Z
         MINR = dmin1(MINR,R)
         MAXR = dmax1(MAXR,R)
         MINZ = dmin1(MINZ,Z)
         MAXZ = dmax1(MAXZ,Z)
         
Comment:  temporarily store the R,Z displacements in GPOSDF.
c         (Global POSitions of the DeFormed nodes)
         CPHI = cos(PHI)
         SPHI = sin(PHI)
         UPHI = DISP(NODE,1)
         W    = DISP(NODE,3)
         GPOSDF(NODE,1) = UPHI*CPHI + W*SPHI
         GPOSDF(NODE,2) = UPHI*SPHI - W*CPHI
         
Comment:  store the square of the maximum of the magnitude of the 
c         displacement vector ( Uphi**2 + W**2) in MAXDPM
         MAXDPM = dmax1(MAXDPM,UPHI*UPHI + W*W)
         
1     continue

Comment:  calculate the displacement plotting scaling factor and store the
c         scaled deformed nodal positions in GPOSDF.
          
      SPAN   = sqrt((MAXR-MINR)*(MAXR-MINR) + (MAXZ-MINZ)*(MAXZ-MINZ))
      
      if (MAXDPM .eq. 0.) then
         write(POSFIL,90)
90       format(' U1 and W equal 0.')
         return
      end if
         
      MAXDPM = sqrt(MAXDPM)
      
      SCLFAC = SPAN * 0.1 / MAXDPM
      
      do 2 NODE=1,NUMNOD
         GPOSDF(NODE,1) = GPOSUD(NODE,1) + SCLFAC*GPOSDF(NODE,1)
         GPOSDF(NODE,2) = GPOSUD(NODE,2) + SCLFAC*GPOSDF(NODE,2)
         
         write(POSFIL,100) NODE,TAB,GPOSUD(NODE,1),TAB,GPOSUD(NODE,2),
     *                     TAB,GPOSDF(NODE,1),TAB,GPOSDF(NODE,2)
2     continue
100   format(x,i5,a1,4(x,e13.5,a1))

      return
      end
      
      
      subroutine QUASHP(QSH,QPSH,XI)
      
c     Name:      QUAdratic SHaPe function.
c     Purpose:   To calculate the values of the quadratic shape function at the
c                position XI.
c     Common:    
c     Input:     XI, local element coordinate
c     Output:    QSH(3) (Quadratic SHape function array), The I'th element is the
c                  value at XI of the I'th quadratic isoparametric shape function.
c                QPSH(3) (Quadratic Primed SHape function array), The I'th element
c                  is the value at XI of the derivative of the I'th quadratic
c                  isoparametric shape function.
c     Called by: BCY121
c     Calls    : 

      
      real*8       QSH(3),QPSH(3),XI,XI2
      
      XI2 = XI*XI
      
      QSH(1) = (XI2 - XI)/2.
      QSH(2) = 1. - XI2
      QSH(3) = (XI2 + XI)/2.
      
      
      QPSH(1) = XI - 0.5
      QPSH(2) = - 2.*XI
      QPSH(3) = XI + 0.5
      
      return
      end
      
      
       subroutine RBMSHP(RBMSH,RBMPSH,X,X1,X2)
      
c     Name:      Rigid Body Mode SHaPe function.
c     Purpose:   To calculate the values of the rigid body shape functions at the
c                postion X
c     Common:    
c     Input:     X, meridional coordinate in degrees
c                X1,X2, meridional coordinates of the edges of the element
c     Output:    RBMSH(2) (Rigid Body Mode SHape function array),
c                  The I'th element is the
c                  value at X of the I'th rigid body mode shape function.
c                RBMPSH(2) Rigid Body Mode Primed SHape function array),
c                  The I'th element
c                  is the value at X of the derivative of the I'th linear
c                  isoparametric shape function.
c     Called by: BN121
c     Calls    : 

      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      real*8     PI,PIODEG
      parameter (PI=3.14159265, PIODEG = 0.0174532952)
      
      
      
      real*8    RBMSH(MXNRBM),RBMPSH(MXNRBM),X,X1,X2,
     *          SX,CX,SX1,CX1,SX2,CX2,CONST1,CONST2,XR,X1R,X2R

      XR  = X*PIODEG
      X1R = X1*PIODEG
      X2R = X2*PIODEG

c      XR  = X
c      X1R = X1
c      X2R = X2

      SX  = sin(XR)
      CX  = cos(XR)
      SX1 = sin(X1R)
      CX1 = cos(X1R)
      SX2 = sin(X2R)
      CX2 = cos(X2R)
      
      CONST1 = (SX2 - SX1)/(X2R -X1R)
      CONST2 = (CX2 - CX1)/(X2R -X1R)

comment: the factor PIODEG in RBMPSH(i) are required since X is in
c        degrees.  d sin(phi)/d phi = PI/180. * cos(phi)  9/15/90      
      RBMSH(1)  =  - SX + SX1  + CONST1 * (XR - X1R) 
c      RBMPSH(1) =  - CX        + CONST1        [error in version 1.0]
      RBMPSH(1) =  (- CX + CONST1)*PIODEG
      RBMSH(2)  =    CX - CX1 - CONST2 * (XR - X1R) 
c      RBMPSH(2) =  - SX       - CONST2         [error in version 1.0]
      RBMPSH(2) =  (- SX  - CONST2)*PIODEG
      
      return
      end
      
 
c- RESPLT -********************************************************************
c                                                                             *
c                                                                             *
      subroutine RESPLT                                                       *
c                                                                             *
c     Name:      stress RESultant PLoT                                        *
c     Purpose:   To create data files for plotting stress resutants.          *  
c     Input:     STRESR from STRSES common                                    *
c     Output:    The resultants to the data files NROUT.DAT, MROUT.DAT,       *
c                VROUT.DAT                                                    *
c     Called by: PLTOUT                                                       *
c     Calls    :                                                              *
c     Common:    CONTRL                                                       *
c                                                                             *
c******************************************************************************


      integer   INFIL,OUTFIL,ERRRFL,UFIL,WFIL,BFIL,SHPFIL,POSFIL,
     *          NRFIL,M1RFIL,M2RFIL,M3RFIL,QRFIL,TRFIL,DOCFIL
      parameter(INFIL=10,OUTFIL=11,ERRRFL=12,UFIL=20, WFIL=21, BFIL=22,
     *          SHPFIL=23, POSFIL=24,NRFIL=25,M1RFIL=26,M2RFIL=27,
     *          M3RFIL=28,QRFIL=29,TRFIL=30,DOCFIL=4)
    
    
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      character*10    OTFILE
      logical         BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI
      integer         THEORY,TORORD,OSHPU,OSHPW,OSHPD, NINT,NINTW,NINTD
      common /CONTRL/ BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI,
     *                THEORY,TORORD,OSHPU,OSHPW,OSHPD,NINT,NINTW,NINTD,
     *                OTFILE
      save   /CONTRL/
      
      
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      integer           NOSPT
      real*8            SOPT(MXSOPT), STRESR(MXSOPT,MXNEPS),
     *                  STRAIN(MXSOPT,MXNEPS)
      
      common /STRSES/   SOPT,STRESR,STRAIN,NOSPT
      save   /STRSES/

      
      integer      SPTNO,I
      
      open (unit= NRFIL,  file= 'NROUT.DAT',  status= 'new')
      do 1 SPTNO = 1,NOSPT
         write(NRFIL,100) SOPT(SPTNO), (STRESR(SPTNO,I), I=1,4)
1     continue
100   format(x,5(x,e13.5))
      close(NRFIL)
      
      open (unit= M1RFIL,  file= 'M1ROUT.DAT', status= 'new')
      do 2 SPTNO = 1,NOSPT
         write(M1RFIL,100) SOPT(SPTNO), (STRESR(SPTNO,I), I=5,8)
2     continue
      close(M1RFIL)

      open (unit= M2RFIL, file= 'M2ROUT.DAT', status= 'new')
      do 3 SPTNO = 1,NOSPT
         write(M2RFIL,100) SOPT(SPTNO), (STRESR(SPTNO,I), I=15,18)
3     continue
      close(M2RFIL)

      open (unit= M3RFIL, file= 'M3ROUT.DAT', status= 'new')
      do 4 SPTNO = 1,NOSPT
         write(M3RFIL,100) SOPT(SPTNO), (STRESR(SPTNO,I), I=19,22)
4     continue
      close(M3RFIL)

      open (unit= QRFIL,  file= 'QROUT.DAT',  status= 'new')
      do 5 SPTNO = 1,NOSPT
         write(QRFIL,100) SOPT(SPTNO), (STRESR(SPTNO,I), I=9,11),
     *                    (STRESR(SPTNO,I), I=12,13),
     *                    (STRESR(SPTNO,I), I=23,26)
5     continue
      close(QRFIL)

      open (unit= TRFIL,  file= 'TROUT.DAT',  status= 'new')
      do 6 SPTNO = 1,NOSPT
         write(TRFIL,100) SOPT(SPTNO),STRESR(SPTNO,11),
     *                    STRESR(SPTNO,14),STRESR(SPTNO,27)
6     continue
      close(TRFIL)

      
      return
      end
      
c- RESULT -********************************************************************
c                                                                             *
c                                                                             *
      subroutine RESULT                                                       *
c                                                                             *
c     Name:      RESULT                                                       *
c     Purpose:   To calculate the stress resultants at the integration points.*  
c     Input:     The displacements of the nodes                               *
c     Output:    The stresses at the integration points.                      *
c     Called by:                                                              *
c     Calls    :                                                              *
c     Common:                                                                 *
c                                                                             *
c******************************************************************************


      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      character*10    OTFILE
      logical         BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI
      integer         THEORY,TORORD,OSHPU,OSHPW,OSHPD, NINT,NINTW,NINTD
      common /CONTRL/ BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI,
     *                THEORY,TORORD,OSHPU,OSHPW,OSHPD,NINT,NINTW,NINTD,
     *                OTFILE
      save   /CONTRL/
      
      
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      real*8   XIINT(MAXINT,MAXINT), WEIGHTS(MAXINT,MAXINT)
      common /INT/ XIINT,WEIGHTS
      save   /INT/

      real*8          DISP(MAXNOD,MXNVAR)
      
      common /OUT/    DISP
      save   /OUT/


      integer           NOSPT
      real*8            SOPT(MXSOPT), STRESR(MXSOPT,MXNEPS),
     *                  STRAIN(MXSOPT,MXNEPS)
      
      common /STRSES/   SOPT,STRESR,STRAIN,NOSPT
      save   /STRSES/

      
      integer      SPTNO,SPTN,SPTPEL,EL,I,J,K,GNODE,LNODE,DOF
      
      real*8       LENGTH,JACOB,XI,X,X1,X2,WEIGHT,XPOS,KAPA1,KAPA2,
     *             OA1,OA2,A2D1,R,Z,PHI,
     *             B(MAXNEN,MXNEPS,MXNVAR),N(MAXNEN,MXNVAR),
     *             EMAT(MXNEPS,MXNEPS),
     *             EPS(MXNEPS),FTHRM(MXNEPS),FMOIST(MXNEPS)
      
      call ZEROR2(STRESR,MXSOPT,MXNEPS)
      call ZEROR2(STRAIN,MXSOPT,MXNEPS)
      
      SPTPEL = min0(OSHPU,OSHPW,OSHPD)
      NOSPT  = NUMEL * SPTPEL

      SPTNO = 1
      
      do 1 EL=1,NUMEL
      
         X2 = XEDGE(EL + 1)
         X1 = XEDGE(EL)
         LENGTH = X2 - X1
         JACOB =  LENGTH * 0.5
                  
         do 2 SPTN=1,SPTPEL

            XI = XIINT(SPTPEL,SPTN)
            WEIGHT = WEIGHTS(SPTPEL,SPTN)
            X = XPOS(EL,XI)
            SOPT(SPTNO) = X
            call DIMENS(KAPA1,KAPA2,OA1,OA2,A2D1,R,Z,PHI,X,.true.)
            
            call BN(B,N,XI,X,X1,X2,KAPA1,KAPA2,OA1,OA2,A2D1,JACOB)
            call ESUB(EMAT,KAPA1,KAPA2)
            if (TCODE) call FTHERM(FTHRM,KAPA1,KAPA2,EL,XI,.true.)
            if (MOIST) call FTHERM(FMOIST,KAPA1,KAPA2,EL,XI,.false.)
                        
            do 3 I=1,NEPS
             do 7 J=1,NEPS
                EPS(J) = 0.
7            continue
             do 4 J=1,NEPS
              do 5 LNODE=1,NEN
               GNODE = IEN(LNODE,EL)
               do 6 K=1,NDOFPN(LNODE)
                  DOF = FDOF(LNODE,K)
                  EPS(J) = EPS(J) + B(LNODE,J,K)*DISP(GNODE,DOF)
6              continue
5             continue
             STRAIN(SPTNO,J) = EPS(J)
4            continue

             do 8 J=1,NEPS
                STRESR(SPTNO,I) = STRESR(SPTNO,I) + EMAT(I,J)*EPS(J)
c                STRESR(SPTNO,I) = STRESR(SPTNO,I)
c    *                               + EMAT(I,J)*STRAIN(SPTNO,J)
8            continue

             if (TCODE) then
                STRESR(SPTNO,I) = STRESR(SPTNO,I) + FTHRM(I)
             end if

             if (MOIST) then
                STRESR(SPTNO,I) = STRESR(SPTNO,I) + FMOIST(I)
             end if

3           continue
            
            
            SPTNO = SPTNO + 1
            
2        continue
1     continue           
      
      return 
      end
      
       
c- SHPPLT -********************************************************************
c                                                                             *
c                                                                             *
      subroutine SHPPLT                                                       *
c                                                                             *
c     Name:      SHaP PLoT                                                    *
c     Purpose:   To create data files for plotting the shapes                 *  
c     Input:                                                                  *
c     Output:    Position, (R,Z) of some points along the generator of the    *
c                shell.                                                       *
c     Called by: PLTOUT                                                       *
c     Calls    :                                                              *
c     Common:                                                                 *
c                                                                             *
c******************************************************************************

      
      integer   INFIL,OUTFIL,ERRRFL,UFIL,WFIL,BFIL,SHPFIL,POSFIL,
     *          NRFIL,M1RFIL,M2RFIL,M3RFIL,QRFIL,TRFIL,DOCFIL
      parameter(INFIL=10,OUTFIL=11,ERRRFL=12,UFIL=20, WFIL=21, BFIL=22,
     *          SHPFIL=23, POSFIL=24,NRFIL=25,M1RFIL=26,M2RFIL=27,
     *          M3RFIL=28,QRFIL=29,TRFIL=30,DOCFIL=4)
    
    
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      
      character*1  TAB
      integer      NPT,I
      real*8       SSTOP,SSBOT,SINCR,KAPA1,KAPA2,OA1,OA2,A2D1,R,Z,PHI,S
      
      open (unit= SHPFIL, file= 'SHPOUT.DAT', status= 'new')
      
      TAB = char(9)

      NPT   = 100
      SSTOP = XEDGE(1)
      SSBOT = XEDGE(NUMEL+1)
      SINCR = (SSBOT - SSTOP) / (NPT - 1)
      
      S = SSTOP
      do 1 I=1,NPT
         call DIMENS( KAPA1,KAPA2,OA1,OA2,A2D1,R,Z,PHI,S,.false.)
         write(SHPFIL,100) I,TAB,S,TAB,R,TAB,Z
100      format(x,i5,a1,3(x,e12.5,a1))
         S = S + SINCR
1     continue

       return
       end
       
       
         
C***************************************************************

	     subroutine SKYLIN(SK,F,D,JDIAG,NEQ,NSK,SKFAC,BACK)

c     Name:      SKYLINe
c     Purpose:   To solve Kd=F for d where K is stored is skyline profile.
c     Input:     SK(NSK): K stored is skyline profile.
c                F(NEQ):  Right hand side vector.
c                JDIAG(MAXNEQ): Pointer array to determine the location in the
c                    skyline profile global K matrix of diagonal pivots.  The
c                    I'th element of JDIAG(I)  is the location in skyline K of 
c                    the diagonal element K(I,I).
c                NEQ: Number of EQuations.
c                NSK: Number of elements of SK.
c                SKFAC: TRUE is SK is to be factored.
c                BACK: TRUE if D is to be found
c                
c     Output:    D(NEQ)
c     Called by:
c     Calls    : 
c     Note:     This subroutine is taken from The Finite Element Method, Third
c               Edition by O. C. Zienkiewicz (p. 740).

      
      logical    SKFAC,BACK
      integer    NEQ,JDIAG(NEQ),I,J,NSK,JR,JD,JH,IS,IE,ID,IH,IR,K
      real*8     F(NEQ),D(NEQ),SK(NSK),DD,DOT
      

        do 10 I=1,NEQ
10      D(I)=F(I)
                                                                               
        JR=0
        do 600 J=1,NEQ
        JD=JDIAG(J)
        JH=JD-JR
        IS=J-JH+2
        if(JH-2) 600,300,100
100     if(.not. SKFAC) go to 500
        IE=J-1
        K=JR+2
        ID=JDIAG(IS-1)
                      
C-------(REDUCE ALL EQUATIONS EXCEPT DIAGNAL )
                                                
        do 200 I=IS,IE
        IR=ID
        ID=JDIAG(I)
        if (ID-IR-1 .lt. I-IS+1) then
            IH = ID-IR-1
          else
            IH = I-IS+1
        end if
        if(IH .gt. 0) SK(K)=SK(K)-DOT(SK(K-IH),SK(ID-IH),IH)
200     K=K+1
                                      
C-------(REDUCE  THE DIAGNAL )        
                                      
300     if(.not. SKFAC) go to 500
        IR=JR+1
        IE=JD-1
        K=J-JD
        do 400 I=IR,IE
        ID=JDIAG(K+I)
        if(SK(ID) .eq. 0.) go to 400
        DD=SK(I)
        SK(I)=SK(I)/SK(ID)
        SK(JD)=SK(JD)-DD*SK(I)
400     continue
                                      
C-------( REDUCE THE  LOAD VECTOR )
                                      
500     if (BACK) D(J)=D(J)-DOT(SK(JR+1),D(IS-1),JH-1)
600     JR=JD
        if(.not. BACK) return
                                               
C-------(DIVIDED BY THE DIAGNAL PIVOTS )
                                               
        do 700 I=1,NEQ
        ID=JDIAG(I)
        if(SK(ID) .ne. 0.) D(I)=D(I)/SK(ID)
700     continue
                                               
C-------BACK SUBSTITUTION                      
                                               
1100    J=NEQ
        JD=JDIAG(J)
800     DD=D(J)
        J=J-1
        if(J .le. 0) return
        JR=JDIAG(J)
        if(JD-JR .le. 1) go to 1000
        IS=J-JD+JR+2
        K=JR-IS+1
        do 900 I=IS,J
900     D(I)=D(I)-SK(I+K)*DD
1000    JD=JR
        go to 800
   
   
        end

C--------------------------------------------------------
      subroutine SOLVE
      
c     Name:      SOLVE
c     Purpose:   To solve the equation Kd=F, put the results into the DISP,
c                and interpolate to get the other displacements
c     Input:     KSKY(MAXLKS): The K matrix in skyline profile storage.
c                F(NEQ):       The Force vector.
c     Output:    D(NEQ):       The Displacement vector.
c     Called by:
c     Calls    : NODEIN,NODECALC,ERROR
c     Common:    KF,ELMDAT


      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      character*10    OTFILE
      logical         BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI
      integer         THEORY,TORORD,OSHPU,OSHPW,OSHPD, NINT,NINTW,NINTD
      common /CONTRL/ BACK,FCODE,TCODE,MOIST,PLTSWC,V3CODE,SHEARC,RSLT,
     *                KSHORT,FLAT,RIGID,W1CHI,
     *                THEORY,TORORD,OSHPU,OSHPW,OSHPD,NINT,NINTW,NINTD,
     *                OTFILE
      save   /CONTRL/
      
      
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      real*8           KSKY(MAXLKS), F(MAXNEQ), D(MAXNEQ)
      common /KF/      KSKY,F,D
      save   /KF/
      
      real*8          DISP(MAXNOD,MXNVAR)
      
      common /OUT/    DISP
      save   /OUT/


      
      logical      SKFAC
      
      integer      NODE,VAR,GEQNO,I,DOF,
     *             UNINCR,WNINCR,DNINCR,FNODE,LNODE,MNODE
     
      real*8       U1INCR,U2INCR,WINCR,DINCR(MXNVAR)
      
100   format(/' in solve')
      
      SKFAC = .true.
      
      call SKYLIN(KSKY,F,D,JDIAG,NUMEQ,MAXLKS,SKFAC,BACK)
      if (.not. BACK) return
      

comment: move stored bc to proper place

      do 1 VAR=1,NVAR
         DISP(NUMNOD,VAR) = DISP(2,VAR)
         DISP(2,VAR) = 0.
1     continue

comment: store displacements into the array DISP

      do 2 NODE=1,NUMNOD
         do 3 VAR=1,NVAR+NRBM
            GEQNO = ID(VAR,NODE)
            if (GEQNO .ne. 0) then
               DISP(NODE,VAR) = D(GEQNO)
            end if
3        continue
2     continue

comment: interpolate for the other displacements

      UNINCR = NEN - OSHPU
      WNINCR = NEN - OSHPW
      DNINCR = NEN - OSHPD

      if (UNINCR .gt. 1) then
         FNODE = 1
         LNODE = FNODE + UNINCR
         do 4 I=1,NUMNOD
            if (LNODE .gt. NUMNOD) go to 4
            U1INCR = (DISP(LNODE,1) - DISP(FNODE,1)) / UNINCR
            U2INCR = (DISP(LNODE,2) - DISP(FNODE,2)) / UNINCR
            do 5 MNODE=FNODE+1,LNODE-1
               DISP(MNODE,1) = DISP(MNODE-1,1) + U1INCR
               DISP(MNODE,2) = DISP(MNODE-1,2) + U2INCR
5           continue
            FNODE = LNODE
            LNODE = LNODE + UNINCR
4        continue
      end if

      if (WNINCR .gt. 1) then
         FNODE = 1
         LNODE = FNODE + UNINCR
         do 6 I=1,NUMNOD
            if (LNODE .gt. NUMNOD) go to 6
            WINCR = (DISP(LNODE,3) - DISP(FNODE,3)) / WNINCR
            do 7 MNODE=FNODE+1,LNODE-1
               DISP(MNODE,3) = DISP(MNODE-1,3) + WINCR
7           continue
            FNODE = LNODE
            LNODE = LNODE + WNINCR
6        continue
      end if
      
      if (DNINCR .gt. 1) then
         FNODE = 1
         LNODE = FNODE + DNINCR
         do 8 I=1,NUMNOD
            if (LNODE .gt. NUMNOD) go to 8
            do 10 DOF=4,NVAR
               DINCR(DOF) = (DISP(LNODE,DOF) - DISP(FNODE,DOF)) / DNINCR
10          continue
            do 9 MNODE=FNODE+1,LNODE-1
               do 11 DOF=4,NVAR
                  DISP(MNODE,DOF) = DISP(MNODE-1,DOF) + DINCR(DOF)
11             continue
9           continue
            FNODE = LNODE
            LNODE = LNODE + DNINCR
8        continue
      end if
      
            
      return
      end
      
      
      subroutine STIFRO(CP1111,CP2222,CP3333,CP1122,CP1133,CP2233,
     &                  CP1212,CP1313,CP2323,T,
     &                  C1111, C2222, C3333,
     &                  C1122, C1133, C2233, C1233,
     &                  C1212, C1112, C2212, C1313, C2323, C1323)
c                                                                             *
c                                                                             *
c                                                                             *
c     Name:      STIFfness ROtation                                           *
c     Purpose:   To calculate the rotated stiffness coefficients              *  
c     Input:     CPIJKL, the stiffness in the primed coordinate system        *
c                T, (Theta)  The angle which the primed coordinate system is  *
c                  rotated (about the x3 axix) through.                       *
c     Output:    CIJKL, the stiffness in the unprimed coordinate system       *
c                shell.                                                       *
c     Called by:                                                              *
c     Calls    :                                                              *
c     Common:                                                                 *
c                                                                      |      *
c******************************************************************************

      

      real*8       CP1111,CP2222,CP3333,CP1122,CP1133,CP2233,CP1212,
     &             CP1313,CP2323,T,
     &             C1111, C2222, C3333, C1122,
     &             C1133, C2233, C1233,
     &             C1212, C1112, C2212, C1313, C2323, C1323,
     &             C2T,C4T,S2T,S4T,
     &             U1,U2,U3,U4,U5,U8,U9,U10,U11

      C2T = cos(2.*T)
      C4T = cos(4.*T)
      S2T = sin(2.*T)
      S4T = sin(4.*T)
      
      U1  = (3.*CP1111 + 3.*CP2222 + 2.*CP1122 + 4.*CP1212)/8.
      U2  = (CP1111 - CP2222)/2.
      U3  = (CP1111 + CP2222 - 2.*CP1122 - 4.*CP1212)/8.
      U4  = (CP1111 + CP2222 + 6.*CP1122 - 4.*CP1212)/8.
      U5  = (CP1111 + CP2222 - 2.*CP1122 + 4.*CP1212)/8.
      U8  = (CP1133 + CP2233)/2.
      U9  = (CP1133 - CP2233)/2.
      U10 = (CP1313 + CP2323)/2.
      U11 = (CP1313 - CP2323)/2.
      
      C1111 = U1 + U2*C2T + U3*C4T
      C2222 = U1 - U2*C2T + U3*C4T 
      C3333 = CP3333
      C1122 = U4 - U3*C4T
      C1133 = U8 + U9*C2T
      C2233 = U8 - U9*C2T
      C1233 = U9*S2T
      C1212 = U5 - U3*C4T
      C1313 = U10 + U11*C2T
      C2323 = U10 - U11*C2T
      C1323 = U11*S2T
      C1112 = U2*S2T/2. + U3*S4T
      C2212 = U2*S2T/2. - U3*S4T
      
100   format(/' Theta = ',e12.5,/
     &       ' CP1111= ',e12.5,3x,'CP2222= ',e12.5,3x,'CP3333= ',e12.5/
     &       ' CP1122= ',e12.5,3x,'CP1133= ',e12.5,3x,'CP2233= ',e12.5/
     &       ' CP1212= ',e12.5,3x,'CP1313= ',e12.5,3x,'CP2323= ',e12.5//
     &       ' C1111 = ',e12.5,3x,'C2222 = ',e12.5,3x,'C3333 = ',e12.5/
     &       ' C1122 = ',e12.5,3x,'C1133 = ',e12.5,3x,'C2233 = ',e12.5/
     &       ' C1233 = ',e12.5,/
     &       ' C1212 = ',e12.5,3x,'C1112 = ',e12.5,3x,'C2212 = ',e12.5/
     &       ' C1313 = ',e12.5,3x,'C2323 = ',e12.5,3x,'C1323 = ',e12.5/)

      
      return
      end
      
      subroutine STRRO(BETP11,BETP22,BETP33,T,
     &                 BETA11,BETA22,BETA33,BETA12)
c                                                                             *
c                                                                             *
c                                                                             *
c     Name:      STRess or STRain ROtation                                    *
c     Purpose:   To calculate the rotated stresses or strains; or expansion   *
c                stress or strain coefficients                                *  
c     Input:     BETa Prime ij, the coefficients in the primed coordinate     *
c                system                                                       *
c                T, (Theta)  The angle through which the primed coordinate    *
c                 system is rotated (counter clockwise about the x3 axis).    *
c     Output:    BETA ij, the coefficients in the unprimed coordinate system  *
c                shell.                                                       *
c     Called by: LAMCOF                                                       *
c     Calls    :                                                              *
c     Common:                                                                 *
c                                                                      |      *
c******************************************************************************

      


      real*8       BETP11,BETP22,BETP33,T,BETA11,BETA22,BETA33,BETA12,
     &             C2T,S2T,HB1PB2,HB1MB2
     
      C2T = cos(2.*T)
      S2T = sin(2.*T)
     
      HB1PB2 = (BETP11 + BETP22)/2.
      HB1MB2 = (BETP11 - BETP22)/2.
      
      BETA11 = HB1PB2 + HB1MB2*C2T
      BETA22 = HB1PB2 - HB1MB2*C2T
      BETA33 = BETP33
      BETA12 = HB1MB2*S2T
      
100   format(/' Theta = ',e12.5,/
     &      ' BETP11= ',e12.5,3x,'BETP22= ',e12.5,3x,'BETP33= ',e12.5,/
     &      ' BETA11= ',e12.5,3x,'BETA22= ',e12.5,3x,'BETA33= ',e12.5,/
     &      ' BETA12= ',e12.5/)

      return
      end
      
      
      subroutine SYMTZR(A,N)

c     Name:      Symmetrize (real)
c     Purpose:   To symmetrize a real matrix
c     Input:     A (An N by N matrix with non empty elements in the
c                upper triangle)
c                N 
c     Output:    A (The matrix with the lower triangle filled)
c     Called by: EISO


      integer     N,I,J
      real*8      A(N,N)
      
      do 1  I=1,N
           do 1 J=I+1,N
                A(J,I) = A(I,J)
1     continue
      
      return
      end
      subroutine XND121
      
c     Name:      X NoDe 121
c     Purpose:   To calculate the position of all the nodes.
c     Common:    ELMDAT
c     Input:     XEDGE(NUMEL)
c     Output:    XNODE:  position of all nodes
c     Called by: IDIEN
c     Calls    : 


      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      
      integer      I,I2
      
comment: Interpolate to find the position of all nodes.

      do 1 I=1,NUMEL+1
         XNODE(2*I-1) = XEDGE(I)
1     continue

      do 2 I=1,NUMEL
          I2 = I*2
          XNODE(I2) = (XNODE(I2-1) + XNODE(I2+1)) * 0.5
2     continue
         
      return
      end
     
     
      

      function XPOS(EL,XI)
      
c     Name:      X POSition
c     Purpose:   To calculate the merdional coordinate,X, corrosponding
c                to the local (element) coordinate XI of the element EL.
c     Input:     EL, the element number; XI, the local coordinate.
c     Output:    SPOS
c     Called by: FCYMCH
c     Calls    : 

      
      integer       EL
      real*8        XPOS,XI
      
      integer      MXNVAR,MXNRBM,MXNBC,MAXNOD,MAXELM,MAXNEN,
     *             MXNEPS,MAXINT,
     *             MAXNEQ,MAXLKS,MXSOPT,MAXMAT,MAXSTK
      parameter   (MXNVAR=13,MXNRBM=2,MXNBC=12,
     *             MAXNOD=81,MAXELM=40,MAXNEN=3,
     *             MXNEPS=27,MAXINT=3,MAXNEQ=573,MAXLKS=11000,
     *             MXSOPT=40,MAXMAT=15,MAXSTK=30)
     
      integer          NUMEL,NUMNOD,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF(MAXNEN,MXNVAR),
     *                 ID(MXNVAR,MAXNOD),IEN(MAXNEN,MAXNOD),
     *                 JDIAG(MAXNEQ),NUMEQ,NDOFPN(MAXNEN),LNKSKY
      real*8           XEDGE(MAXELM + 1),XNODE(MAXNOD)
      common /ELDATI/  NUMNOD, NUMEL,NEN,NVAR,NRBM,NBC,NEPS,
     *                 FDOF,NUMEQ,ID,
     *                 IEN,JDIAG,NDOFPN,LNKSKY
      common /ELDATR/  XEDGE,XNODE
      save   /ELDATI/
      save   /ELDATR/
      
      
      

      
      
      XPOS   =  XEDGE(EL) + (XI+1.)/2. * (XEDGE(EL+1) - XEDGE(EL))
      
      return
      end
      
      subroutine XWSKRO( EL,INT,XI,WEIGHT,S,
     *                   KAPA1,KAPA2,OA1,OA2,A2D1,R,WTJR)
      
c     Purpose: To print out the above variables.

      
      integer   INFIL,OUTFIL,ERRRFL,UFIL,WFIL,BFIL,SHPFIL,POSFIL,
     *          NRFIL,M1RFIL,M2RFIL,M3RFIL,QRFIL,TRFIL,DOCFIL
      parameter(INFIL=10,OUTFIL=11,ERRRFL=12,UFIL=20, WFIL=21, BFIL=22,
     *          SHPFIL=23, POSFIL=24,NRFIL=25,M1RFIL=26,M2RFIL=27,
     *          M3RFIL=28,QRFIL=29,TRFIL=30,DOCFIL=4)
    
    
      
      integer     EL,INT
      real*8      XI,WEIGHT,S,KAPA1,KAPA2,OA1,OA2,A2D1,R,WTJR
      
      write(DOCFIL,100) EL,INT,XI,WEIGHT,S,KAPA1,KAPA2,OA1,OA2,
     *                  A2D1,R,WTJR
100   format(/' EL=',I4,3X,'INT=',I3,3X,'XI=',e12.5,3X,'WEIGHT=',e12.5,/
     *       ' S=',e12.5,3X,'KAPA1=',e12.5,3X,'KAPA2=',e12.5,3X,/
     *       ' OA1=',e12.5,3X,'OA2=',e12.5,3x,'A2D1=',e12.5,
     *       'R=',e12.5,/' WTJR=',e12.5/)
     
      return
      end
      
      subroutine ZEROR2(A,M,N)
      
c     Name:      ZERO 2 dimensional Real array
c     Purpose:   To set the values of the elements of a two dimensional array to
c                zero.
c     Input:     M,N the dimensions of A
c     Output:    A(M,N) with zero valued elements.
c     Called by:
c     Calls    : 
c     Common:

      
      integer     M,N,I,J
      
      real*8      A(M,N)
      
      do 1 I=1,M
         do 2 J=1,N
            A(I,J) = 0.
2        continue
1     continue

      return
      end
      
